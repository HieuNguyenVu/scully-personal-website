{"version":3,"sources":["./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/accordion.js","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/expansion.js","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/form-field.js","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/autocomplete.js","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/chips.js","./src/app/main-screen/after-work/after-work.module.ts","./src/app/main-screen/hello/hello.component.ts","./src/app/main-screen/hello/hello.component.html","./src/app/main-screen/hello/hello.component.scss","./src/app/main-screen/main/main.component.ts","./src/app/main-screen/main/main.component.html","./src/app/main-screen/main/main.component.scss","./src/app/main-screen/main-screen-routing.module.ts","./src/app/main-screen/portfolio/portfolio-item.component.ts","./src/app/main-screen/portfolio/portfolio-item.component.scss","./src/app/main-screen/portfolio/portfolio.component.html","./src/app/main-screen/main-screen.service.ts","./src/app/main-screen/portfolio/portfolio.component.ts","./src/app/main-screen/portfolio/portfolio.component.scss","./src/app/main-screen/main-screen.module.ts"],"names":["nextId","CDK_ACCORDION","this","_stateChanges","Subject","_openCloseAllActions","id","_multi","multi","next","changes","complete","ɵfac","t","ɵdir","type","selectors","inputs","exportAs","features","provide","useExisting","propDecorators","nextId$1","ɵ0","undefined","accordion","_changeDetectorRef","_expansionDispatcher","_openCloseAllSubscription","Subscription","EMPTY","closed","opened","destroyed","expandedChange","_expanded","_disabled","_removeUniqueSelectionListener","listen","accordionId","expanded","_subscribeToOpenCloseAllActions","emit","notify","markForCheck","disabled","unsubscribe","subscribe","outputs","useValue","ctorParameters","decorators","args","CdkAccordionModule","ɵmod","ɵinj","factory","ngJitMode","declarations","exports","_c0","MatExpansionPanel_ng_template_5_Template","rf","ctx","_c1","MatExpansionPanelHeader_span_4_Template","ctx_r0","_getExpandedState","_c3","MAT_ACCORDION","EXPANSION_PANEL_ANIMATION_TIMING","matExpansionAnimations","indicatorRotate","transform","bodyExpansion","height","visibility","MatExpansionPanelContent","_template","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","_uniqueSelectionDispatcher","_viewContainerRef","_document","_animationMode","defaultOptions","super","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","pipe","distinctUntilChanged","x","y","fromState","toState","event","hideToggle","value","_togglePosition","togglePosition","displayMode","_lazyContent","startWith","filter","_portal","take","ngOnDestroy","_body","focusedElement","activeElement","bodyElement","nativeElement","contains","ɵcmp","contentQueries","dirIndex","_t","first","viewQuery","hostAttrs","hostVars","hostBindings","_hasSpacing","ngContentSelectors","decls","vars","consts","template","$event","directives","styles","encapsulation","data","animation","changeDetection","String","MatExpansionPanelActionRow","panel","_element","_focusMonitor","_parentChangeSubscription","accordionHideToggleChange","merge","_containsFocus","focusVia","expandedHeight","collapsedHeight","toggle","isExpanded","_isExpanded","keyCode","preventDefault","_toggle","_handleHeaderKeydown","origin","options","focus","monitor","_handleHeaderFocus","stopMonitoring","_keydown","_getPanelId","_getHeaderHeight","_getTogglePosition","_showToggle","MatExpansionPanelDescription","MatExpansionPanelTitle","arguments","_ownHeaders","show","_headers","headers","reset","header","notifyOnChanges","_keyManager","withWrap","withHomeAndEnd","onKeydown","updateActiveItem","destroy","ɵMatAccordion_BaseFactory","descendants","MatExpansionModule","imports","MatFormField_ng_container_3_Template","MatFormField_div_4_Template","MatFormField_label_9_ng_container_2_Template","ctx_r10","_control","placeholder","MatFormField_label_9_ng_content_3_Template","MatFormField_label_9_span_4_Template","MatFormField_label_9_Template","_r14","updateOutlineGap","ctx_r4","empty","_shouldAlwaysFloat","color","appearance","_labelId","_hasLabel","hideRequiredMarker","required","MatFormField_div_10_Template","MatFormField_div_11_Template","ctx_r6","MatFormField_div_13_Template","ctx_r7","_subscriptAnimationState","MatFormField_div_14_div_1_Template","ctx_r16","_hintLabelId","hintLabel","MatFormField_div_14_Template","ctx_r8","nextUniqueId","MAT_ERROR","MatError","matFormFieldAnimations","transitionMessages","opacity","MatFormFieldControl","nextUniqueId$1","_MAT_HINT","MatHint","align","MatLabel","MatPlaceholder","MAT_PREFIX","MatPrefix","MAT_SUFFIX","MatSuffix","nextUniqueId$2","_MatFormFieldMixinBase","_elementRef","MAT_FORM_FIELD_DEFAULT_OPTIONS","MAT_FORM_FIELD","_labelOptions","_dir","_defaults","_platform","_ngZone","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_destroyed","_showAlwaysAnimate","_hintLabel","floatLabel","_getDefaultFloatLabelState","_animationsEnabled","_hideRequiredMarker","_appearance","oldValue","_processHints","_floatLabel","_explicitFormFieldControl","_controlNonStatic","_controlStatic","_hasFloatingLabel","_connectionContainerRef","_validateControlChild","control","controlType","classList","add","stateChanges","_validatePlaceholders","_syncDescribedByIds","ngControl","valueChanges","takeUntil","runOutsideAngular","onStable","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","change","requestAnimationFrame","detectChanges","prop","_placeholderChild","_labelChildNonStatic","_labelChildStatic","_canLabelFloat","shouldLabelFloat","_shouldLabelFloat","_hasPlaceholder","length","errorState","_label","fromEvent","_validateHints","ids","userAriaDescribedBy","push","split","_getDisplayedMessages","startHint","find","hint","endHint","map","error","setDescribedByIds","labelEl","children","textContent","trim","isBrowser","_isAttachedToDOM","startWidth","gapWidth","container","startEls","querySelectorAll","gapEls","containerRect","getBoundingClientRect","width","containerStart","_getStartEnd","labelChildren","labelStart","labelWidth","i","offsetWidth","Math","abs","outlineGapPadding","style","rect","right","left","element","getRootNode","rootNode","document","documentElement","underlineRef","_inputContainerRef","_hideControlPlaceholder","autofilled","focused","_shouldForward","onContainerClick","static","MatFormFieldModule","MatAutocomplete_ng_template_0_Template","formFieldId_r1","_classList","ariaLabel","_getPanelAriaLabelledby","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","source","option","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","providedIn","autoActiveFirstOption","defaults","platform","_activeOptionChanges","showPanel","_isOpen","displayWith","optionSelected","optionActivated","inertGroups","SAFARI","_autoActiveFirstOption","reduce","className","_setVisibilityClasses","index","toArray","_setVisibility","scrollTop","labelId","labelExpression","ariaLabelledby","_visibleClass","_hiddenClass","panelWidth","MatAutocomplete","ɵMatAutocomplete_BaseFactory","optionGroups","disableRipple","_MatAutocompleteOriginBase","elementRef","MatAutocompleteOrigin","ɵMatAutocompleteOrigin_BaseFactory","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","overlay","scrollStrategies","reposition","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_overlay","_zone","scrollStrategy","_formField","_viewportRuler","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","panelOpen","_onChange","_onTouched","position","autocompleteAttribute","_overlayAttached","optionSelections","defer","autocomplete","onSelectionChange","switchMap","_scrollStrategy","window","_getWindow","addEventListener","_positionStrategy","_setStrategyPositions","_overlayRef","updatePosition","removeEventListener","_destroyPanel","_attachOverlay","_resetLabel","hasAttached","detach","_closingActionsSubscription","tabOut","_getOutsideClickStream","detachments","of","activeItem","clickTarget","_isInsideShadowRoot","composedPath","target","formField","customOrigin","connectedTo","overlayElement","Promise","resolve","then","_setTriggerValue","fn","isDisabled","activeOption","_selectViaInteraction","_resetActiveItem","prevActiveItem","isArrowKey","_canOpen","openPanel","_scrollToOption","activeItemIndex","parseFloat","_previousValue","shouldAnimate","_animateAndLockLabel","firstStable","optionChanges","tap","reapplyLastPosition","delay","wasOpen","panelClosingActions","_setValueAndClose","closePanel","dispose","toDisplay","inputValue","_clearPreviousSelectedOption","_emitSelectEvent","skip","forEach","selected","deselect","_a","overlayRef","setOrigin","_getConnectedElement","updateSize","_getPanelWidth","getLabelId","create","_getOverlayConfig","keydownEvents","stopPropagation","attach","_subscribeToClosingActions","positionStrategy","_getOverlayPosition","direction","panelClass","overlayPanelClass","strategy","flexibleConnectedTo","withFlexibleDimensions","withPush","belowPositions","originX","originY","overlayX","overlayY","_aboveClass","abovePositions","positions","withPositions","getConnectedOverlayOrigin","_getHostWidth","setFirstItemActive","setActiveItem","readOnly","defaultView","labelCount","_setScrollTop","_getHostElement","newScrollPosition","offsetTop","offsetHeight","_getScrollTop","autocompleteDisabled","ɵMatAutocompleteTrigger_BaseFactory","_handleFocus","_handleInput","_handleKeydown","toString","MatAutocompleteModule","providers","MAT_CHIP_REMOVE","MAT_CHIP_AVATAR","MAT_CHIP_TRAILING_ICON","_MatChipMixinBase","MatChipAvatar","MatChipTrailingIcon","globalRippleOptions","animationMode","tabIndex","_hasFocus","chipListSelectable","_chipListMultiple","_chipListDisabled","_selected","_selectable","_removable","_onFocus","_onBlur","selectionChange","removed","_addHostClassName","_chipRippleTarget","createElement","appendChild","_chipRipple","setupTriggerEvents","rippleConfig","_animationsDisabled","parseInt","coercedValue","_dispatchSelectionChange","_value","selectable","basicChipAttrName","hasAttribute","tagName","toLowerCase","chip","_removeTriggerEvents","isUserInput","removable","remove","toggleSelected","run","avatar","trailingIcon","removeIcon","_handleClick","_blur","ariaSelected","MatChipRemove","_parentChip","nodeName","setAttribute","parentChip","MAT_CHIPS_DEFAULT_OPTIONS","_MatChipListMixinBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","MatChipListChange","_lastDestroyedChipIndex","_uid","_tabIndex","_userTabIndex","_multiple","_compareWith","o1","o2","_required","ariaOrientation","valueChange","valueAccessor","multiple","_selectionModel","_syncChipsState","_initializeSelection","writeValue","_chipInput","_placeholder","_hasFocusedChip","chips","withVerticalOrientation","withHorizontalOrientation","dir","_allowFocusEscape","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","updateErrorState","_dropSubscriptions","inputElement","_ariaDescribedby","join","_setSelectionByValue","_originatesFromChip","_focusInput","_isInputEmpty","setLastItemActive","newChipIndex","min","_clearSelection","Array","isArray","currentValue","_selectValue","_sortValues","correspondingChip","selectViaInteraction","select","clear","fallbackValue","valueToEmit","setTimeout","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","isSelected","_propagateChanges","chipFocusChanges","chipIndex","indexOf","_isValidIndex","chipBlurChanges","chipRemoveChanges","currentElement","parentElement","some","role","compareWith","errorStateMatcher","_defaultOptions","_addOnBlur","separatorKeyCodes","chipEnd","_inputElement","_chipList","registerInput","_emitChipEnd","addOnBlur","_isSeparatorKey","input","Set","has","_focus","_onInput","invalid","chipList","MatChipsModule","AfterWorkModule","HelloComponent","selector","MainComponent","route","router","navIndex","defaultSelect","param","snapshot","queryParams","isNaN","navigate","queryParamsHandling","tabChangeEvent","routes","path","component","MainRoutingModule","forChild","PortfolioItemComponent","project","displayType","projectTypes","MainScreenService","httpClient","get","service","currentNavIndex","panelOpenState","loadMore","cache","_listProjects$","BehaviorSubject","listProjects$","asObservable","_listLoadMoreProjects$","listLoadMoreProjects$","getListItem","getProjectList","res","resultHandler","list","item","chunk","splice","exist","slice","tab","MainScreenModule"],"mappings":"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","file":"6.d17e0aea3d226648d422.js","sourcesContent":["import { InjectionToken, Directive, Input, EventEmitter, Optional, Inject, SkipSelf, ChangeDetectorRef, Output, NgModule } from '@angular/core';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, Subscription } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Used to generate unique ID for each accordion. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/collections';\nlet nextId = 0;\n/**\n * Injection token that can be used to reference instances of `CdkAccordion`. It serves\n * as alternative token to the actual `CdkAccordion` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_ACCORDION = new InjectionToken('CdkAccordion');\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nclass CdkAccordion {\n    constructor() {\n        /** Emits when the state of the accordion changes */\n        this._stateChanges = new Subject();\n        /** Stream that emits true/false when openAll/closeAll is triggered. */\n        this._openCloseAllActions = new Subject();\n        /** A readonly id value to use for unique selection coordination. */\n        this.id = `cdk-accordion-${nextId++}`;\n        this._multi = false;\n    }\n    /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n    get multi() { return this._multi; }\n    set multi(multi) { this._multi = coerceBooleanProperty(multi); }\n    /** Opens all enabled accordion items in an accordion where multi is enabled. */\n    openAll() {\n        if (this._multi) {\n            this._openCloseAllActions.next(true);\n        }\n    }\n    /** Closes all enabled accordion items in an accordion where multi is enabled. */\n    closeAll() {\n        this._openCloseAllActions.next(false);\n    }\n    ngOnChanges(changes) {\n        this._stateChanges.next(changes);\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n        this._openCloseAllActions.complete();\n    }\n}\nCdkAccordion.ɵfac = function CdkAccordion_Factory(t) { return new (t || CdkAccordion)(); };\nCdkAccordion.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkAccordion, selectors: [[\"cdk-accordion\"], [\"\", \"cdkAccordion\", \"\"]], inputs: { multi: \"multi\" }, exportAs: [\"cdkAccordion\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_ACCORDION, useExisting: CdkAccordion }]), ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkAccordion.propDecorators = {\n    multi: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkAccordion, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-accordion, [cdkAccordion]',\n                exportAs: 'cdkAccordion',\n                providers: [{ provide: CDK_ACCORDION, useExisting: CdkAccordion }]\n            }]\n    }], function () { return []; }, { multi: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Used to generate unique ID for each accordion item. */\nlet nextId$1 = 0;\nconst ɵ0 = undefined;\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nclass CdkAccordionItem {\n    constructor(accordion, _changeDetectorRef, _expansionDispatcher) {\n        this.accordion = accordion;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._expansionDispatcher = _expansionDispatcher;\n        /** Subscription to openAll/closeAll events. */\n        this._openCloseAllSubscription = Subscription.EMPTY;\n        /** Event emitted every time the AccordionItem is closed. */\n        this.closed = new EventEmitter();\n        /** Event emitted every time the AccordionItem is opened. */\n        this.opened = new EventEmitter();\n        /** Event emitted when the AccordionItem is destroyed. */\n        this.destroyed = new EventEmitter();\n        /**\n         * Emits whenever the expanded state of the accordion changes.\n         * Primarily used to facilitate two-way binding.\n         * @docs-private\n         */\n        this.expandedChange = new EventEmitter();\n        /** The unique AccordionItem id. */\n        this.id = `cdk-accordion-child-${nextId$1++}`;\n        this._expanded = false;\n        this._disabled = false;\n        /** Unregister function for _expansionDispatcher. */\n        this._removeUniqueSelectionListener = () => { };\n        this._removeUniqueSelectionListener =\n            _expansionDispatcher.listen((id, accordionId) => {\n                if (this.accordion && !this.accordion.multi &&\n                    this.accordion.id === accordionId && this.id !== id) {\n                    this.expanded = false;\n                }\n            });\n        // When an accordion item is hosted in an accordion, subscribe to open/close events.\n        if (this.accordion) {\n            this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n        }\n    }\n    /** Whether the AccordionItem is expanded. */\n    get expanded() { return this._expanded; }\n    set expanded(expanded) {\n        expanded = coerceBooleanProperty(expanded);\n        // Only emit events and update the internal value if the value changes.\n        if (this._expanded !== expanded) {\n            this._expanded = expanded;\n            this.expandedChange.emit(expanded);\n            if (expanded) {\n                this.opened.emit();\n                /**\n                 * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n                 * the name value is the id of the accordion.\n                 */\n                const accordionId = this.accordion ? this.accordion.id : this.id;\n                this._expansionDispatcher.notify(this.id, accordionId);\n            }\n            else {\n                this.closed.emit();\n            }\n            // Ensures that the animation will run when the value is set outside of an `@Input`.\n            // This includes cases like the open, close and toggle methods.\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Whether the AccordionItem is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(disabled) { this._disabled = coerceBooleanProperty(disabled); }\n    /** Emits an event for the accordion item being destroyed. */\n    ngOnDestroy() {\n        this.opened.complete();\n        this.closed.complete();\n        this.destroyed.emit();\n        this.destroyed.complete();\n        this._removeUniqueSelectionListener();\n        this._openCloseAllSubscription.unsubscribe();\n    }\n    /** Toggles the expanded state of the accordion item. */\n    toggle() {\n        if (!this.disabled) {\n            this.expanded = !this.expanded;\n        }\n    }\n    /** Sets the expanded state of the accordion item to false. */\n    close() {\n        if (!this.disabled) {\n            this.expanded = false;\n        }\n    }\n    /** Sets the expanded state of the accordion item to true. */\n    open() {\n        if (!this.disabled) {\n            this.expanded = true;\n        }\n    }\n    _subscribeToOpenCloseAllActions() {\n        return this.accordion._openCloseAllActions.subscribe(expanded => {\n            // Only change expanded state if item is enabled\n            if (!this.disabled) {\n                this.expanded = expanded;\n            }\n        });\n    }\n}\nCdkAccordionItem.ɵfac = function CdkAccordionItem_Factory(t) { return new (t || CdkAccordionItem)(ɵngcc0.ɵɵdirectiveInject(CDK_ACCORDION, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UniqueSelectionDispatcher)); };\nCdkAccordionItem.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkAccordionItem, selectors: [[\"cdk-accordion-item\"], [\"\", \"cdkAccordionItem\", \"\"]], inputs: { expanded: \"expanded\", disabled: \"disabled\" }, outputs: { closed: \"closed\", opened: \"opened\", destroyed: \"destroyed\", expandedChange: \"expandedChange\" }, exportAs: [\"cdkAccordionItem\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n            // registering to the same accordion.\n            { provide: CDK_ACCORDION, useValue: ɵ0 },\n        ])] });\nCdkAccordionItem.ctorParameters = () => [\n    { type: CdkAccordion, decorators: [{ type: Optional }, { type: Inject, args: [CDK_ACCORDION,] }, { type: SkipSelf }] },\n    { type: ChangeDetectorRef },\n    { type: UniqueSelectionDispatcher }\n];\nCdkAccordionItem.propDecorators = {\n    closed: [{ type: Output }],\n    opened: [{ type: Output }],\n    destroyed: [{ type: Output }],\n    expandedChange: [{ type: Output }],\n    expanded: [{ type: Input }],\n    disabled: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkAccordionItem, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-accordion-item, [cdkAccordionItem]',\n                exportAs: 'cdkAccordionItem',\n                providers: [\n                    // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n                    // registering to the same accordion.\n                    { provide: CDK_ACCORDION, useValue: ɵ0 },\n                ]\n            }]\n    }], function () { return [{ type: CdkAccordion, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_ACCORDION]\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.UniqueSelectionDispatcher }]; }, { closed: [{\n            type: Output\n        }], opened: [{\n            type: Output\n        }], destroyed: [{\n            type: Output\n        }], expandedChange: [{\n            type: Output\n        }], expanded: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass CdkAccordionModule {\n}\nCdkAccordionModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CdkAccordionModule });\nCdkAccordionModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CdkAccordionModule_Factory(t) { return new (t || CdkAccordionModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkAccordionModule, { declarations: [CdkAccordion, CdkAccordionItem], exports: [CdkAccordion, CdkAccordionItem] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkAccordionModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkAccordion, CdkAccordionItem],\n                declarations: [CdkAccordion, CdkAccordionItem]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkAccordion, CdkAccordionItem, CdkAccordionModule, CDK_ACCORDION as ɵangular_material_src_cdk_accordion_accordion_a };\n\n//# sourceMappingURL=accordion.js.map","import { CdkAccordionItem, CdkAccordion, CdkAccordionModule } from '@angular/cdk/accordion';\nimport { TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, TemplateRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, SkipSelf, Inject, ChangeDetectorRef, ViewContainerRef, Input, Output, ContentChild, ViewChild, Host, ElementRef, QueryList, ContentChildren, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { FocusMonitor, FocusKeyManager } from '@angular/cdk/a11y';\nimport { distinctUntilChanged, startWith, filter, take } from 'rxjs/operators';\nimport { ENTER, hasModifierKey, SPACE } from '@angular/cdk/keycodes';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, Subscription, EMPTY, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/collections';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/a11y';\nimport * as ɵngcc4 from '@angular/common';\n\nconst _c0 = [\"body\"];\nfunction MatExpansionPanel_ng_template_5_Template(rf, ctx) { }\nconst _c1 = [[[\"mat-expansion-panel-header\"]], \"*\", [[\"mat-action-row\"]]];\nconst _c2 = [\"mat-expansion-panel-header\", \"*\", \"mat-action-row\"];\nfunction MatExpansionPanelHeader_span_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 2);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@indicatorRotate\", ctx_r0._getExpandedState());\n} }\nconst _c3 = [[[\"mat-panel-title\"]], [[\"mat-panel-description\"]], \"*\"];\nconst _c4 = [\"mat-panel-title\", \"mat-panel-description\", \"*\"];\nconst MAT_ACCORDION = new InjectionToken('MAT_ACCORDION');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time and timing curve for expansion panel animations. */\n// Note: Keep this in sync with the Sass variable for the panel header animation.\nconst EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nconst matExpansionAnimations = {\n    /** Animation that rotates the indicator arrow. */\n    indicatorRotate: trigger('indicatorRotate', [\n        state('collapsed, void', style({ transform: 'rotate(0deg)' })),\n        state('expanded', style({ transform: 'rotate(180deg)' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    /** Animation that expands and collapses the panel content. */\n    bodyExpansion: trigger('bodyExpansion', [\n        state('collapsed, void', style({ height: '0px', visibility: 'hidden' })),\n        state('expanded', style({ height: '*', visibility: 'visible' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\nclass MatExpansionPanelContent {\n    constructor(_template) {\n        this._template = _template;\n    }\n}\nMatExpansionPanelContent.ɵfac = function MatExpansionPanelContent_Factory(t) { return new (t || MatExpansionPanelContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nMatExpansionPanelContent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatExpansionPanelContent, selectors: [[\"ng-template\", \"matExpansionPanelContent\", \"\"]] });\nMatExpansionPanelContent.ctorParameters = () => [\n    { type: TemplateRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionPanelContent, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[matExpansionPanelContent]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nconst MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = new InjectionToken('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\nconst ɵ0 = undefined;\n/**\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\nclass MatExpansionPanel extends CdkAccordionItem {\n    constructor(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, _document, _animationMode, defaultOptions) {\n        super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n        this._viewContainerRef = _viewContainerRef;\n        this._animationMode = _animationMode;\n        this._hideToggle = false;\n        /** An event emitted after the body's expansion animation happens. */\n        this.afterExpand = new EventEmitter();\n        /** An event emitted after the body's collapse animation happens. */\n        this.afterCollapse = new EventEmitter();\n        /** Stream that emits for changes in `@Input` properties. */\n        this._inputChanges = new Subject();\n        /** ID for the associated header element. Used for a11y labelling. */\n        this._headerId = `mat-expansion-panel-header-${uniqueId++}`;\n        /** Stream of body animation done events. */\n        this._bodyAnimationDone = new Subject();\n        this.accordion = accordion;\n        this._document = _document;\n        // We need a Subject with distinctUntilChanged, because the `done` event\n        // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n        this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n            return x.fromState === y.fromState && x.toState === y.toState;\n        })).subscribe(event => {\n            if (event.fromState !== 'void') {\n                if (event.toState === 'expanded') {\n                    this.afterExpand.emit();\n                }\n                else if (event.toState === 'collapsed') {\n                    this.afterCollapse.emit();\n                }\n            }\n        });\n        if (defaultOptions) {\n            this.hideToggle = defaultOptions.hideToggle;\n        }\n    }\n    /** Whether the toggle indicator should be hidden. */\n    get hideToggle() {\n        return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n    }\n    set hideToggle(value) {\n        this._hideToggle = coerceBooleanProperty(value);\n    }\n    /** The position of the expansion indicator. */\n    get togglePosition() {\n        return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n    }\n    set togglePosition(value) {\n        this._togglePosition = value;\n    }\n    /** Determines whether the expansion panel should have spacing between it and its siblings. */\n    _hasSpacing() {\n        if (this.accordion) {\n            return this.expanded && this.accordion.displayMode === 'default';\n        }\n        return false;\n    }\n    /** Gets the expanded state string. */\n    _getExpandedState() {\n        return this.expanded ? 'expanded' : 'collapsed';\n    }\n    /** Toggles the expanded state of the expansion panel. */\n    toggle() {\n        this.expanded = !this.expanded;\n    }\n    /** Sets the expanded state of the expansion panel to false. */\n    close() {\n        this.expanded = false;\n    }\n    /** Sets the expanded state of the expansion panel to true. */\n    open() {\n        this.expanded = true;\n    }\n    ngAfterContentInit() {\n        if (this._lazyContent) {\n            // Render the content as soon as the panel becomes open.\n            this.opened.pipe(startWith(null), filter(() => this.expanded && !this._portal), take(1)).subscribe(() => {\n                this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n            });\n        }\n    }\n    ngOnChanges(changes) {\n        this._inputChanges.next(changes);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._bodyAnimationDone.complete();\n        this._inputChanges.complete();\n    }\n    /** Checks whether the expansion panel's content contains the currently-focused element. */\n    _containsFocus() {\n        if (this._body) {\n            const focusedElement = this._document.activeElement;\n            const bodyElement = this._body.nativeElement;\n            return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n        }\n        return false;\n    }\n}\nMatExpansionPanel.ɵfac = function MatExpansionPanel_Factory(t) { return new (t || MatExpansionPanel)(ɵngcc0.ɵɵdirectiveInject(MAT_ACCORDION, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, 8)); };\nMatExpansionPanel.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatExpansionPanel, selectors: [[\"mat-expansion-panel\"]], contentQueries: function MatExpansionPanel_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatExpansionPanelContent, true);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lazyContent = _t.first);\n    } }, viewQuery: function MatExpansionPanel_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._body = _t.first);\n    } }, hostAttrs: [1, \"mat-expansion-panel\"], hostVars: 6, hostBindings: function MatExpansionPanel_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-expanded\", ctx.expanded)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\")(\"mat-expansion-panel-spacing\", ctx._hasSpacing());\n    } }, inputs: { disabled: \"disabled\", expanded: \"expanded\", hideToggle: \"hideToggle\", togglePosition: \"togglePosition\" }, outputs: { opened: \"opened\", closed: \"closed\", expandedChange: \"expandedChange\", afterExpand: \"afterExpand\", afterCollapse: \"afterCollapse\" }, exportAs: [\"matExpansionPanel\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n            // to the same accordion.\n            { provide: MAT_ACCORDION, useValue: ɵ0 },\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c2, decls: 7, vars: 4, consts: [[\"role\", \"region\", 1, \"mat-expansion-panel-content\", 3, \"id\"], [\"body\", \"\"], [1, \"mat-expansion-panel-body\"], [3, \"cdkPortalOutlet\"]], template: function MatExpansionPanel_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"@bodyExpansion.done\", function MatExpansionPanel_Template_div_animation_bodyExpansion_done_1_listener($event) { return ctx._bodyAnimationDone.next($event); });\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵprojection(4, 1);\n        ɵngcc0.ɵɵtemplate(5, MatExpansionPanel_ng_template_5_Template, 0, 0, \"ng-template\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(6, 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"@bodyExpansion\", ctx._getExpandedState())(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"aria-labelledby\", ctx._headerId);\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵproperty(\"cdkPortalOutlet\", ctx._portal);\n    } }, directives: [ɵngcc2.CdkPortalOutlet], styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button-base,.mat-action-row button.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button-base,[dir=rtl] .mat-action-row button.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"], encapsulation: 2, data: { animation: [matExpansionAnimations.bodyExpansion] }, changeDetection: 0 });\nMatExpansionPanel.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [MAT_ACCORDION,] }] },\n    { type: ChangeDetectorRef },\n    { type: UniqueSelectionDispatcher },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,] }, { type: Optional }] }\n];\nMatExpansionPanel.propDecorators = {\n    hideToggle: [{ type: Input }],\n    togglePosition: [{ type: Input }],\n    afterExpand: [{ type: Output }],\n    afterCollapse: [{ type: Output }],\n    _lazyContent: [{ type: ContentChild, args: [MatExpansionPanelContent,] }],\n    _body: [{ type: ViewChild, args: ['body',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionPanel, [{\n        type: Component,\n        args: [{\n                selector: 'mat-expansion-panel',\n                exportAs: 'matExpansionPanel',\n                template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content>\\n<div class=\\\"mat-expansion-panel-content\\\"\\n     role=\\\"region\\\"\\n     [@bodyExpansion]=\\\"_getExpandedState()\\\"\\n     (@bodyExpansion.done)=\\\"_bodyAnimationDone.next($event)\\\"\\n     [attr.aria-labelledby]=\\\"_headerId\\\"\\n     [id]=\\\"id\\\"\\n     #body>\\n  <div class=\\\"mat-expansion-panel-body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n  </div>\\n  <ng-content select=\\\"mat-action-row\\\"></ng-content>\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disabled', 'expanded'],\n                outputs: ['opened', 'closed', 'expandedChange'],\n                animations: [matExpansionAnimations.bodyExpansion],\n                providers: [\n                    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n                    // to the same accordion.\n                    { provide: MAT_ACCORDION, useValue: ɵ0 },\n                ],\n                host: {\n                    'class': 'mat-expansion-panel',\n                    '[class.mat-expanded]': 'expanded',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '[class.mat-expansion-panel-spacing]': '_hasSpacing()'\n                },\n                styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button-base,.mat-action-row button.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button-base,[dir=rtl] .mat-action-row button.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }, {\n                type: Inject,\n                args: [MAT_ACCORDION]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.UniqueSelectionDispatcher }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n            }, {\n                type: Optional\n            }] }]; }, { afterExpand: [{\n            type: Output\n        }], afterCollapse: [{\n            type: Output\n        }], hideToggle: [{\n            type: Input\n        }], togglePosition: [{\n            type: Input\n        }], _lazyContent: [{\n            type: ContentChild,\n            args: [MatExpansionPanelContent]\n        }], _body: [{\n            type: ViewChild,\n            args: ['body']\n        }] }); })();\n/**\n * Actions of a `<mat-expansion-panel>`.\n */\nclass MatExpansionPanelActionRow {\n}\nMatExpansionPanelActionRow.ɵfac = function MatExpansionPanelActionRow_Factory(t) { return new (t || MatExpansionPanelActionRow)(); };\nMatExpansionPanelActionRow.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatExpansionPanelActionRow, selectors: [[\"mat-action-row\"]], hostAttrs: [1, \"mat-action-row\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionPanelActionRow, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-action-row',\n                host: {\n                    class: 'mat-action-row'\n                }\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Header element of a `<mat-expansion-panel>`.\n */\nclass MatExpansionPanelHeader {\n    constructor(panel, _element, _focusMonitor, _changeDetectorRef, defaultOptions, _animationMode) {\n        this.panel = panel;\n        this._element = _element;\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._animationMode = _animationMode;\n        this._parentChangeSubscription = Subscription.EMPTY;\n        const accordionHideToggleChange = panel.accordion ?\n            panel.accordion._stateChanges.pipe(filter(changes => !!(changes['hideToggle'] || changes['togglePosition']))) :\n            EMPTY;\n        // Since the toggle state depends on an @Input on the panel, we\n        // need to subscribe and trigger change detection manually.\n        this._parentChangeSubscription =\n            merge(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(filter(changes => {\n                return !!(changes['hideToggle'] ||\n                    changes['disabled'] ||\n                    changes['togglePosition']);\n            })))\n                .subscribe(() => this._changeDetectorRef.markForCheck());\n        // Avoids focus being lost if the panel contained the focused element and was closed.\n        panel.closed\n            .pipe(filter(() => panel._containsFocus()))\n            .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n        if (defaultOptions) {\n            this.expandedHeight = defaultOptions.expandedHeight;\n            this.collapsedHeight = defaultOptions.collapsedHeight;\n        }\n    }\n    /**\n     * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n     * @docs-private\n     */\n    get disabled() {\n        return this.panel.disabled;\n    }\n    /** Toggles the expanded state of the panel. */\n    _toggle() {\n        if (!this.disabled) {\n            this.panel.toggle();\n        }\n    }\n    /** Gets whether the panel is expanded. */\n    _isExpanded() {\n        return this.panel.expanded;\n    }\n    /** Gets the expanded state string of the panel. */\n    _getExpandedState() {\n        return this.panel._getExpandedState();\n    }\n    /** Gets the panel id. */\n    _getPanelId() {\n        return this.panel.id;\n    }\n    /** Gets the toggle position for the header. */\n    _getTogglePosition() {\n        return this.panel.togglePosition;\n    }\n    /** Gets whether the expand indicator should be shown. */\n    _showToggle() {\n        return !this.panel.hideToggle && !this.panel.disabled;\n    }\n    /**\n     * Gets the current height of the header. Null if no custom height has been\n     * specified, and if the default height from the stylesheet should be used.\n     */\n    _getHeaderHeight() {\n        const isExpanded = this._isExpanded();\n        if (isExpanded && this.expandedHeight) {\n            return this.expandedHeight;\n        }\n        else if (!isExpanded && this.collapsedHeight) {\n            return this.collapsedHeight;\n        }\n        return null;\n    }\n    /** Handle keydown event calling to toggle() if appropriate. */\n    _keydown(event) {\n        switch (event.keyCode) {\n            // Toggle for space and enter keys.\n            case SPACE:\n            case ENTER:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this._toggle();\n                }\n                break;\n            default:\n                if (this.panel.accordion) {\n                    this.panel.accordion._handleHeaderKeydown(event);\n                }\n                return;\n        }\n    }\n    /**\n     * Focuses the panel header. Implemented as a part of `FocusableOption`.\n     * @param origin Origin of the action that triggered the focus.\n     * @docs-private\n     */\n    focus(origin, options) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        else {\n            this._element.nativeElement.focus(options);\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._element).subscribe(origin => {\n            if (origin && this.panel.accordion) {\n                this.panel.accordion._handleHeaderFocus(this);\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._parentChangeSubscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this._element);\n    }\n}\nMatExpansionPanelHeader.ɵfac = function MatExpansionPanelHeader_Factory(t) { return new (t || MatExpansionPanelHeader)(ɵngcc0.ɵɵdirectiveInject(MatExpansionPanel, 1), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatExpansionPanelHeader.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatExpansionPanelHeader, selectors: [[\"mat-expansion-panel-header\"]], hostAttrs: [\"role\", \"button\", 1, \"mat-expansion-panel-header\", \"mat-focus-indicator\"], hostVars: 15, hostBindings: function MatExpansionPanelHeader_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatExpansionPanelHeader_click_HostBindingHandler() { return ctx._toggle(); })(\"keydown\", function MatExpansionPanelHeader_keydown_HostBindingHandler($event) { return ctx._keydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.panel._headerId)(\"tabindex\", ctx.disabled ? -1 : 0)(\"aria-controls\", ctx._getPanelId())(\"aria-expanded\", ctx._isExpanded())(\"aria-disabled\", ctx.panel.disabled);\n        ɵngcc0.ɵɵstyleProp(\"height\", ctx._getHeaderHeight());\n        ɵngcc0.ɵɵclassProp(\"mat-expanded\", ctx._isExpanded())(\"mat-expansion-toggle-indicator-after\", ctx._getTogglePosition() === \"after\")(\"mat-expansion-toggle-indicator-before\", ctx._getTogglePosition() === \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { expandedHeight: \"expandedHeight\", collapsedHeight: \"collapsedHeight\" }, ngContentSelectors: _c4, decls: 5, vars: 1, consts: [[1, \"mat-content\"], [\"class\", \"mat-expansion-indicator\", 4, \"ngIf\"], [1, \"mat-expansion-indicator\"]], template: function MatExpansionPanelHeader_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c3);\n        ɵngcc0.ɵɵelementStart(0, \"span\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵprojection(3, 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(4, MatExpansionPanelHeader_span_4_Template, 1, 1, \"span\", 1);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._showToggle());\n    } }, directives: [ɵngcc4.NgIf], styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-keyboard-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-program-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:hover:not([aria-disabled=true])::before{top:0;left:0;right:0;bottom:0;position:absolute;box-sizing:border-box;pointer-events:none;border:3px solid;border-radius:4px;content:\\\"\\\"}\\n\"], encapsulation: 2, data: { animation: [\n            matExpansionAnimations.indicatorRotate,\n        ] }, changeDetection: 0 });\nMatExpansionPanelHeader.ctorParameters = () => [\n    { type: MatExpansionPanel, decorators: [{ type: Host }] },\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,] }, { type: Optional }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatExpansionPanelHeader.propDecorators = {\n    expandedHeight: [{ type: Input }],\n    collapsedHeight: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionPanelHeader, [{\n        type: Component,\n        args: [{\n                selector: 'mat-expansion-panel-header',\n                template: \"<span class=\\\"mat-content\\\">\\n  <ng-content select=\\\"mat-panel-title\\\"></ng-content>\\n  <ng-content select=\\\"mat-panel-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n<span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\"\\n      class=\\\"mat-expansion-indicator\\\"></span>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                animations: [\n                    matExpansionAnimations.indicatorRotate,\n                ],\n                host: {\n                    'class': 'mat-expansion-panel-header mat-focus-indicator',\n                    'role': 'button',\n                    '[attr.id]': 'panel._headerId',\n                    '[attr.tabindex]': 'disabled ? -1 : 0',\n                    '[attr.aria-controls]': '_getPanelId()',\n                    '[attr.aria-expanded]': '_isExpanded()',\n                    '[attr.aria-disabled]': 'panel.disabled',\n                    '[class.mat-expanded]': '_isExpanded()',\n                    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n                    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '[style.height]': '_getHeaderHeight()',\n                    '(click)': '_toggle()',\n                    '(keydown)': '_keydown($event)'\n                },\n                styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-keyboard-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-program-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:hover:not([aria-disabled=true])::before{top:0;left:0;right:0;bottom:0;position:absolute;box-sizing:border-box;pointer-events:none;border:3px solid;border-radius:4px;content:\\\"\\\"}\\n\"]\n            }]\n    }], function () { return [{ type: MatExpansionPanel, decorators: [{\n                type: Host\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc3.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n            }, {\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { expandedHeight: [{\n            type: Input\n        }], collapsedHeight: [{\n            type: Input\n        }] }); })();\n/**\n * Description element of a `<mat-expansion-panel-header>`.\n */\nclass MatExpansionPanelDescription {\n}\nMatExpansionPanelDescription.ɵfac = function MatExpansionPanelDescription_Factory(t) { return new (t || MatExpansionPanelDescription)(); };\nMatExpansionPanelDescription.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatExpansionPanelDescription, selectors: [[\"mat-panel-description\"]], hostAttrs: [1, \"mat-expansion-panel-header-description\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionPanelDescription, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-panel-description',\n                host: {\n                    class: 'mat-expansion-panel-header-description'\n                }\n            }]\n    }], null, null); })();\n/**\n * Title element of a `<mat-expansion-panel-header>`.\n */\nclass MatExpansionPanelTitle {\n}\nMatExpansionPanelTitle.ɵfac = function MatExpansionPanelTitle_Factory(t) { return new (t || MatExpansionPanelTitle)(); };\nMatExpansionPanelTitle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatExpansionPanelTitle, selectors: [[\"mat-panel-title\"]], hostAttrs: [1, \"mat-expansion-panel-header-title\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionPanelTitle, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-panel-title',\n                host: {\n                    class: 'mat-expansion-panel-header-title'\n                }\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive for a Material Design Accordion.\n */\nclass MatAccordion extends CdkAccordion {\n    constructor() {\n        super(...arguments);\n        /** Headers belonging to this accordion. */\n        this._ownHeaders = new QueryList();\n        this._hideToggle = false;\n        /**\n         * Display mode used for all expansion panels in the accordion. Currently two display\n         * modes exist:\n         *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n         *     panel at a different elevation from the rest of the accordion.\n         *  flat - no spacing is placed around expanded panels, showing all panels at the same\n         *     elevation.\n         */\n        this.displayMode = 'default';\n        /** The position of the expansion indicator. */\n        this.togglePosition = 'after';\n    }\n    /** Whether the expansion indicator should be hidden. */\n    get hideToggle() { return this._hideToggle; }\n    set hideToggle(show) { this._hideToggle = coerceBooleanProperty(show); }\n    ngAfterContentInit() {\n        this._headers.changes\n            .pipe(startWith(this._headers))\n            .subscribe((headers) => {\n            this._ownHeaders.reset(headers.filter(header => header.panel.accordion === this));\n            this._ownHeaders.notifyOnChanges();\n        });\n        this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap().withHomeAndEnd();\n    }\n    /** Handles keyboard events coming in from the panel headers. */\n    _handleHeaderKeydown(event) {\n        this._keyManager.onKeydown(event);\n    }\n    _handleHeaderFocus(header) {\n        this._keyManager.updateActiveItem(header);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._ownHeaders.destroy();\n    }\n}\nMatAccordion.ɵfac = function MatAccordion_Factory(t) { return ɵMatAccordion_BaseFactory(t || MatAccordion); };\nMatAccordion.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatAccordion, selectors: [[\"mat-accordion\"]], contentQueries: function MatAccordion_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatExpansionPanelHeader, true);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headers = _t);\n    } }, hostAttrs: [1, \"mat-accordion\"], hostVars: 2, hostBindings: function MatAccordion_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-accordion-multi\", ctx.multi);\n    } }, inputs: { multi: \"multi\", displayMode: \"displayMode\", togglePosition: \"togglePosition\", hideToggle: \"hideToggle\" }, exportAs: [\"matAccordion\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: MAT_ACCORDION,\n                useExisting: MatAccordion\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatAccordion.propDecorators = {\n    _headers: [{ type: ContentChildren, args: [MatExpansionPanelHeader, { descendants: true },] }],\n    hideToggle: [{ type: Input }],\n    displayMode: [{ type: Input }],\n    togglePosition: [{ type: Input }]\n};\nconst ɵMatAccordion_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatAccordion);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAccordion, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-accordion',\n                exportAs: 'matAccordion',\n                inputs: ['multi'],\n                providers: [{\n                        provide: MAT_ACCORDION,\n                        useExisting: MatAccordion\n                    }],\n                host: {\n                    class: 'mat-accordion',\n                    // Class binding which is only used by the test harness as there is no other\n                    // way for the harness to detect if multiple panel support is enabled.\n                    '[class.mat-accordion-multi]': 'this.multi'\n                }\n            }]\n    }], null, { displayMode: [{\n            type: Input\n        }], togglePosition: [{\n            type: Input\n        }], hideToggle: [{\n            type: Input\n        }], _headers: [{\n            type: ContentChildren,\n            args: [MatExpansionPanelHeader, { descendants: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatExpansionModule {\n}\nMatExpansionModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatExpansionModule });\nMatExpansionModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatExpansionModule_Factory(t) { return new (t || MatExpansionModule)(); }, imports: [[CommonModule, MatCommonModule, CdkAccordionModule, PortalModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatExpansionModule, { declarations: function () { return [MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatExpansionPanelContent]; }, imports: function () { return [CommonModule, MatCommonModule, CdkAccordionModule, PortalModule]; }, exports: function () { return [MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatExpansionPanelContent]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, MatCommonModule, CdkAccordionModule, PortalModule],\n                exports: [\n                    MatAccordion,\n                    MatExpansionPanel,\n                    MatExpansionPanelActionRow,\n                    MatExpansionPanelHeader,\n                    MatExpansionPanelTitle,\n                    MatExpansionPanelDescription,\n                    MatExpansionPanelContent,\n                ],\n                declarations: [\n                    MatAccordion,\n                    MatExpansionPanel,\n                    MatExpansionPanelActionRow,\n                    MatExpansionPanelHeader,\n                    MatExpansionPanelTitle,\n                    MatExpansionPanelDescription,\n                    MatExpansionPanelContent,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { EXPANSION_PANEL_ANIMATION_TIMING, MAT_ACCORDION, MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, MatAccordion, MatExpansionModule, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelContent, MatExpansionPanelDescription, MatExpansionPanelHeader, MatExpansionPanelTitle, matExpansionAnimations, ɵ0 };\n\n//# sourceMappingURL=expansion.js.map","import { ObserversModule } from '@angular/cdk/observers';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Inject, Optional, NgZone, ViewChild, ContentChild, ContentChildren, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, merge, fromEvent } from 'rxjs';\nimport { startWith, takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { Platform } from '@angular/cdk/platform';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/common';\nimport * as ɵngcc4 from '@angular/cdk/observers';\n\nconst _c0 = [\"underline\"];\nconst _c1 = [\"connectionContainer\"];\nconst _c2 = [\"inputContainer\"];\nconst _c3 = [\"label\"];\nfunction MatFormField_ng_container_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 14);\n    ɵngcc0.ɵɵelement(2, \"div\", 15);\n    ɵngcc0.ɵɵelement(3, \"div\", 16);\n    ɵngcc0.ɵɵelement(4, \"div\", 17);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(5, \"div\", 18);\n    ɵngcc0.ɵɵelement(6, \"div\", 15);\n    ɵngcc0.ɵɵelement(7, \"div\", 16);\n    ɵngcc0.ɵɵelement(8, \"div\", 17);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n} }\nfunction MatFormField_div_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 19);\n    ɵngcc0.ɵɵprojection(1, 1);\n    ɵngcc0.ɵɵelementEnd();\n} }\nfunction MatFormField_label_9_ng_container_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵprojection(1, 2);\n    ɵngcc0.ɵɵelementStart(2, \"span\");\n    ɵngcc0.ɵɵtext(3);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r10._control.placeholder);\n} }\nfunction MatFormField_label_9_ng_content_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 3, [\"*ngSwitchCase\", \"true\"]);\n} }\nfunction MatFormField_label_9_span_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 23);\n    ɵngcc0.ɵɵtext(1, \" *\");\n    ɵngcc0.ɵɵelementEnd();\n} }\nfunction MatFormField_label_9_Template(rf, ctx) { if (rf & 1) {\n    const _r14 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"label\", 20, 21);\n    ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatFormField_label_9_Template_label_cdkObserveContent_0_listener() { ɵngcc0.ɵɵrestoreView(_r14); const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.updateOutlineGap(); });\n    ɵngcc0.ɵɵtemplate(2, MatFormField_label_9_ng_container_2_Template, 4, 1, \"ng-container\", 12);\n    ɵngcc0.ɵɵtemplate(3, MatFormField_label_9_ng_content_3_Template, 1, 0, \"ng-content\", 12);\n    ɵngcc0.ɵɵtemplate(4, MatFormField_label_9_span_4_Template, 2, 0, \"span\", 22);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"mat-empty\", ctx_r4._control.empty && !ctx_r4._shouldAlwaysFloat())(\"mat-form-field-empty\", ctx_r4._control.empty && !ctx_r4._shouldAlwaysFloat())(\"mat-accent\", ctx_r4.color == \"accent\")(\"mat-warn\", ctx_r4.color == \"warn\");\n    ɵngcc0.ɵɵproperty(\"cdkObserveContentDisabled\", ctx_r4.appearance != \"outline\")(\"id\", ctx_r4._labelId)(\"ngSwitch\", ctx_r4._hasLabel());\n    ɵngcc0.ɵɵattribute(\"for\", ctx_r4._control.id)(\"aria-owns\", ctx_r4._control.id);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r4.hideRequiredMarker && ctx_r4._control.required && !ctx_r4._control.disabled);\n} }\nfunction MatFormField_div_10_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 24);\n    ɵngcc0.ɵɵprojection(1, 4);\n    ɵngcc0.ɵɵelementEnd();\n} }\nfunction MatFormField_div_11_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 25, 26);\n    ɵngcc0.ɵɵelement(2, \"span\", 27);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r6 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵclassProp(\"mat-accent\", ctx_r6.color == \"accent\")(\"mat-warn\", ctx_r6.color == \"warn\");\n} }\nfunction MatFormField_div_13_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵprojection(1, 5);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r7 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@transitionMessages\", ctx_r7._subscriptAnimationState);\n} }\nfunction MatFormField_div_14_div_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 31);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r16 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r16._hintLabelId);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r16.hintLabel);\n} }\nfunction MatFormField_div_14_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 28);\n    ɵngcc0.ɵɵtemplate(1, MatFormField_div_14_div_1_Template, 2, 2, \"div\", 29);\n    ɵngcc0.ɵɵprojection(2, 6);\n    ɵngcc0.ɵɵelement(3, \"div\", 30);\n    ɵngcc0.ɵɵprojection(4, 7);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r8 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@transitionMessages\", ctx_r8._subscriptAnimationState);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r8.hintLabel);\n} }\nconst _c4 = [\"*\", [[\"\", \"matPrefix\", \"\"]], [[\"mat-placeholder\"]], [[\"mat-label\"]], [[\"\", \"matSuffix\", \"\"]], [[\"mat-error\"]], [[\"mat-hint\", 3, \"align\", \"end\"]], [[\"mat-hint\", \"align\", \"end\"]]];\nconst _c5 = [\"*\", \"[matPrefix]\", \"mat-placeholder\", \"mat-label\", \"[matSuffix]\", \"mat-error\", \"mat-hint:not([align='end'])\", \"mat-hint[align='end']\"];\nlet nextUniqueId = 0;\n/**\n * Injection token that can be used to reference instances of `MatError`. It serves as\n * alternative token to the actual `MatError` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_ERROR = new InjectionToken('MatError');\n/** Single error message to be shown underneath the form field. */\nclass MatError {\n    constructor() {\n        this.id = `mat-error-${nextUniqueId++}`;\n    }\n}\nMatError.ɵfac = function MatError_Factory(t) { return new (t || MatError)(); };\nMatError.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatError, selectors: [[\"mat-error\"]], hostAttrs: [\"role\", \"alert\", 1, \"mat-error\"], hostVars: 1, hostBindings: function MatError_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id);\n    } }, inputs: { id: \"id\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_ERROR, useExisting: MatError }])] });\nMatError.propDecorators = {\n    id: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatError, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-error',\n                host: {\n                    'class': 'mat-error',\n                    'role': 'alert',\n                    '[attr.id]': 'id'\n                },\n                providers: [{ provide: MAT_ERROR, useExisting: MatError }]\n            }]\n    }], function () { return []; }, { id: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nconst matFormFieldAnimations = {\n    /** Animation that transitions the form field's error and hint messages. */\n    transitionMessages: trigger('transitionMessages', [\n        // TODO(mmalerba): Use angular animations for label animation as well.\n        state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n        transition('void => enter', [\n            style({ opacity: 0, transform: 'translateY(-5px)' }),\n            animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n        ]),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** An interface which allows a control to work inside of a `MatFormField`. */\nclass MatFormFieldControl {\n}\nMatFormFieldControl.ɵfac = function MatFormFieldControl_Factory(t) { return new (t || MatFormFieldControl)(); };\nMatFormFieldControl.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatFormFieldControl });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatFormFieldControl, [{\n        type: Directive\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getMatFormFieldPlaceholderConflictError() {\n    return Error('Placeholder attribute and child element were both specified.');\n}\n/** @docs-private */\nfunction getMatFormFieldDuplicatedHintError(align) {\n    return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n/** @docs-private */\nfunction getMatFormFieldMissingControlError() {\n    return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId$1 = 0;\n/**\n * Injection token that can be used to reference instances of `MatHint`. It serves as\n * alternative token to the actual `MatHint` class which could cause unnecessary\n * retention of the class and its directive metadata.\n *\n * *Note*: This is not part of the public API as the MDC-based form-field will not\n * need a lightweight token for `MatHint` and we want to reduce breaking changes.\n */\nconst _MAT_HINT = new InjectionToken('MatHint');\n/** Hint text to be shown underneath the form field control. */\nclass MatHint {\n    constructor() {\n        /** Whether to align the hint label at the start or end of the line. */\n        this.align = 'start';\n        /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n        this.id = `mat-hint-${nextUniqueId$1++}`;\n    }\n}\nMatHint.ɵfac = function MatHint_Factory(t) { return new (t || MatHint)(); };\nMatHint.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatHint, selectors: [[\"mat-hint\"]], hostAttrs: [1, \"mat-hint\"], hostVars: 4, hostBindings: function MatHint_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"align\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-form-field-hint-end\", ctx.align === \"end\");\n    } }, inputs: { align: \"align\", id: \"id\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: _MAT_HINT, useExisting: MatHint }])] });\nMatHint.propDecorators = {\n    align: [{ type: Input }],\n    id: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatHint, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-hint',\n                host: {\n                    'class': 'mat-hint',\n                    '[class.mat-form-field-hint-end]': 'align === \"end\"',\n                    '[attr.id]': 'id',\n                    // Remove align attribute to prevent it from interfering with layout.\n                    '[attr.align]': 'null'\n                },\n                providers: [{ provide: _MAT_HINT, useExisting: MatHint }]\n            }]\n    }], function () { return []; }, { align: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The floating label for a `mat-form-field`. */\nclass MatLabel {\n}\nMatLabel.ɵfac = function MatLabel_Factory(t) { return new (t || MatLabel)(); };\nMatLabel.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatLabel, selectors: [[\"mat-label\"]] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatLabel, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-label'\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\nclass MatPlaceholder {\n}\nMatPlaceholder.ɵfac = function MatPlaceholder_Factory(t) { return new (t || MatPlaceholder)(); };\nMatPlaceholder.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatPlaceholder, selectors: [[\"mat-placeholder\"]] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatPlaceholder, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-placeholder'\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `MatPrefix`. It serves as\n * alternative token to the actual `MatPrefix` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_PREFIX = new InjectionToken('MatPrefix');\n/** Prefix to be placed in front of the form field. */\nclass MatPrefix {\n}\nMatPrefix.ɵfac = function MatPrefix_Factory(t) { return new (t || MatPrefix)(); };\nMatPrefix.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatPrefix, selectors: [[\"\", \"matPrefix\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_PREFIX, useExisting: MatPrefix }])] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatPrefix, [{\n        type: Directive,\n        args: [{\n                selector: '[matPrefix]',\n                providers: [{ provide: MAT_PREFIX, useExisting: MatPrefix }]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `MatSuffix`. It serves as\n * alternative token to the actual `MatSuffix` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SUFFIX = new InjectionToken('MatSuffix');\n/** Suffix to be placed at the end of the form field. */\nclass MatSuffix {\n}\nMatSuffix.ɵfac = function MatSuffix_Factory(t) { return new (t || MatSuffix)(); };\nMatSuffix.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatSuffix, selectors: [[\"\", \"matSuffix\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_SUFFIX, useExisting: MatSuffix }])] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSuffix, [{\n        type: Directive,\n        args: [{\n                selector: '[matSuffix]',\n                providers: [{ provide: MAT_SUFFIX, useExisting: MatSuffix }]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId$2 = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nclass MatFormFieldBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nconst _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nconst MAT_FORM_FIELD_DEFAULT_OPTIONS = new InjectionToken('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n/**\n * Injection token that can be used to inject an instances of `MatFormField`. It serves\n * as alternative token to the actual `MatFormField` class which would cause unnecessary\n * retention of the `MatFormField` class and its component metadata.\n */\nconst MAT_FORM_FIELD = new InjectionToken('MatFormField');\n/** Container for form controls that applies Material Design styling and behavior. */\nclass MatFormField extends _MatFormFieldMixinBase {\n    constructor(_elementRef, _changeDetectorRef, \n    /**\n     * @deprecated `_labelOptions` parameter no longer being used. To be removed.\n     * @breaking-change 12.0.0\n     */\n    // Use `ElementRef` here so Angular has something to inject.\n    _labelOptions, _dir, _defaults, _platform, _ngZone, _animationMode) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._defaults = _defaults;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        /**\n         * Whether the outline gap needs to be calculated\n         * immediately on the next change detection run.\n         */\n        this._outlineGapCalculationNeededImmediately = false;\n        /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n        this._outlineGapCalculationNeededOnStable = false;\n        this._destroyed = new Subject();\n        /** Override for the logic that disables the label animation in certain cases. */\n        this._showAlwaysAnimate = false;\n        /** State of the mat-hint and mat-error animations. */\n        this._subscriptAnimationState = '';\n        this._hintLabel = '';\n        // Unique id for the hint label.\n        this._hintLabelId = `mat-hint-${nextUniqueId$2++}`;\n        // Unique id for the label element.\n        this._labelId = `mat-form-field-label-${nextUniqueId$2++}`;\n        this.floatLabel = this._getDefaultFloatLabelState();\n        this._animationsEnabled = _animationMode !== 'NoopAnimations';\n        // Set the default through here so we invoke the setter on the first run.\n        this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n        this._hideRequiredMarker = (_defaults && _defaults.hideRequiredMarker != null) ?\n            _defaults.hideRequiredMarker : false;\n    }\n    /** The form-field appearance style. */\n    get appearance() { return this._appearance; }\n    set appearance(value) {\n        const oldValue = this._appearance;\n        this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n        if (this._appearance === 'outline' && oldValue !== value) {\n            this._outlineGapCalculationNeededOnStable = true;\n        }\n    }\n    /** Whether the required marker should be hidden. */\n    get hideRequiredMarker() { return this._hideRequiredMarker; }\n    set hideRequiredMarker(value) {\n        this._hideRequiredMarker = coerceBooleanProperty(value);\n    }\n    /** Whether the floating label should always float or not. */\n    _shouldAlwaysFloat() {\n        return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n    }\n    /** Whether the label can float or not. */\n    _canLabelFloat() { return this.floatLabel !== 'never'; }\n    /** Text for the form field hint. */\n    get hintLabel() { return this._hintLabel; }\n    set hintLabel(value) {\n        this._hintLabel = value;\n        this._processHints();\n    }\n    /**\n     * Whether the label should always float, never float or float as the user types.\n     *\n     * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n     * way to make the floating label emulate the behavior of a standard input placeholder. However\n     * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n     * appearances the `never` option has been disabled in favor of just using the placeholder.\n     */\n    get floatLabel() {\n        return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n    }\n    set floatLabel(value) {\n        if (value !== this._floatLabel) {\n            this._floatLabel = value || this._getDefaultFloatLabelState();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    get _control() {\n        // TODO(crisbeto): we need this workaround in order to support both Ivy and ViewEngine.\n        //  We should clean this up once Ivy is the default renderer.\n        return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\n    }\n    set _control(value) {\n        this._explicitFormFieldControl = value;\n    }\n    /**\n     * Gets the id of the label element. If no label is present, returns `null`.\n     */\n    getLabelId() {\n        return this._hasFloatingLabel() ? this._labelId : null;\n    }\n    /**\n     * Gets an ElementRef for the element that a overlay attached to the form-field should be\n     * positioned relative to.\n     */\n    getConnectedOverlayOrigin() {\n        return this._connectionContainerRef || this._elementRef;\n    }\n    ngAfterContentInit() {\n        this._validateControlChild();\n        const control = this._control;\n        if (control.controlType) {\n            this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n        }\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        control.stateChanges.pipe(startWith(null)).subscribe(() => {\n            this._validatePlaceholders();\n            this._syncDescribedByIds();\n            this._changeDetectorRef.markForCheck();\n        });\n        // Run change detection if the value changes.\n        if (control.ngControl && control.ngControl.valueChanges) {\n            control.ngControl.valueChanges\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(() => this._changeDetectorRef.markForCheck());\n        }\n        // Note that we have to run outside of the `NgZone` explicitly,\n        // in order to avoid throwing users into an infinite loop\n        // if `zone-patch-rxjs` is included.\n        this._ngZone.runOutsideAngular(() => {\n            this._ngZone.onStable.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                if (this._outlineGapCalculationNeededOnStable) {\n                    this.updateOutlineGap();\n                }\n            });\n        });\n        // Run change detection and update the outline if the suffix or prefix changes.\n        merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n            this._outlineGapCalculationNeededOnStable = true;\n            this._changeDetectorRef.markForCheck();\n        });\n        // Re-validate when the number of hints changes.\n        this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n            this._processHints();\n            this._changeDetectorRef.markForCheck();\n        });\n        // Update the aria-described by when the number of errors changes.\n        this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n            this._syncDescribedByIds();\n            this._changeDetectorRef.markForCheck();\n        });\n        if (this._dir) {\n            this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                if (typeof requestAnimationFrame === 'function') {\n                    this._ngZone.runOutsideAngular(() => {\n                        requestAnimationFrame(() => this.updateOutlineGap());\n                    });\n                }\n                else {\n                    this.updateOutlineGap();\n                }\n            });\n        }\n    }\n    ngAfterContentChecked() {\n        this._validateControlChild();\n        if (this._outlineGapCalculationNeededImmediately) {\n            this.updateOutlineGap();\n        }\n    }\n    ngAfterViewInit() {\n        // Avoid animations on load.\n        this._subscriptAnimationState = 'enter';\n        this._changeDetectorRef.detectChanges();\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop) {\n        const ngControl = this._control ? this._control.ngControl : null;\n        return ngControl && ngControl[prop];\n    }\n    _hasPlaceholder() {\n        return !!(this._control && this._control.placeholder || this._placeholderChild);\n    }\n    _hasLabel() {\n        return !!(this._labelChildNonStatic || this._labelChildStatic);\n    }\n    _shouldLabelFloat() {\n        return this._canLabelFloat() &&\n            ((this._control && this._control.shouldLabelFloat) || this._shouldAlwaysFloat());\n    }\n    _hideControlPlaceholder() {\n        // In the legacy appearance the placeholder is promoted to a label if no label is given.\n        return this.appearance === 'legacy' && !this._hasLabel() ||\n            this._hasLabel() && !this._shouldLabelFloat();\n    }\n    _hasFloatingLabel() {\n        // In the legacy appearance the placeholder is promoted to a label if no label is given.\n        return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n    }\n    /** Determines whether to display hints or errors. */\n    _getDisplayedMessages() {\n        return (this._errorChildren && this._errorChildren.length > 0 &&\n            this._control.errorState) ? 'error' : 'hint';\n    }\n    /** Animates the placeholder up and locks it in position. */\n    _animateAndLockLabel() {\n        if (this._hasFloatingLabel() && this._canLabelFloat()) {\n            // If animations are disabled, we shouldn't go in here,\n            // because the `transitionend` will never fire.\n            if (this._animationsEnabled && this._label) {\n                this._showAlwaysAnimate = true;\n                fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n                    this._showAlwaysAnimate = false;\n                });\n            }\n            this.floatLabel = 'always';\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n     * or child element with the `mat-placeholder` directive).\n     */\n    _validatePlaceholders() {\n        if (this._control.placeholder && this._placeholderChild &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatFormFieldPlaceholderConflictError();\n        }\n    }\n    /** Does any extra processing that is required when handling the hints. */\n    _processHints() {\n        this._validateHints();\n        this._syncDescribedByIds();\n    }\n    /**\n     * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n     * attribute being considered as `align=\"start\"`.\n     */\n    _validateHints() {\n        if (this._hintChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            let startHint;\n            let endHint;\n            this._hintChildren.forEach((hint) => {\n                if (hint.align === 'start') {\n                    if (startHint || this.hintLabel) {\n                        throw getMatFormFieldDuplicatedHintError('start');\n                    }\n                    startHint = hint;\n                }\n                else if (hint.align === 'end') {\n                    if (endHint) {\n                        throw getMatFormFieldDuplicatedHintError('end');\n                    }\n                    endHint = hint;\n                }\n            });\n        }\n    }\n    /** Gets the default float label state. */\n    _getDefaultFloatLabelState() {\n        return (this._defaults && this._defaults.floatLabel) || 'auto';\n    }\n    /**\n     * Sets the list of element IDs that describe the child control. This allows the control to update\n     * its `aria-describedby` attribute accordingly.\n     */\n    _syncDescribedByIds() {\n        if (this._control) {\n            let ids = [];\n            // TODO(wagnermaciel): Remove the type check when we find the root cause of this bug.\n            if (this._control.userAriaDescribedBy &&\n                typeof this._control.userAriaDescribedBy === 'string') {\n                ids.push(...this._control.userAriaDescribedBy.split(' '));\n            }\n            if (this._getDisplayedMessages() === 'hint') {\n                const startHint = this._hintChildren ?\n                    this._hintChildren.find(hint => hint.align === 'start') : null;\n                const endHint = this._hintChildren ?\n                    this._hintChildren.find(hint => hint.align === 'end') : null;\n                if (startHint) {\n                    ids.push(startHint.id);\n                }\n                else if (this._hintLabel) {\n                    ids.push(this._hintLabelId);\n                }\n                if (endHint) {\n                    ids.push(endHint.id);\n                }\n            }\n            else if (this._errorChildren) {\n                ids.push(...this._errorChildren.map(error => error.id));\n            }\n            this._control.setDescribedByIds(ids);\n        }\n    }\n    /** Throws an error if the form field's control is missing. */\n    _validateControlChild() {\n        if (!this._control && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatFormFieldMissingControlError();\n        }\n    }\n    /**\n     * Updates the width and position of the gap in the outline. Only relevant for the outline\n     * appearance.\n     */\n    updateOutlineGap() {\n        const labelEl = this._label ? this._label.nativeElement : null;\n        if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n            !labelEl.textContent.trim()) {\n            return;\n        }\n        if (!this._platform.isBrowser) {\n            // getBoundingClientRect isn't available on the server.\n            return;\n        }\n        // If the element is not present in the DOM, the outline gap will need to be calculated\n        // the next time it is checked and in the DOM.\n        if (!this._isAttachedToDOM()) {\n            this._outlineGapCalculationNeededImmediately = true;\n            return;\n        }\n        let startWidth = 0;\n        let gapWidth = 0;\n        const container = this._connectionContainerRef.nativeElement;\n        const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n        const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n        if (this._label && this._label.nativeElement.children.length) {\n            const containerRect = container.getBoundingClientRect();\n            // If the container's width and height are zero, it means that the element is\n            // invisible and we can't calculate the outline gap. Mark the element as needing\n            // to be checked the next time the zone stabilizes. We can't do this immediately\n            // on the next change detection, because even if the element becomes visible,\n            // the `ClientRect` won't be reclaculated immediately. We reset the\n            // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n            if (containerRect.width === 0 && containerRect.height === 0) {\n                this._outlineGapCalculationNeededOnStable = true;\n                this._outlineGapCalculationNeededImmediately = false;\n                return;\n            }\n            const containerStart = this._getStartEnd(containerRect);\n            const labelChildren = labelEl.children;\n            const labelStart = this._getStartEnd(labelChildren[0].getBoundingClientRect());\n            let labelWidth = 0;\n            for (let i = 0; i < labelChildren.length; i++) {\n                labelWidth += labelChildren[i].offsetWidth;\n            }\n            startWidth = Math.abs(labelStart - containerStart) - outlineGapPadding;\n            gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n        }\n        for (let i = 0; i < startEls.length; i++) {\n            startEls[i].style.width = `${startWidth}px`;\n        }\n        for (let i = 0; i < gapEls.length; i++) {\n            gapEls[i].style.width = `${gapWidth}px`;\n        }\n        this._outlineGapCalculationNeededOnStable =\n            this._outlineGapCalculationNeededImmediately = false;\n    }\n    /** Gets the start end of the rect considering the current directionality. */\n    _getStartEnd(rect) {\n        return (this._dir && this._dir.value === 'rtl') ? rect.right : rect.left;\n    }\n    /** Checks whether the form field is attached to the DOM. */\n    _isAttachedToDOM() {\n        const element = this._elementRef.nativeElement;\n        if (element.getRootNode) {\n            const rootNode = element.getRootNode();\n            // If the element is inside the DOM the root node will be either the document\n            // or the closest shadow root, otherwise it'll be the element itself.\n            return rootNode && rootNode !== element;\n        }\n        // Otherwise fall back to checking if it's in the document. This doesn't account for\n        // shadow DOM, however browser that support shadow DOM should support `getRootNode` as well.\n        return document.documentElement.contains(element);\n    }\n}\nMatFormField.ɵfac = function MatFormField_Factory(t) { return new (t || MatFormField)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatFormField.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatFormField, selectors: [[\"mat-form-field\"]], contentQueries: function MatFormField_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatFormFieldControl, true);\n        ɵngcc0.ɵɵstaticContentQuery(dirIndex, MatFormFieldControl, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatLabel, true);\n        ɵngcc0.ɵɵstaticContentQuery(dirIndex, MatLabel, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatPlaceholder, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_ERROR, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, _MAT_HINT, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_PREFIX, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_SUFFIX, true);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._controlNonStatic = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._controlStatic = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._labelChildNonStatic = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._labelChildStatic = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._placeholderChild = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._errorChildren = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._hintChildren = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._prefixChildren = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._suffixChildren = _t);\n    } }, viewQuery: function MatFormField_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n        ɵngcc0.ɵɵstaticViewQuery(_c1, true);\n        ɵngcc0.ɵɵviewQuery(_c2, true);\n        ɵngcc0.ɵɵviewQuery(_c3, true);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.underlineRef = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._connectionContainerRef = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputContainerRef = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._label = _t.first);\n    } }, hostAttrs: [1, \"mat-form-field\"], hostVars: 40, hostBindings: function MatFormField_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-form-field-appearance-standard\", ctx.appearance == \"standard\")(\"mat-form-field-appearance-fill\", ctx.appearance == \"fill\")(\"mat-form-field-appearance-outline\", ctx.appearance == \"outline\")(\"mat-form-field-appearance-legacy\", ctx.appearance == \"legacy\")(\"mat-form-field-invalid\", ctx._control.errorState)(\"mat-form-field-can-float\", ctx._canLabelFloat())(\"mat-form-field-should-float\", ctx._shouldLabelFloat())(\"mat-form-field-has-label\", ctx._hasFloatingLabel())(\"mat-form-field-hide-placeholder\", ctx._hideControlPlaceholder())(\"mat-form-field-disabled\", ctx._control.disabled)(\"mat-form-field-autofilled\", ctx._control.autofilled)(\"mat-focused\", ctx._control.focused)(\"ng-untouched\", ctx._shouldForward(\"untouched\"))(\"ng-touched\", ctx._shouldForward(\"touched\"))(\"ng-pristine\", ctx._shouldForward(\"pristine\"))(\"ng-dirty\", ctx._shouldForward(\"dirty\"))(\"ng-valid\", ctx._shouldForward(\"valid\"))(\"ng-invalid\", ctx._shouldForward(\"invalid\"))(\"ng-pending\", ctx._shouldForward(\"pending\"))(\"_mat-animation-noopable\", !ctx._animationsEnabled);\n    } }, inputs: { color: \"color\", floatLabel: \"floatLabel\", appearance: \"appearance\", hideRequiredMarker: \"hideRequiredMarker\", hintLabel: \"hintLabel\" }, exportAs: [\"matFormField\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MAT_FORM_FIELD, useExisting: MatFormField },\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c5, decls: 15, vars: 8, consts: [[1, \"mat-form-field-wrapper\"], [1, \"mat-form-field-flex\", 3, \"click\"], [\"connectionContainer\", \"\"], [4, \"ngIf\"], [\"class\", \"mat-form-field-prefix\", 4, \"ngIf\"], [1, \"mat-form-field-infix\"], [\"inputContainer\", \"\"], [1, \"mat-form-field-label-wrapper\"], [\"class\", \"mat-form-field-label\", 3, \"cdkObserveContentDisabled\", \"id\", \"mat-empty\", \"mat-form-field-empty\", \"mat-accent\", \"mat-warn\", \"ngSwitch\", \"cdkObserveContent\", 4, \"ngIf\"], [\"class\", \"mat-form-field-suffix\", 4, \"ngIf\"], [\"class\", \"mat-form-field-underline\", 4, \"ngIf\"], [1, \"mat-form-field-subscript-wrapper\", 3, \"ngSwitch\"], [4, \"ngSwitchCase\"], [\"class\", \"mat-form-field-hint-wrapper\", 4, \"ngSwitchCase\"], [1, \"mat-form-field-outline\"], [1, \"mat-form-field-outline-start\"], [1, \"mat-form-field-outline-gap\"], [1, \"mat-form-field-outline-end\"], [1, \"mat-form-field-outline\", \"mat-form-field-outline-thick\"], [1, \"mat-form-field-prefix\"], [1, \"mat-form-field-label\", 3, \"cdkObserveContentDisabled\", \"id\", \"ngSwitch\", \"cdkObserveContent\"], [\"label\", \"\"], [\"class\", \"mat-placeholder-required mat-form-field-required-marker\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"aria-hidden\", \"true\", 1, \"mat-placeholder-required\", \"mat-form-field-required-marker\"], [1, \"mat-form-field-suffix\"], [1, \"mat-form-field-underline\"], [\"underline\", \"\"], [1, \"mat-form-field-ripple\"], [1, \"mat-form-field-hint-wrapper\"], [\"class\", \"mat-hint\", 3, \"id\", 4, \"ngIf\"], [1, \"mat-form-field-hint-spacer\"], [1, \"mat-hint\", 3, \"id\"]], template: function MatFormField_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c4);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1, 2);\n        ɵngcc0.ɵɵlistener(\"click\", function MatFormField_Template_div_click_1_listener($event) { return ctx._control.onContainerClick && ctx._control.onContainerClick($event); });\n        ɵngcc0.ɵɵtemplate(3, MatFormField_ng_container_3_Template, 9, 0, \"ng-container\", 3);\n        ɵngcc0.ɵɵtemplate(4, MatFormField_div_4_Template, 2, 0, \"div\", 4);\n        ɵngcc0.ɵɵelementStart(5, \"div\", 5, 6);\n        ɵngcc0.ɵɵprojection(7);\n        ɵngcc0.ɵɵelementStart(8, \"span\", 7);\n        ɵngcc0.ɵɵtemplate(9, MatFormField_label_9_Template, 5, 16, \"label\", 8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(10, MatFormField_div_10_Template, 2, 0, \"div\", 9);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(11, MatFormField_div_11_Template, 3, 4, \"div\", 10);\n        ɵngcc0.ɵɵelementStart(12, \"div\", 11);\n        ɵngcc0.ɵɵtemplate(13, MatFormField_div_13_Template, 2, 1, \"div\", 12);\n        ɵngcc0.ɵɵtemplate(14, MatFormField_div_14_Template, 5, 2, \"div\", 13);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.appearance == \"outline\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._prefixChildren.length);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._hasFloatingLabel());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._suffixChildren.length);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.appearance != \"outline\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx._getDisplayedMessages());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", \"error\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", \"hint\");\n    } }, directives: [ɵngcc3.NgIf, ɵngcc3.NgSwitch, ɵngcc3.NgSwitchCase, ɵngcc4.CdkObserveContent], styles: [\".mat-form-field{display:inline-block;position:relative;text-align:left}[dir=rtl] .mat-form-field{text-align:right}.mat-form-field-wrapper{position:relative}.mat-form-field-flex{display:inline-flex;align-items:baseline;box-sizing:border-box;width:100%}.mat-form-field-prefix,.mat-form-field-suffix{white-space:nowrap;flex:none;position:relative}.mat-form-field-infix{display:block;position:relative;flex:auto;min-width:0;width:180px}.cdk-high-contrast-active .mat-form-field-infix{border-image:linear-gradient(transparent, transparent)}.mat-form-field-label-wrapper{position:absolute;left:0;box-sizing:content-box;width:100%;height:100%;overflow:hidden;pointer-events:none}[dir=rtl] .mat-form-field-label-wrapper{left:auto;right:0}.mat-form-field-label{position:absolute;left:0;font:inherit;pointer-events:none;width:100%;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),width 400ms cubic-bezier(0.25, 0.8, 0.25, 1);display:none}[dir=rtl] .mat-form-field-label{transform-origin:100% 0;left:auto;right:0}.mat-form-field-empty.mat-form-field-label,.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label{display:block}.mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:block;transition:none}.mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-form-field-can-float .mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:block}.mat-form-field-label:not(.mat-form-field-empty){transition:none}.mat-form-field-underline{position:absolute;width:100%;pointer-events:none;transform:scale3d(1, 1.0001, 1)}.mat-form-field-ripple{position:absolute;left:0;width:100%;transform-origin:50%;transform:scaleX(0.5);opacity:0;transition:background-color 300ms cubic-bezier(0.55, 0, 0.55, 0.2)}.mat-form-field.mat-focused .mat-form-field-ripple,.mat-form-field.mat-form-field-invalid .mat-form-field-ripple{opacity:1;transform:none;transition:transform 300ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 100ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 300ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-subscript-wrapper{position:absolute;box-sizing:border-box;width:100%;overflow:hidden}.mat-form-field-subscript-wrapper .mat-icon,.mat-form-field-label-wrapper .mat-icon{width:1em;height:1em;font-size:inherit;vertical-align:baseline}.mat-form-field-hint-wrapper{display:flex}.mat-form-field-hint-spacer{flex:1 0 1em}.mat-error{display:block}.mat-form-field-control-wrapper{position:relative}.mat-form-field-hint-end{order:1}.mat-form-field._mat-animation-noopable .mat-form-field-label,.mat-form-field._mat-animation-noopable .mat-form-field-ripple{transition:none}\\n\", \".mat-form-field-appearance-fill .mat-form-field-flex{border-radius:4px 4px 0 0;padding:.75em .75em 0 .75em}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-form-field-flex{outline:solid 1px}.mat-form-field-appearance-fill .mat-form-field-underline::before{content:\\\"\\\";display:block;position:absolute;bottom:0;height:1px;width:100%}.mat-form-field-appearance-fill .mat-form-field-ripple{bottom:0;height:2px}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-fill:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-fill._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}.mat-form-field-appearance-fill .mat-form-field-subscript-wrapper{padding:0 1em}\\n\", \".mat-input-element{font:inherit;background:transparent;color:currentColor;border:none;outline:none;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit;box-sizing:content-box}.mat-input-element:-moz-ui-invalid{box-shadow:none}.mat-input-element::-ms-clear,.mat-input-element::-ms-reveal{display:none}.mat-input-element,.mat-input-element::-webkit-search-cancel-button,.mat-input-element::-webkit-search-decoration,.mat-input-element::-webkit-search-results-button,.mat-input-element::-webkit-search-results-decoration{-webkit-appearance:none}.mat-input-element::-webkit-contacts-auto-fill-button,.mat-input-element::-webkit-caps-lock-indicator,.mat-input-element::-webkit-credentials-auto-fill-button{visibility:hidden}.mat-input-element[type=date],.mat-input-element[type=datetime],.mat-input-element[type=datetime-local],.mat-input-element[type=month],.mat-input-element[type=week],.mat-input-element[type=time]{line-height:1}.mat-input-element[type=date]::after,.mat-input-element[type=datetime]::after,.mat-input-element[type=datetime-local]::after,.mat-input-element[type=month]::after,.mat-input-element[type=week]::after,.mat-input-element[type=time]::after{content:\\\" \\\";white-space:pre;width:1px}.mat-input-element::-webkit-inner-spin-button,.mat-input-element::-webkit-calendar-picker-indicator,.mat-input-element::-webkit-clear-button{font-size:.75em}.mat-input-element::placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element::-moz-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::-moz-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element::-webkit-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::-webkit-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element:-ms-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element:-ms-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-form-field-hide-placeholder .mat-input-element::placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-moz-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-webkit-input-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element:-ms-input-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}textarea.mat-input-element{resize:vertical;overflow:auto}textarea.mat-input-element.cdk-textarea-autosize{resize:none}textarea.mat-input-element{padding:2px 0;margin:-2px 0}select.mat-input-element{-moz-appearance:none;-webkit-appearance:none;position:relative;background-color:transparent;display:inline-flex;box-sizing:border-box;padding-top:1em;top:-1em;margin-bottom:-1em}select.mat-input-element::-ms-expand{display:none}select.mat-input-element::-moz-focus-inner{border:0}select.mat-input-element:not(:disabled){cursor:pointer}select.mat-input-element::-ms-value{color:inherit;background:none}.mat-focused .cdk-high-contrast-active select.mat-input-element::-ms-value{color:inherit}.mat-form-field-type-mat-native-select .mat-form-field-infix::after{content:\\\"\\\";width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;position:absolute;top:50%;right:0;margin-top:-2.5px;pointer-events:none}[dir=rtl] .mat-form-field-type-mat-native-select .mat-form-field-infix::after{right:auto;left:0}.mat-form-field-type-mat-native-select .mat-input-element{padding-right:15px}[dir=rtl] .mat-form-field-type-mat-native-select .mat-input-element{padding-right:0;padding-left:15px}.mat-form-field-type-mat-native-select .mat-form-field-label-wrapper{max-width:calc(100% - 10px)}.mat-form-field-type-mat-native-select.mat-form-field-appearance-outline .mat-form-field-infix::after{margin-top:-5px}.mat-form-field-type-mat-native-select.mat-form-field-appearance-fill .mat-form-field-infix::after{margin-top:-10px}\\n\", \".mat-form-field-appearance-legacy .mat-form-field-label{transform:perspective(100px);-ms-transform:none}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon{width:1em}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button{font:inherit;vertical-align:baseline}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button .mat-icon{font-size:inherit}.mat-form-field-appearance-legacy .mat-form-field-underline{height:1px}.cdk-high-contrast-active .mat-form-field-appearance-legacy .mat-form-field-underline{height:0;border-top:solid 1px}.mat-form-field-appearance-legacy .mat-form-field-ripple{top:0;height:2px;overflow:hidden}.cdk-high-contrast-active .mat-form-field-appearance-legacy .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.cdk-high-contrast-active .mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}.mat-form-field-appearance-legacy.mat-form-field-invalid:not(.mat-focused) .mat-form-field-ripple{height:1px}\\n\", \".mat-form-field-appearance-outline .mat-form-field-wrapper{margin:.25em 0}.mat-form-field-appearance-outline .mat-form-field-flex{padding:0 .75em 0 .75em;margin-top:-0.25em;position:relative}.mat-form-field-appearance-outline .mat-form-field-prefix,.mat-form-field-appearance-outline .mat-form-field-suffix{top:.25em}.mat-form-field-appearance-outline .mat-form-field-outline{display:flex;position:absolute;top:.25em;left:0;right:0;bottom:0;pointer-events:none}.mat-form-field-appearance-outline .mat-form-field-outline-start,.mat-form-field-appearance-outline .mat-form-field-outline-end{border:1px solid currentColor;min-width:5px}.mat-form-field-appearance-outline .mat-form-field-outline-start{border-radius:5px 0 0 5px;border-right-style:none}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-start{border-right-style:solid;border-left-style:none;border-radius:0 5px 5px 0}.mat-form-field-appearance-outline .mat-form-field-outline-end{border-radius:0 5px 5px 0;border-left-style:none;flex-grow:1}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-end{border-left-style:solid;border-right-style:none;border-radius:5px 0 0 5px}.mat-form-field-appearance-outline .mat-form-field-outline-gap{border-radius:.000001px;border:1px solid currentColor;border-left-style:none;border-right-style:none}.mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-outline-gap{border-top-color:transparent}.mat-form-field-appearance-outline .mat-form-field-outline-thick{opacity:0}.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-start,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-end,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-gap{border-width:2px}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline{opacity:0;transition:opacity 100ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline{opacity:0;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline .mat-form-field-subscript-wrapper{padding:0 1em}.mat-form-field-appearance-outline._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-start,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-end,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-gap{transition:none}\\n\", \".mat-form-field-appearance-standard .mat-form-field-flex{padding-top:.75em}.mat-form-field-appearance-standard .mat-form-field-underline{height:1px}.cdk-high-contrast-active .mat-form-field-appearance-standard .mat-form-field-underline{height:0;border-top:solid 1px}.mat-form-field-appearance-standard .mat-form-field-ripple{bottom:0;height:2px}.cdk-high-contrast-active .mat-form-field-appearance-standard .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.cdk-high-contrast-active .mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}.mat-form-field-appearance-standard:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-standard._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}\\n\"], encapsulation: 2, data: { animation: [matFormFieldAnimations.transitionMessages] }, changeDetection: 0 });\nMatFormField.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [ElementRef,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD_DEFAULT_OPTIONS,] }] },\n    { type: Platform },\n    { type: NgZone },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatFormField.propDecorators = {\n    appearance: [{ type: Input }],\n    hideRequiredMarker: [{ type: Input }],\n    hintLabel: [{ type: Input }],\n    floatLabel: [{ type: Input }],\n    underlineRef: [{ type: ViewChild, args: ['underline',] }],\n    _connectionContainerRef: [{ type: ViewChild, args: ['connectionContainer', { static: true },] }],\n    _inputContainerRef: [{ type: ViewChild, args: ['inputContainer',] }],\n    _label: [{ type: ViewChild, args: ['label',] }],\n    _controlNonStatic: [{ type: ContentChild, args: [MatFormFieldControl,] }],\n    _controlStatic: [{ type: ContentChild, args: [MatFormFieldControl, { static: true },] }],\n    _labelChildNonStatic: [{ type: ContentChild, args: [MatLabel,] }],\n    _labelChildStatic: [{ type: ContentChild, args: [MatLabel, { static: true },] }],\n    _placeholderChild: [{ type: ContentChild, args: [MatPlaceholder,] }],\n    _errorChildren: [{ type: ContentChildren, args: [MAT_ERROR, { descendants: true },] }],\n    _hintChildren: [{ type: ContentChildren, args: [_MAT_HINT, { descendants: true },] }],\n    _prefixChildren: [{ type: ContentChildren, args: [MAT_PREFIX, { descendants: true },] }],\n    _suffixChildren: [{ type: ContentChildren, args: [MAT_SUFFIX, { descendants: true },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatFormField, [{\n        type: Component,\n        args: [{\n                selector: 'mat-form-field',\n                exportAs: 'matFormField',\n                template: \"<div class=\\\"mat-form-field-wrapper\\\">\\n  <div class=\\\"mat-form-field-flex\\\" #connectionContainer\\n       (click)=\\\"_control.onContainerClick && _control.onContainerClick($event)\\\">\\n\\n    <!-- Outline used for outline appearance. -->\\n    <ng-container *ngIf=\\\"appearance == 'outline'\\\">\\n      <div class=\\\"mat-form-field-outline\\\">\\n        <div class=\\\"mat-form-field-outline-start\\\"></div>\\n        <div class=\\\"mat-form-field-outline-gap\\\"></div>\\n        <div class=\\\"mat-form-field-outline-end\\\"></div>\\n      </div>\\n      <div class=\\\"mat-form-field-outline mat-form-field-outline-thick\\\">\\n        <div class=\\\"mat-form-field-outline-start\\\"></div>\\n        <div class=\\\"mat-form-field-outline-gap\\\"></div>\\n        <div class=\\\"mat-form-field-outline-end\\\"></div>\\n      </div>\\n    </ng-container>\\n\\n    <div class=\\\"mat-form-field-prefix\\\" *ngIf=\\\"_prefixChildren.length\\\">\\n      <ng-content select=\\\"[matPrefix]\\\"></ng-content>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-infix\\\" #inputContainer>\\n      <ng-content></ng-content>\\n\\n      <span class=\\\"mat-form-field-label-wrapper\\\">\\n        <!-- We add aria-owns as a workaround for an issue in JAWS & NVDA where the label isn't\\n             read if it comes before the control in the DOM. -->\\n        <label class=\\\"mat-form-field-label\\\"\\n               (cdkObserveContent)=\\\"updateOutlineGap()\\\"\\n               [cdkObserveContentDisabled]=\\\"appearance != 'outline'\\\"\\n               [id]=\\\"_labelId\\\"\\n               [attr.for]=\\\"_control.id\\\"\\n               [attr.aria-owns]=\\\"_control.id\\\"\\n               [class.mat-empty]=\\\"_control.empty && !_shouldAlwaysFloat()\\\"\\n               [class.mat-form-field-empty]=\\\"_control.empty && !_shouldAlwaysFloat()\\\"\\n               [class.mat-accent]=\\\"color == 'accent'\\\"\\n               [class.mat-warn]=\\\"color == 'warn'\\\"\\n               #label\\n               *ngIf=\\\"_hasFloatingLabel()\\\"\\n               [ngSwitch]=\\\"_hasLabel()\\\">\\n\\n          <!-- @breaking-change 8.0.0 remove in favor of mat-label element an placeholder attr. -->\\n          <ng-container *ngSwitchCase=\\\"false\\\">\\n            <ng-content select=\\\"mat-placeholder\\\"></ng-content>\\n            <span>{{_control.placeholder}}</span>\\n          </ng-container>\\n\\n          <ng-content select=\\\"mat-label\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n\\n          <!-- @breaking-change 8.0.0 remove `mat-placeholder-required` class -->\\n          <span\\n            class=\\\"mat-placeholder-required mat-form-field-required-marker\\\"\\n            aria-hidden=\\\"true\\\"\\n            *ngIf=\\\"!hideRequiredMarker && _control.required && !_control.disabled\\\">&#32;*</span>\\n        </label>\\n      </span>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-suffix\\\" *ngIf=\\\"_suffixChildren.length\\\">\\n      <ng-content select=\\\"[matSuffix]\\\"></ng-content>\\n    </div>\\n  </div>\\n\\n  <!-- Underline used for legacy, standard, and box appearances. -->\\n  <div class=\\\"mat-form-field-underline\\\" #underline\\n       *ngIf=\\\"appearance != 'outline'\\\">\\n    <span class=\\\"mat-form-field-ripple\\\"\\n          [class.mat-accent]=\\\"color == 'accent'\\\"\\n          [class.mat-warn]=\\\"color == 'warn'\\\"></span>\\n  </div>\\n\\n  <div class=\\\"mat-form-field-subscript-wrapper\\\"\\n       [ngSwitch]=\\\"_getDisplayedMessages()\\\">\\n    <div *ngSwitchCase=\\\"'error'\\\" [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n      <ng-content select=\\\"mat-error\\\"></ng-content>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-hint-wrapper\\\" *ngSwitchCase=\\\"'hint'\\\"\\n      [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n      <!-- TODO(mmalerba): use an actual <mat-hint> once all selectors are switched to mat-* -->\\n      <div *ngIf=\\\"hintLabel\\\" [id]=\\\"_hintLabelId\\\" class=\\\"mat-hint\\\">{{hintLabel}}</div>\\n      <ng-content select=\\\"mat-hint:not([align='end'])\\\"></ng-content>\\n      <div class=\\\"mat-form-field-hint-spacer\\\"></div>\\n      <ng-content select=\\\"mat-hint[align='end']\\\"></ng-content>\\n    </div>\\n  </div>\\n</div>\\n\",\n                animations: [matFormFieldAnimations.transitionMessages],\n                host: {\n                    'class': 'mat-form-field',\n                    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n                    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n                    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n                    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n                    '[class.mat-form-field-invalid]': '_control.errorState',\n                    '[class.mat-form-field-can-float]': '_canLabelFloat()',\n                    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n                    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n                    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n                    '[class.mat-form-field-disabled]': '_control.disabled',\n                    '[class.mat-form-field-autofilled]': '_control.autofilled',\n                    '[class.mat-focused]': '_control.focused',\n                    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n                    '[class.ng-touched]': '_shouldForward(\"touched\")',\n                    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n                    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n                    '[class.ng-valid]': '_shouldForward(\"valid\")',\n                    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n                    '[class.ng-pending]': '_shouldForward(\"pending\")',\n                    '[class._mat-animation-noopable]': '!_animationsEnabled'\n                },\n                inputs: ['color'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                providers: [\n                    { provide: MAT_FORM_FIELD, useExisting: MatFormField },\n                ],\n                styles: [\".mat-form-field{display:inline-block;position:relative;text-align:left}[dir=rtl] .mat-form-field{text-align:right}.mat-form-field-wrapper{position:relative}.mat-form-field-flex{display:inline-flex;align-items:baseline;box-sizing:border-box;width:100%}.mat-form-field-prefix,.mat-form-field-suffix{white-space:nowrap;flex:none;position:relative}.mat-form-field-infix{display:block;position:relative;flex:auto;min-width:0;width:180px}.cdk-high-contrast-active .mat-form-field-infix{border-image:linear-gradient(transparent, transparent)}.mat-form-field-label-wrapper{position:absolute;left:0;box-sizing:content-box;width:100%;height:100%;overflow:hidden;pointer-events:none}[dir=rtl] .mat-form-field-label-wrapper{left:auto;right:0}.mat-form-field-label{position:absolute;left:0;font:inherit;pointer-events:none;width:100%;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),width 400ms cubic-bezier(0.25, 0.8, 0.25, 1);display:none}[dir=rtl] .mat-form-field-label{transform-origin:100% 0;left:auto;right:0}.mat-form-field-empty.mat-form-field-label,.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label{display:block}.mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:block;transition:none}.mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-form-field-can-float .mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:block}.mat-form-field-label:not(.mat-form-field-empty){transition:none}.mat-form-field-underline{position:absolute;width:100%;pointer-events:none;transform:scale3d(1, 1.0001, 1)}.mat-form-field-ripple{position:absolute;left:0;width:100%;transform-origin:50%;transform:scaleX(0.5);opacity:0;transition:background-color 300ms cubic-bezier(0.55, 0, 0.55, 0.2)}.mat-form-field.mat-focused .mat-form-field-ripple,.mat-form-field.mat-form-field-invalid .mat-form-field-ripple{opacity:1;transform:none;transition:transform 300ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 100ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 300ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-subscript-wrapper{position:absolute;box-sizing:border-box;width:100%;overflow:hidden}.mat-form-field-subscript-wrapper .mat-icon,.mat-form-field-label-wrapper .mat-icon{width:1em;height:1em;font-size:inherit;vertical-align:baseline}.mat-form-field-hint-wrapper{display:flex}.mat-form-field-hint-spacer{flex:1 0 1em}.mat-error{display:block}.mat-form-field-control-wrapper{position:relative}.mat-form-field-hint-end{order:1}.mat-form-field._mat-animation-noopable .mat-form-field-label,.mat-form-field._mat-animation-noopable .mat-form-field-ripple{transition:none}\\n\", \".mat-form-field-appearance-fill .mat-form-field-flex{border-radius:4px 4px 0 0;padding:.75em .75em 0 .75em}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-form-field-flex{outline:solid 1px}.mat-form-field-appearance-fill .mat-form-field-underline::before{content:\\\"\\\";display:block;position:absolute;bottom:0;height:1px;width:100%}.mat-form-field-appearance-fill .mat-form-field-ripple{bottom:0;height:2px}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-fill:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-fill._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}.mat-form-field-appearance-fill .mat-form-field-subscript-wrapper{padding:0 1em}\\n\", \".mat-input-element{font:inherit;background:transparent;color:currentColor;border:none;outline:none;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit;box-sizing:content-box}.mat-input-element:-moz-ui-invalid{box-shadow:none}.mat-input-element::-ms-clear,.mat-input-element::-ms-reveal{display:none}.mat-input-element,.mat-input-element::-webkit-search-cancel-button,.mat-input-element::-webkit-search-decoration,.mat-input-element::-webkit-search-results-button,.mat-input-element::-webkit-search-results-decoration{-webkit-appearance:none}.mat-input-element::-webkit-contacts-auto-fill-button,.mat-input-element::-webkit-caps-lock-indicator,.mat-input-element::-webkit-credentials-auto-fill-button{visibility:hidden}.mat-input-element[type=date],.mat-input-element[type=datetime],.mat-input-element[type=datetime-local],.mat-input-element[type=month],.mat-input-element[type=week],.mat-input-element[type=time]{line-height:1}.mat-input-element[type=date]::after,.mat-input-element[type=datetime]::after,.mat-input-element[type=datetime-local]::after,.mat-input-element[type=month]::after,.mat-input-element[type=week]::after,.mat-input-element[type=time]::after{content:\\\" \\\";white-space:pre;width:1px}.mat-input-element::-webkit-inner-spin-button,.mat-input-element::-webkit-calendar-picker-indicator,.mat-input-element::-webkit-clear-button{font-size:.75em}.mat-input-element::placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element::-moz-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::-moz-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element::-webkit-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::-webkit-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element:-ms-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element:-ms-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-form-field-hide-placeholder .mat-input-element::placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-moz-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-webkit-input-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element:-ms-input-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}textarea.mat-input-element{resize:vertical;overflow:auto}textarea.mat-input-element.cdk-textarea-autosize{resize:none}textarea.mat-input-element{padding:2px 0;margin:-2px 0}select.mat-input-element{-moz-appearance:none;-webkit-appearance:none;position:relative;background-color:transparent;display:inline-flex;box-sizing:border-box;padding-top:1em;top:-1em;margin-bottom:-1em}select.mat-input-element::-ms-expand{display:none}select.mat-input-element::-moz-focus-inner{border:0}select.mat-input-element:not(:disabled){cursor:pointer}select.mat-input-element::-ms-value{color:inherit;background:none}.mat-focused .cdk-high-contrast-active select.mat-input-element::-ms-value{color:inherit}.mat-form-field-type-mat-native-select .mat-form-field-infix::after{content:\\\"\\\";width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;position:absolute;top:50%;right:0;margin-top:-2.5px;pointer-events:none}[dir=rtl] .mat-form-field-type-mat-native-select .mat-form-field-infix::after{right:auto;left:0}.mat-form-field-type-mat-native-select .mat-input-element{padding-right:15px}[dir=rtl] .mat-form-field-type-mat-native-select .mat-input-element{padding-right:0;padding-left:15px}.mat-form-field-type-mat-native-select .mat-form-field-label-wrapper{max-width:calc(100% - 10px)}.mat-form-field-type-mat-native-select.mat-form-field-appearance-outline .mat-form-field-infix::after{margin-top:-5px}.mat-form-field-type-mat-native-select.mat-form-field-appearance-fill .mat-form-field-infix::after{margin-top:-10px}\\n\", \".mat-form-field-appearance-legacy .mat-form-field-label{transform:perspective(100px);-ms-transform:none}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon{width:1em}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button{font:inherit;vertical-align:baseline}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button .mat-icon{font-size:inherit}.mat-form-field-appearance-legacy .mat-form-field-underline{height:1px}.cdk-high-contrast-active .mat-form-field-appearance-legacy .mat-form-field-underline{height:0;border-top:solid 1px}.mat-form-field-appearance-legacy .mat-form-field-ripple{top:0;height:2px;overflow:hidden}.cdk-high-contrast-active .mat-form-field-appearance-legacy .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.cdk-high-contrast-active .mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}.mat-form-field-appearance-legacy.mat-form-field-invalid:not(.mat-focused) .mat-form-field-ripple{height:1px}\\n\", \".mat-form-field-appearance-outline .mat-form-field-wrapper{margin:.25em 0}.mat-form-field-appearance-outline .mat-form-field-flex{padding:0 .75em 0 .75em;margin-top:-0.25em;position:relative}.mat-form-field-appearance-outline .mat-form-field-prefix,.mat-form-field-appearance-outline .mat-form-field-suffix{top:.25em}.mat-form-field-appearance-outline .mat-form-field-outline{display:flex;position:absolute;top:.25em;left:0;right:0;bottom:0;pointer-events:none}.mat-form-field-appearance-outline .mat-form-field-outline-start,.mat-form-field-appearance-outline .mat-form-field-outline-end{border:1px solid currentColor;min-width:5px}.mat-form-field-appearance-outline .mat-form-field-outline-start{border-radius:5px 0 0 5px;border-right-style:none}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-start{border-right-style:solid;border-left-style:none;border-radius:0 5px 5px 0}.mat-form-field-appearance-outline .mat-form-field-outline-end{border-radius:0 5px 5px 0;border-left-style:none;flex-grow:1}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-end{border-left-style:solid;border-right-style:none;border-radius:5px 0 0 5px}.mat-form-field-appearance-outline .mat-form-field-outline-gap{border-radius:.000001px;border:1px solid currentColor;border-left-style:none;border-right-style:none}.mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-outline-gap{border-top-color:transparent}.mat-form-field-appearance-outline .mat-form-field-outline-thick{opacity:0}.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-start,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-end,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-gap{border-width:2px}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline{opacity:0;transition:opacity 100ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline{opacity:0;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline .mat-form-field-subscript-wrapper{padding:0 1em}.mat-form-field-appearance-outline._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-start,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-end,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-gap{transition:none}\\n\", \".mat-form-field-appearance-standard .mat-form-field-flex{padding-top:.75em}.mat-form-field-appearance-standard .mat-form-field-underline{height:1px}.cdk-high-contrast-active .mat-form-field-appearance-standard .mat-form-field-underline{height:0;border-top:solid 1px}.mat-form-field-appearance-standard .mat-form-field-ripple{bottom:0;height:2px}.cdk-high-contrast-active .mat-form-field-appearance-standard .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.cdk-high-contrast-active .mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}.mat-form-field-appearance-standard:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-standard._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [ElementRef]\n            }] }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD_DEFAULT_OPTIONS]\n            }] }, { type: ɵngcc2.Platform }, { type: ɵngcc0.NgZone }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { floatLabel: [{\n            type: Input\n        }], appearance: [{\n            type: Input\n        }], hideRequiredMarker: [{\n            type: Input\n        }], hintLabel: [{\n            type: Input\n        }], underlineRef: [{\n            type: ViewChild,\n            args: ['underline']\n        }], _connectionContainerRef: [{\n            type: ViewChild,\n            args: ['connectionContainer', { static: true }]\n        }], _inputContainerRef: [{\n            type: ViewChild,\n            args: ['inputContainer']\n        }], _label: [{\n            type: ViewChild,\n            args: ['label']\n        }], _controlNonStatic: [{\n            type: ContentChild,\n            args: [MatFormFieldControl]\n        }], _controlStatic: [{\n            type: ContentChild,\n            args: [MatFormFieldControl, { static: true }]\n        }], _labelChildNonStatic: [{\n            type: ContentChild,\n            args: [MatLabel]\n        }], _labelChildStatic: [{\n            type: ContentChild,\n            args: [MatLabel, { static: true }]\n        }], _placeholderChild: [{\n            type: ContentChild,\n            args: [MatPlaceholder]\n        }], _errorChildren: [{\n            type: ContentChildren,\n            args: [MAT_ERROR, { descendants: true }]\n        }], _hintChildren: [{\n            type: ContentChildren,\n            args: [_MAT_HINT, { descendants: true }]\n        }], _prefixChildren: [{\n            type: ContentChildren,\n            args: [MAT_PREFIX, { descendants: true }]\n        }], _suffixChildren: [{\n            type: ContentChildren,\n            args: [MAT_SUFFIX, { descendants: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatFormFieldModule {\n}\nMatFormFieldModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatFormFieldModule });\nMatFormFieldModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatFormFieldModule_Factory(t) { return new (t || MatFormFieldModule)(); }, imports: [[\n            CommonModule,\n            MatCommonModule,\n            ObserversModule,\n        ], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatFormFieldModule, { declarations: function () { return [MatError, MatFormField, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix]; }, imports: function () { return [CommonModule,\n        MatCommonModule,\n        ObserversModule]; }, exports: function () { return [MatCommonModule, MatError, MatFormField, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatFormFieldModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    MatError,\n                    MatFormField,\n                    MatHint,\n                    MatLabel,\n                    MatPlaceholder,\n                    MatPrefix,\n                    MatSuffix,\n                ],\n                imports: [\n                    CommonModule,\n                    MatCommonModule,\n                    ObserversModule,\n                ],\n                exports: [\n                    MatCommonModule,\n                    MatError,\n                    MatFormField,\n                    MatHint,\n                    MatLabel,\n                    MatPlaceholder,\n                    MatPrefix,\n                    MatSuffix,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_ERROR, MAT_FORM_FIELD, MAT_FORM_FIELD_DEFAULT_OPTIONS, MAT_PREFIX, MAT_SUFFIX, MatError, MatFormField, MatFormFieldControl, MatFormFieldModule, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix, _MAT_HINT, getMatFormFieldDuplicatedHintError, getMatFormFieldMissingControlError, getMatFormFieldPlaceholderConflictError, matFormFieldAnimations };\n\n//# sourceMappingURL=form-field.js.map","import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceStringArray } from '@angular/cdk/coercion';\nimport { Platform, _getShadowRoot } from '@angular/cdk/platform';\nimport { InjectionToken, EventEmitter, Directive, ChangeDetectorRef, ElementRef, Inject, ViewChild, TemplateRef, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, forwardRef, ViewContainerRef, NgZone, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MAT_OPTGROUP, MatOption, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ESCAPE, hasModifierKey, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField, MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { take, switchMap, filter, map, tap, delay } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/cdk/bidi';\nimport * as ɵngcc5 from '@angular/cdk/scrolling';\nimport * as ɵngcc6 from '@angular/material/form-field';\n\nconst _c0 = [\"panel\"];\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const formFieldId_r1 = ctx.id;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0._getPanelAriaLabelledby(formFieldId_r1));\n} }\nconst _c1 = [\"*\"];\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n    constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    source, \n    /** Option that was selected. */\n    option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nclass MatAutocompleteBase {\n}\nconst _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return { autoActiveFirstOption: false };\n}\n/** Base class with all of the `MatAutocomplete` functionality. */\nclass _MatAutocompleteBase extends _MatAutocompleteMixinBase {\n    constructor(_changeDetectorRef, _elementRef, defaults, platform) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._activeOptionChanges = Subscription.EMPTY;\n        /** Whether the autocomplete panel should be visible, depending on option length. */\n        this.showPanel = false;\n        this._isOpen = false;\n        /** Function that maps an option's control value to its display value in the trigger. */\n        this.displayWith = null;\n        /** Event that is emitted whenever an option from the list is selected. */\n        this.optionSelected = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is opened. */\n        this.opened = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is closed. */\n        this.closed = new EventEmitter();\n        /** Emits whenever an option is activated using the keyboard. */\n        this.optionActivated = new EventEmitter();\n        this._classList = {};\n        /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n        // Safari using VoiceOver. We should occasionally check back to see whether the bug\n        // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n        // option altogether.\n        this.inertGroups = (platform === null || platform === void 0 ? void 0 : platform.SAFARI) || false;\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n    /** Whether the autocomplete panel is open. */\n    get isOpen() { return this._isOpen && this.showPanel; }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    get autoActiveFirstOption() { return this._autoActiveFirstOption; }\n    set autoActiveFirstOption(value) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    set classList(value) {\n        if (value && value.length) {\n            this._classList = coerceStringArray(value).reduce((classList, className) => {\n                classList[className] = true;\n                return classList;\n            }, {});\n        }\n        else {\n            this._classList = {};\n        }\n        this._setVisibilityClasses(this._classList);\n        this._elementRef.nativeElement.className = '';\n    }\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n        this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n            this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\n        });\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    ngOnDestroy() {\n        this._activeOptionChanges.unsubscribe();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /** Returns the panel's scrollTop. */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._setVisibilityClasses(this._classList);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits the `select` event. */\n    _emitSelectEvent(option) {\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /** Gets the aria-labelledby for the autocomplete panel. */\n    _getPanelAriaLabelledby(labelId) {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n    _setVisibilityClasses(classList) {\n        classList[this._visibleClass] = this.showPanel;\n        classList[this._hiddenClass] = !this.showPanel;\n    }\n}\n_MatAutocompleteBase.ɵfac = function _MatAutocompleteBase_Factory(t) { return new (t || _MatAutocompleteBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform)); };\n_MatAutocompleteBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatAutocompleteBase, viewQuery: function _MatAutocompleteBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(TemplateRef, true);\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n    } }, inputs: { displayWith: \"displayWith\", autoActiveFirstOption: \"autoActiveFirstOption\", classList: [\"class\", \"classList\"], ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], panelWidth: \"panelWidth\" }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\", optionActivated: \"optionActivated\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n_MatAutocompleteBase.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] },\n    { type: Platform }\n];\n_MatAutocompleteBase.propDecorators = {\n    template: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    displayWith: [{ type: Input }],\n    autoActiveFirstOption: [{ type: Input }],\n    panelWidth: [{ type: Input }],\n    optionSelected: [{ type: Output }],\n    opened: [{ type: Output }],\n    closed: [{ type: Output }],\n    optionActivated: [{ type: Output }],\n    classList: [{ type: Input, args: ['class',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatAutocompleteBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n            }] }, { type: ɵngcc1.Platform }]; }, { displayWith: [{\n            type: Input\n        }], optionSelected: [{\n            type: Output\n        }], opened: [{\n            type: Output\n        }], closed: [{\n            type: Output\n        }], optionActivated: [{\n            type: Output\n        }], autoActiveFirstOption: [{\n            type: Input\n        }], classList: [{\n            type: Input,\n            args: ['class']\n        }], template: [{\n            type: ViewChild,\n            args: [TemplateRef, { static: true }]\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], panelWidth: [{\n            type: Input\n        }] }); })();\nclass MatAutocomplete extends _MatAutocompleteBase {\n    constructor() {\n        super(...arguments);\n        this._visibleClass = 'mat-autocomplete-visible';\n        this._hiddenClass = 'mat-autocomplete-hidden';\n    }\n}\nMatAutocomplete.ɵfac = function MatAutocomplete_Factory(t) { return ɵMatAutocomplete_BaseFactory(t || MatAutocomplete); };\nMatAutocomplete.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatAutocomplete, selectors: [[\"mat-autocomplete\"]], contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, true);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n    } }, hostAttrs: [1, \"mat-autocomplete\"], inputs: { disableRipple: \"disableRipple\" }, exportAs: [\"matAutocomplete\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 1, vars: 0, consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]], template: function MatAutocomplete_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 4, \"ng-template\");\n    } }, directives: [ɵngcc2.NgClass], styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatAutocomplete.propDecorators = {\n    optionGroups: [{ type: ContentChildren, args: [MAT_OPTGROUP, { descendants: true },] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }]\n};\nconst ɵMatAutocomplete_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatAutocomplete);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocomplete, [{\n        type: Component,\n        args: [{\n                selector: 'mat-autocomplete',\n                template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div class=\\\"mat-autocomplete-panel\\\"\\n       role=\\\"listbox\\\"\\n       [id]=\\\"id\\\"\\n       [attr.aria-label]=\\\"ariaLabel || null\\\"\\n       [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n       [ngClass]=\\\"_classList\\\"\\n       #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                exportAs: 'matAutocomplete',\n                inputs: ['disableRipple'],\n                host: {\n                    'class': 'mat-autocomplete'\n                },\n                providers: [\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n                ],\n                styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"]\n            }]\n    }], null, { optionGroups: [{\n            type: ContentChildren,\n            args: [MAT_OPTGROUP, { descendants: true }]\n        }], options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\nclass _MatAutocompleteOriginBase {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\n_MatAutocompleteOriginBase.ɵfac = function _MatAutocompleteOriginBase_Factory(t) { return new (t || _MatAutocompleteOriginBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\n_MatAutocompleteOriginBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatAutocompleteOriginBase });\n_MatAutocompleteOriginBase.ctorParameters = () => [\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatAutocompleteOriginBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin extends _MatAutocompleteOriginBase {\n}\nMatAutocompleteOrigin.ɵfac = function MatAutocompleteOrigin_Factory(t) { return ɵMatAutocompleteOrigin_BaseFactory(t || MatAutocompleteOrigin); };\nMatAutocompleteOrigin.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteOrigin, selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]], exportAs: [\"matAutocompleteOrigin\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatAutocompleteOrigin_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatAutocompleteOrigin);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[matAutocompleteOrigin]',\n                exportAs: 'matAutocompleteOrigin'\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n/**\n * The height of each autocomplete option.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 12.0.0\n */\nconst AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 12.0.0\n */\nconst AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatAutocompleteTrigger),\n    multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\nclass _MatAutocompleteTriggerBase {\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._defaults = _defaults;\n        this._componentDestroyed = false;\n        this._autocompleteDisabled = false;\n        /** Whether or not the label state is being overridden. */\n        this._manuallyFloatingLabel = false;\n        /** Subscription to viewport size changes. */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /** Stream of keyboard events that can close the panel. */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        };\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when autocomplete has been touched` */\n        this._onTouched = () => { };\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * @docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        this._overlayAttached = false;\n        /** Stream of autocomplete option selections. */\n        this.optionSelections = defer(() => {\n            if (this.autocomplete && this.autocomplete.options) {\n                return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable\n                .pipe(take(1), switchMap(() => this.optionSelections));\n        });\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    get autocompleteDisabled() { return this._autocompleteDisabled; }\n    set autocompleteDisabled(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    ngAfterViewInit() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    ngOnDestroy() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n    }\n    /** Whether or not the autocomplete panel is open. */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /** Opens the autocomplete suggestion panel. */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n    }\n    /** Closes the autocomplete suggestion panel. */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            this.autocomplete.closed.emit();\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            this._overlayRef.updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ?\n            this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n            of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map(event => event instanceof MatOptionSelectionChange ? event : null));\n    }\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /** Stream of clicks outside of the autocomplete panel. */\n    _getOutsideClickStream() {\n        return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend'))\n            .pipe(filter(event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            const clickTarget = (this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] :\n                event.target);\n            const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n            const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n            return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!customOrigin || !customOrigin.contains(clickTarget)) &&\n                (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        Promise.resolve(null).then(() => this._setTriggerValue(value));\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE && !hasModifierKey(event)) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n            }\n        }\n    }\n    _handleInput(event) {\n        let target = event.target;\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._onChange(value);\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /** If the label has been manually elevated, return it to its normal state. */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            this._formField.floatLabel = 'auto';\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    _subscribeToClosingActions() {\n        const firstStable = this._zone.onStable.pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n            const wasOpen = this.panelOpen;\n            this._resetActiveItem();\n            this.autocomplete._setVisibility();\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                    this.autocomplete.opened.emit();\n                }\n            }\n            return this.panelClosingActions;\n        }), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe(event => this._setValueAndClose(event));\n    }\n    /** Destroys the autocomplete suggestion panel. */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    _setTriggerValue(value) {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        const inputValue = toDisplay != null ? toDisplay : '';\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = inputValue;\n        }\n        else {\n            this._element.nativeElement.value = inputValue;\n        }\n        this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    _setValueAndClose(event) {\n        if (event && event.source) {\n            this._clearPreviousSelectedOption(event.source);\n            this._setTriggerValue(event.source.value);\n            this._onChange(event.source.value);\n            this._element.nativeElement.focus();\n            this.autocomplete._emitSelectEvent(event.source);\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    _clearPreviousSelectedOption(skip) {\n        this.autocomplete.options.forEach(option => {\n            if (option !== skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n    _attachOverlay() {\n        var _a;\n        if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        // We want to resolve this once, as late as possible so that we can be\n        // sure that the element has been moved into its final place in the DOM.\n        if (this._isInsideShadowRoot == null) {\n            this._isInsideShadowRoot = !!_getShadowRoot(this._element.nativeElement);\n        }\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, { id: (_a = this._formField) === null || _a === void 0 ? void 0 : _a.getLabelId() });\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe(event => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                if ((event.keyCode === ESCAPE && !hasModifierKey(event)) ||\n                    (event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey'))) {\n                    this._resetActiveItem();\n                    this._closeKeyEventStream.next();\n                    // We need to stop propagation, otherwise the event will eventually\n                    // reach the input itself and cause the overlay to be reopened.\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n            });\n            this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n                if (this.panelOpen && overlayRef) {\n                    overlayRef.updateSize({ width: this._getPanelWidth() });\n                }\n            });\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        const wasOpen = this.panelOpen;\n        this.autocomplete._setVisibility();\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n    _getOverlayConfig() {\n        var _a;\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir,\n            panelClass: (_a = this._defaults) === null || _a === void 0 ? void 0 : _a.overlayPanelClass,\n        });\n    }\n    _getOverlayPosition() {\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /** Sets the positions on a position strategy based on the directive's input state. */\n    _setStrategyPositions(positionStrategy) {\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\n        // width matches the input, because consumers can override the width. See #18854.\n        const belowPositions = [\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' }\n        ];\n        // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n        const panelClass = this._aboveClass;\n        const abovePositions = [\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass }\n        ];\n        let positions;\n        if (this.position === 'above') {\n            positions = abovePositions;\n        }\n        else if (this.position === 'below') {\n            positions = belowPositions;\n        }\n        else {\n            positions = [...belowPositions, ...abovePositions];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /** Returns the width of the input element, so the panel width can match it. */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    _resetActiveItem() {\n        const autocomplete = this.autocomplete;\n        if (autocomplete.autoActiveFirstOption) {\n            // Note that we go through `setFirstItemActive`, rather than `setActiveItem(0)`, because\n            // the former will find the next enabled option, if the first one is disabled.\n            autocomplete._keyManager.setFirstItemActive();\n        }\n        else {\n            autocomplete._keyManager.setActiveItem(-1);\n        }\n    }\n    /** Determines whether the panel can be opened. */\n    _canOpen() {\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        var _a;\n        return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n    }\n    /** Scrolls to a particular option in the list. */\n    _scrollToOption(index) {\n        // Given that we are not actually focusing active options, we must manually adjust scroll\n        // to reveal options below the fold. First, we find the offset of the option from the top\n        // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n        // the panel height + the option height, so the active option will be just visible at the\n        // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n        // will become the offset. If that offset is visible within the panel already, the scrollTop is\n        // not adjusted.\n        const autocomplete = this.autocomplete;\n        const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            autocomplete._setScrollTop(0);\n        }\n        else if (autocomplete.panel) {\n            const option = autocomplete.options.toArray()[index];\n            if (option) {\n                const element = option._getHostElement();\n                const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n                autocomplete._setScrollTop(newScrollPosition);\n            }\n        }\n    }\n}\n_MatAutocompleteTriggerBase.ɵfac = function _MatAutocompleteTriggerBase_Factory(t) { return new (t || _MatAutocompleteTriggerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 9), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, 8)); };\n_MatAutocompleteTriggerBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatAutocompleteTriggerBase, inputs: { position: [\"matAutocompletePosition\", \"position\"], autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"], autocomplete: [\"matAutocomplete\", \"autocomplete\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"] }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n_MatAutocompleteTriggerBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Overlay },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }, { type: Host }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] }\n];\n_MatAutocompleteTriggerBase.propDecorators = {\n    autocomplete: [{ type: Input, args: ['matAutocomplete',] }],\n    position: [{ type: Input, args: ['matAutocompletePosition',] }],\n    connectedTo: [{ type: Input, args: ['matAutocompleteConnectedTo',] }],\n    autocompleteAttribute: [{ type: Input, args: ['autocomplete',] }],\n    autocompleteDisabled: [{ type: Input, args: ['matAutocompleteDisabled',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatAutocompleteTriggerBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc3.Overlay }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc4.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc6.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }, {\n                type: Host\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc5.ViewportRuler }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n            }] }]; }, { position: [{\n            type: Input,\n            args: ['matAutocompletePosition']\n        }], autocompleteAttribute: [{\n            type: Input,\n            args: ['autocomplete']\n        }], autocompleteDisabled: [{\n            type: Input,\n            args: ['matAutocompleteDisabled']\n        }], autocomplete: [{\n            type: Input,\n            args: ['matAutocomplete']\n        }], connectedTo: [{\n            type: Input,\n            args: ['matAutocompleteConnectedTo']\n        }] }); })();\nclass MatAutocompleteTrigger extends _MatAutocompleteTriggerBase {\n    constructor() {\n        super(...arguments);\n        this._aboveClass = 'mat-autocomplete-panel-above';\n    }\n}\nMatAutocompleteTrigger.ɵfac = function MatAutocompleteTrigger_Factory(t) { return ɵMatAutocompleteTrigger_BaseFactory(t || MatAutocompleteTrigger); };\nMatAutocompleteTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteTrigger, selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]], hostAttrs: [1, \"mat-autocomplete-trigger\"], hostVars: 7, hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() { return ctx._handleFocus(); })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() { return ctx._onTouched(); })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) { return ctx._handleInput($event); })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.panelOpen && ctx.activeOption ? ctx.activeOption.id : null)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id)(\"aria-haspopup\", !ctx.autocompleteDisabled);\n    } }, exportAs: [\"matAutocompleteTrigger\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatAutocompleteTrigger_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatAutocompleteTrigger);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n        type: Directive,\n        args: [{\n                selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                host: {\n                    'class': 'mat-autocomplete-trigger',\n                    '[attr.autocomplete]': 'autocompleteAttribute',\n                    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                    '[attr.aria-haspopup]': '!autocompleteDisabled',\n                    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                    // a little earlier. This avoids issues where IE delays the focusing of the input.\n                    '(focusin)': '_handleFocus()',\n                    '(blur)': '_onTouched()',\n                    '(input)': '_handleInput($event)',\n                    '(keydown)': '_handleKeydown($event)'\n                },\n                exportAs: 'matAutocompleteTrigger',\n                providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatAutocompleteModule {\n}\nMatAutocompleteModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatAutocompleteModule });\nMatAutocompleteModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatAutocompleteModule_Factory(t) { return new (t || MatAutocompleteModule)(); }, providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[\n            OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n            CommonModule\n        ], CdkScrollableModule,\n        MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatAutocompleteModule, { declarations: function () { return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin]; }, imports: function () { return [OverlayModule,\n        MatOptionModule,\n        MatCommonModule,\n        CommonModule]; }, exports: function () { return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin, CdkScrollableModule,\n        MatOptionModule,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocompleteModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                    CommonModule\n                ],\n                exports: [\n                    MatAutocomplete,\n                    MatAutocompleteTrigger,\n                    MatAutocompleteOrigin,\n                    CdkScrollableModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, _MatAutocompleteBase, _MatAutocompleteOriginBase, _MatAutocompleteTriggerBase, getMatAutocompleteMissingPanelError };\n\n//# sourceMappingURL=autocomplete.js.map","import { SPACE, BACKSPACE, DELETE, TAB, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport { InjectionToken, Directive, EventEmitter, ElementRef, NgZone, Optional, Inject, ChangeDetectorRef, Attribute, ContentChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Self, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, RippleRenderer, MAT_RIPPLE_GLOBAL_OPTIONS, mixinErrorState, ErrorStateMatcher, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, startWith } from 'rxjs/operators';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event object emitted by MatChip when selected or deselected. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@angular/material/core';\n\nconst _c0 = [\"*\"];\nclass MatChipSelectionChange {\n    constructor(\n    /** Reference to the chip that emitted the event. */\n    source, \n    /** Whether the chip that emitted the event is selected. */\n    selected, \n    /** Whether the selection change was a result of a user interaction. */\n    isUserInput = false) {\n        this.source = source;\n        this.selected = selected;\n        this.isUserInput = isUserInput;\n    }\n}\n/**\n * Injection token that can be used to reference instances of `MatChipRemove`. It serves as\n * alternative token to the actual `MatChipRemove` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_REMOVE = new InjectionToken('MatChipRemove');\n/**\n * Injection token that can be used to reference instances of `MatChipAvatar`. It serves as\n * alternative token to the actual `MatChipAvatar` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_AVATAR = new InjectionToken('MatChipAvatar');\n/**\n * Injection token that can be used to reference instances of `MatChipTrailingIcon`. It serves as\n * alternative token to the actual `MatChipTrailingIcon` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_TRAILING_ICON = new InjectionToken('MatChipTrailingIcon');\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatChipMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(MatChipBase), 'primary'), -1);\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\nclass MatChipAvatar {\n}\nMatChipAvatar.ɵfac = function MatChipAvatar_Factory(t) { return new (t || MatChipAvatar)(); };\nMatChipAvatar.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipAvatar, selectors: [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]], hostAttrs: [1, \"mat-chip-avatar\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_CHIP_AVATAR, useExisting: MatChipAvatar }])] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipAvatar, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-avatar, [matChipAvatar]',\n                host: { 'class': 'mat-chip-avatar' },\n                providers: [{ provide: MAT_CHIP_AVATAR, useExisting: MatChipAvatar }]\n            }]\n    }], null, null); })();\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\nclass MatChipTrailingIcon {\n}\nMatChipTrailingIcon.ɵfac = function MatChipTrailingIcon_Factory(t) { return new (t || MatChipTrailingIcon)(); };\nMatChipTrailingIcon.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipTrailingIcon, selectors: [[\"mat-chip-trailing-icon\"], [\"\", \"matChipTrailingIcon\", \"\"]], hostAttrs: [1, \"mat-chip-trailing-icon\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_CHIP_TRAILING_ICON, useExisting: MatChipTrailingIcon }])] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipTrailingIcon, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n                host: { 'class': 'mat-chip-trailing-icon' },\n                providers: [{ provide: MAT_CHIP_TRAILING_ICON, useExisting: MatChipTrailingIcon }]\n            }]\n    }], null, null); })();\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nclass MatChip extends _MatChipMixinBase {\n    constructor(_elementRef, _ngZone, platform, globalRippleOptions, _changeDetectorRef, _document, animationMode, tabIndex) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Whether the chip has focus. */\n        this._hasFocus = false;\n        /** Whether the chip list is selectable */\n        this.chipListSelectable = true;\n        /** Whether the chip list is in multi-selection mode. */\n        this._chipListMultiple = false;\n        /** Whether the chip list as a whole is disabled. */\n        this._chipListDisabled = false;\n        this._selected = false;\n        this._selectable = true;\n        this._disabled = false;\n        this._removable = true;\n        /** Emits when the chip is focused. */\n        this._onFocus = new Subject();\n        /** Emits when the chip is blured. */\n        this._onBlur = new Subject();\n        /** Emitted when the chip is selected or deselected. */\n        this.selectionChange = new EventEmitter();\n        /** Emitted when the chip is destroyed. */\n        this.destroyed = new EventEmitter();\n        /** Emitted when a chip is to be removed. */\n        this.removed = new EventEmitter();\n        this._addHostClassName();\n        // Dynamically create the ripple target, append it within the chip, and use it as the\n        // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n        // the proper styles.\n        this._chipRippleTarget = _document.createElement('div');\n        this._chipRippleTarget.classList.add('mat-chip-ripple');\n        this._elementRef.nativeElement.appendChild(this._chipRippleTarget);\n        this._chipRipple = new RippleRenderer(this, _ngZone, this._chipRippleTarget, platform);\n        this._chipRipple.setupTriggerEvents(_elementRef);\n        this.rippleConfig = globalRippleOptions || {};\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n        this.tabIndex = tabIndex != null ? (parseInt(tabIndex) || -1) : -1;\n    }\n    /**\n     * Whether ripples are disabled on interaction\n     * @docs-private\n     */\n    get rippleDisabled() {\n        return this.disabled || this.disableRipple || this._animationsDisabled ||\n            !!this.rippleConfig.disabled;\n    }\n    /** Whether the chip is selected. */\n    get selected() { return this._selected; }\n    set selected(value) {\n        const coercedValue = coerceBooleanProperty(value);\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this._dispatchSelectionChange();\n        }\n    }\n    /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n    get value() {\n        return this._value !== undefined\n            ? this._value\n            : this._elementRef.nativeElement.textContent;\n    }\n    set value(value) { this._value = value; }\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to its selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if its parent chip list is\n     * not selectable.\n     */\n    get selectable() { return this._selectable && this.chipListSelectable; }\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n    /** Whether the chip is disabled. */\n    get disabled() { return this._chipListDisabled || this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     */\n    get removable() { return this._removable; }\n    set removable(value) {\n        this._removable = coerceBooleanProperty(value);\n    }\n    /** The ARIA selected applied to the chip. */\n    get ariaSelected() {\n        // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n        // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n        return this.selectable && (this._chipListMultiple || this.selected) ?\n            this.selected.toString() : null;\n    }\n    _addHostClassName() {\n        const basicChipAttrName = 'mat-basic-chip';\n        const element = this._elementRef.nativeElement;\n        if (element.hasAttribute(basicChipAttrName) ||\n            element.tagName.toLowerCase() === basicChipAttrName) {\n            element.classList.add(basicChipAttrName);\n            return;\n        }\n        else {\n            element.classList.add('mat-standard-chip');\n        }\n    }\n    ngOnDestroy() {\n        this.destroyed.emit({ chip: this });\n        this._chipRipple._removeTriggerEvents();\n    }\n    /** Selects the chip. */\n    select() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Deselects the chip. */\n    deselect() {\n        if (this._selected) {\n            this._selected = false;\n            this._dispatchSelectionChange();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Select this chip and emit selected event */\n    selectViaInteraction() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange(true);\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Toggles the current selected state of this chip. */\n    toggleSelected(isUserInput = false) {\n        this._selected = !this.selected;\n        this._dispatchSelectionChange(isUserInput);\n        this._changeDetectorRef.markForCheck();\n        return this.selected;\n    }\n    /** Allows for programmatic focusing of the chip. */\n    focus() {\n        if (!this._hasFocus) {\n            this._elementRef.nativeElement.focus();\n            this._onFocus.next({ chip: this });\n        }\n        this._hasFocus = true;\n    }\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     */\n    remove() {\n        if (this.removable) {\n            this.removed.emit({ chip: this });\n        }\n    }\n    /** Handles click events on the chip. */\n    _handleClick(event) {\n        if (this.disabled) {\n            event.preventDefault();\n        }\n        else {\n            event.stopPropagation();\n        }\n    }\n    /** Handle custom key presses. */\n    _handleKeydown(event) {\n        if (this.disabled) {\n            return;\n        }\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused chip\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused chip\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n        }\n    }\n    _blur() {\n        // When animations are enabled, Angular may end up removing the chip from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n        // that moves focus not the next item. To work around the issue, we defer marking the chip\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .pipe(take(1))\n            .subscribe(() => {\n            this._ngZone.run(() => {\n                this._hasFocus = false;\n                this._onBlur.next({ chip: this });\n            });\n        });\n    }\n    _dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n}\nMatChip.ɵfac = function MatChip_Factory(t) { return new (t || MatChip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatChip.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChip, selectors: [[\"mat-basic-chip\"], [\"\", \"mat-basic-chip\", \"\"], [\"mat-chip\"], [\"\", \"mat-chip\", \"\"]], contentQueries: function MatChip_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_AVATAR, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_TRAILING_ICON, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_REMOVE, true);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.avatar = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trailingIcon = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.removeIcon = _t.first);\n    } }, hostAttrs: [\"role\", \"option\", 1, \"mat-chip\", \"mat-focus-indicator\"], hostVars: 14, hostBindings: function MatChip_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChip_click_HostBindingHandler($event) { return ctx._handleClick($event); })(\"keydown\", function MatChip_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatChip_focus_HostBindingHandler() { return ctx.focus(); })(\"blur\", function MatChip_blur_HostBindingHandler() { return ctx._blur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx.tabIndex)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-selected\", ctx.ariaSelected);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-selected\", ctx.selected)(\"mat-chip-with-avatar\", ctx.avatar)(\"mat-chip-with-trailing-icon\", ctx.trailingIcon || ctx.removeIcon)(\"mat-chip-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationsDisabled);\n    } }, inputs: { color: \"color\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", selected: \"selected\", value: \"value\", selectable: \"selectable\", disabled: \"disabled\", removable: \"removable\" }, outputs: { selectionChange: \"selectionChange\", destroyed: \"destroyed\", removed: \"removed\" }, exportAs: [\"matChip\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatChip.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatChip.propDecorators = {\n    avatar: [{ type: ContentChild, args: [MAT_CHIP_AVATAR,] }],\n    trailingIcon: [{ type: ContentChild, args: [MAT_CHIP_TRAILING_ICON,] }],\n    removeIcon: [{ type: ContentChild, args: [MAT_CHIP_REMOVE,] }],\n    selected: [{ type: Input }],\n    value: [{ type: Input }],\n    selectable: [{ type: Input }],\n    disabled: [{ type: Input }],\n    removable: [{ type: Input }],\n    selectionChange: [{ type: Output }],\n    destroyed: [{ type: Output }],\n    removed: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChip, [{\n        type: Directive,\n        args: [{\n                selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n                inputs: ['color', 'disableRipple', 'tabIndex'],\n                exportAs: 'matChip',\n                host: {\n                    'class': 'mat-chip mat-focus-indicator',\n                    '[attr.tabindex]': 'disabled ? null : tabIndex',\n                    'role': 'option',\n                    '[class.mat-chip-selected]': 'selected',\n                    '[class.mat-chip-with-avatar]': 'avatar',\n                    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                    '[class.mat-chip-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationsDisabled',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-selected]': 'ariaSelected',\n                    '(click)': '_handleClick($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, { selectionChange: [{\n            type: Output\n        }], destroyed: [{\n            type: Output\n        }], removed: [{\n            type: Output\n        }], selected: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], removable: [{\n            type: Input\n        }], avatar: [{\n            type: ContentChild,\n            args: [MAT_CHIP_AVATAR]\n        }], trailingIcon: [{\n            type: ContentChild,\n            args: [MAT_CHIP_TRAILING_ICON]\n        }], removeIcon: [{\n            type: ContentChild,\n            args: [MAT_CHIP_REMOVE]\n        }] }); })();\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nclass MatChipRemove {\n    constructor(_parentChip, elementRef) {\n        this._parentChip = _parentChip;\n        if (elementRef.nativeElement.nodeName === 'BUTTON') {\n            elementRef.nativeElement.setAttribute('type', 'button');\n        }\n    }\n    /** Calls the parent chip's public `remove()` method if applicable. */\n    _handleClick(event) {\n        const parentChip = this._parentChip;\n        if (parentChip.removable && !parentChip.disabled) {\n            parentChip.remove();\n        }\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused chip that has been focused after chip removal. Usually the parent\n        // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n        // that the chip is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\nMatChipRemove.ɵfac = function MatChipRemove_Factory(t) { return new (t || MatChipRemove)(ɵngcc0.ɵɵdirectiveInject(MatChip), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatChipRemove.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipRemove, selectors: [[\"\", \"matChipRemove\", \"\"]], hostAttrs: [1, \"mat-chip-remove\", \"mat-chip-trailing-icon\"], hostBindings: function MatChipRemove_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChipRemove_click_HostBindingHandler($event) { return ctx._handleClick($event); });\n    } }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_CHIP_REMOVE, useExisting: MatChipRemove }])] });\nMatChipRemove.ctorParameters = () => [\n    { type: MatChip },\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipRemove, [{\n        type: Directive,\n        args: [{\n                selector: '[matChipRemove]',\n                host: {\n                    'class': 'mat-chip-remove mat-chip-trailing-icon',\n                    '(click)': '_handleClick($event)'\n                },\n                providers: [{ provide: MAT_CHIP_REMOVE, useExisting: MatChipRemove }]\n            }]\n    }], function () { return [{ type: MatChip }, { type: ɵngcc0.ElementRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for the chips module. */\nconst MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nclass MatChipListBase {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /** @docs-private */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nconst _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n/** Change event object that is emitted when the chip list value has changed. */\nclass MatChipListChange {\n    constructor(\n    /** Chip list that emitted the event. */\n    source, \n    /** Value of the chip list when the event was emitted. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\nclass MatChipList extends _MatChipListMixinBase {\n    constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, \n    /** @docs-private */\n    ngControl) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this.ngControl = ngControl;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-chip-list';\n        /**\n         * When a chip is destroyed, we store the index of the destroyed chip until the chips\n         * query list notifies about the update. This is necessary because we cannot determine an\n         * appropriate chip that should receive focus until the array of chips updated completely.\n         */\n        this._lastDestroyedChipIndex = null;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** Uid of the chip list */\n        this._uid = `mat-chip-list-${nextUniqueId++}`;\n        /** Tab index for the chip list. */\n        this._tabIndex = 0;\n        /**\n         * User defined tab index.\n         * When it is not null, use user defined tab index. Otherwise use _tabIndex\n         */\n        this._userTabIndex = null;\n        /** Function when touched */\n        this._onTouched = () => { };\n        /** Function when changed */\n        this._onChange = () => { };\n        this._multiple = false;\n        this._compareWith = (o1, o2) => o1 === o2;\n        this._required = false;\n        this._disabled = false;\n        /** Orientation of the chip list. */\n        this.ariaOrientation = 'horizontal';\n        this._selectable = true;\n        /** Event emitted when the selected chip list value has been changed by the user. */\n        this.change = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n    /** The array of selected chips inside chip list. */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /** The ARIA role applied to the chip list. */\n    get role() { return this.empty ? null : 'listbox'; }\n    /** Whether the user should be allowed to select multiple chips. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() { return this._compareWith; }\n    set compareWith(fn) {\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() { return this._value; }\n    set value(value) {\n        this.writeValue(value);\n        this._value = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() {\n        return this._chipInput ? this._chipInput.id : this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get placeholder() {\n        return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n    get focused() {\n        return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return (!this._chipInput || this._chipInput.empty) && (!this.chips || this.chips.length === 0);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() { return !this.empty || this.focused; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     */\n    get selectable() { return this._selectable; }\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n        if (this.chips) {\n            this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n        }\n    }\n    set tabIndex(value) {\n        this._userTabIndex = value;\n        this._tabIndex = value;\n    }\n    /** Combined stream of all of the child chips' selection change events. */\n    get chipSelectionChanges() {\n        return merge(...this.chips.map(chip => chip.selectionChange));\n    }\n    /** Combined stream of all of the child chips' focus change events. */\n    get chipFocusChanges() {\n        return merge(...this.chips.map(chip => chip._onFocus));\n    }\n    /** Combined stream of all of the child chips' blur change events. */\n    get chipBlurChanges() {\n        return merge(...this.chips.map(chip => chip._onBlur));\n    }\n    /** Combined stream of all of the child chips' remove change events. */\n    get chipRemoveChanges() {\n        return merge(...this.chips.map(chip => chip.destroyed));\n    }\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager(this.chips)\n            .withWrap()\n            .withVerticalOrientation()\n            .withHomeAndEnd()\n            .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n        if (this._dir) {\n            this._dir.change\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n        }\n        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            this._allowFocusEscape();\n        });\n        // When the list changes, re-subscribe\n        this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n            if (this.disabled) {\n                // Since this happens after the content has been\n                // checked, we need to defer it to the next tick.\n                Promise.resolve().then(() => {\n                    this._syncChipsState();\n                });\n            }\n            this._resetChips();\n            // Reset chips selected/deselected status\n            this._initializeSelection();\n            // Check to see if we need to update our tab index\n            this._updateTabIndex();\n            // Check to see if we have a destroyed chip and need to refocus\n            this._updateFocusForDestroyedChips();\n            this.stateChanges.next();\n        });\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n            if (this.ngControl.disabled !== this._disabled) {\n                this.disabled = !!this.ngControl.disabled;\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this.stateChanges.complete();\n        this._dropSubscriptions();\n    }\n    /** Associates an HTML input element with this chip list. */\n    registerInput(inputElement) {\n        this._chipInput = inputElement;\n        // We use this attribute to match the chip list to its input in test harnesses.\n        // Set the attribute directly here to avoid \"changed after checked\" errors.\n        this._elementRef.nativeElement.setAttribute('data-mat-chip-input', inputElement.id);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) { this._ariaDescribedby = ids.join(' '); }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        if (this.chips) {\n            this._setSelectionByValue(value, false);\n        }\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(event) {\n        if (!this._originatesFromChip(event)) {\n            this.focus();\n        }\n    }\n    /**\n     * Focuses the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     */\n    focus(options) {\n        if (this.disabled) {\n            return;\n        }\n        // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n        // Focus on first element if there's no chipInput inside chip-list\n        if (this._chipInput && this._chipInput.focused) {\n            // do nothing\n        }\n        else if (this.chips.length > 0) {\n            this._keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        }\n        else {\n            this._focusInput(options);\n            this.stateChanges.next();\n        }\n    }\n    /** Attempt to focus an input if we have one. */\n    _focusInput(options) {\n        if (this._chipInput) {\n            this._chipInput.focus(options);\n        }\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    _keydown(event) {\n        const target = event.target;\n        // If they are on an empty input and hit backspace, focus the last chip\n        if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n            this._keyManager.setLastItemActive();\n            event.preventDefault();\n        }\n        else if (target && target.classList.contains('mat-chip')) {\n            this._keyManager.onKeydown(event);\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n    _updateTabIndex() {\n        // If we have 0 chips, we should not allow keyboard focus\n        this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n    }\n    /**\n     * If the amount of chips changed, we need to update the\n     * key manager state and focus the next closest chip.\n     */\n    _updateFocusForDestroyedChips() {\n        // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n        if (this._lastDestroyedChipIndex != null) {\n            if (this.chips.length) {\n                const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n                this._keyManager.setActiveItem(newChipIndex);\n            }\n            else {\n                this.focus();\n            }\n        }\n        this._lastDestroyedChipIndex = null;\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of chips.\n     */\n    _isValidIndex(index) {\n        return index >= 0 && index < this.chips.length;\n    }\n    _isInputEmpty(element) {\n        if (element && element.nodeName.toLowerCase() === 'input') {\n            let input = element;\n            return !input.value;\n        }\n        return false;\n    }\n    _setSelectionByValue(value, isUserInput = true) {\n        this._clearSelection();\n        this.chips.forEach(chip => chip.deselect());\n        if (Array.isArray(value)) {\n            value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n            this._sortValues();\n        }\n        else {\n            const correspondingChip = this._selectValue(value, isUserInput);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what chip the user interacted with last.\n            if (correspondingChip) {\n                if (isUserInput) {\n                    this._keyManager.setActiveItem(correspondingChip);\n                }\n            }\n        }\n    }\n    /**\n     * Finds and selects the chip based on its value.\n     * @returns Chip that has the corresponding value.\n     */\n    _selectValue(value, isUserInput = true) {\n        const correspondingChip = this.chips.find(chip => {\n            return chip.value != null && this._compareWith(chip.value, value);\n        });\n        if (correspondingChip) {\n            isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n            this._selectionModel.select(correspondingChip);\n        }\n        return correspondingChip;\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl || this._value) {\n                this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        });\n    }\n    /**\n     * Deselects every chip in the list.\n     * @param skip Chip that should not be deselected.\n     */\n    _clearSelection(skip) {\n        this._selectionModel.clear();\n        this.chips.forEach(chip => {\n            if (chip !== skip) {\n                chip.deselect();\n            }\n        });\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    _sortValues() {\n        if (this._multiple) {\n            this._selectionModel.clear();\n            this.chips.forEach(chip => {\n                if (chip.selected) {\n                    this._selectionModel.select(chip);\n                }\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map(chip => chip.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new MatChipListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** When blurred, mark the field as touched when focus moved outside the chip list. */\n    _blur() {\n        if (!this._hasFocusedChip()) {\n            this._keyManager.setActiveItem(-1);\n        }\n        if (!this.disabled) {\n            if (this._chipInput) {\n                // If there's a chip input, we should check whether the focus moved to chip input.\n                // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n                // to chip input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on chip input.\n                setTimeout(() => {\n                    if (!this.focused) {\n                        this._markAsTouched();\n                    }\n                });\n            }\n            else {\n                // If there's no chip input, then mark the field as touched.\n                this._markAsTouched();\n            }\n        }\n    }\n    /** Mark the field as touched */\n    _markAsTouched() {\n        this._onTouched();\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n     * user to tab out of it. This prevents the list from capturing focus and redirecting\n     * it back to the first chip, creating a focus trap, if it user tries to tab away.\n     */\n    _allowFocusEscape() {\n        if (this._tabIndex !== -1) {\n            this._tabIndex = -1;\n            setTimeout(() => {\n                this._tabIndex = this._userTabIndex || 0;\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    _resetChips() {\n        this._dropSubscriptions();\n        this._listenToChipsFocus();\n        this._listenToChipsSelection();\n        this._listenToChipsRemoved();\n    }\n    _dropSubscriptions() {\n        if (this._chipFocusSubscription) {\n            this._chipFocusSubscription.unsubscribe();\n            this._chipFocusSubscription = null;\n        }\n        if (this._chipBlurSubscription) {\n            this._chipBlurSubscription.unsubscribe();\n            this._chipBlurSubscription = null;\n        }\n        if (this._chipSelectionSubscription) {\n            this._chipSelectionSubscription.unsubscribe();\n            this._chipSelectionSubscription = null;\n        }\n        if (this._chipRemoveSubscription) {\n            this._chipRemoveSubscription.unsubscribe();\n            this._chipRemoveSubscription = null;\n        }\n    }\n    /** Listens to user-generated selection events on each chip. */\n    _listenToChipsSelection() {\n        this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n            event.source.selected\n                ? this._selectionModel.select(event.source)\n                : this._selectionModel.deselect(event.source);\n            // For single selection chip list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.chips.forEach(chip => {\n                    if (!this._selectionModel.isSelected(chip) && chip.selected) {\n                        chip.deselect();\n                    }\n                });\n            }\n            if (event.isUserInput) {\n                this._propagateChanges();\n            }\n        });\n    }\n    /** Listens to user-generated selection events on each chip. */\n    _listenToChipsFocus() {\n        this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n            let chipIndex = this.chips.toArray().indexOf(event.chip);\n            if (this._isValidIndex(chipIndex)) {\n                this._keyManager.updateActiveItem(chipIndex);\n            }\n            this.stateChanges.next();\n        });\n        this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n            this._blur();\n            this.stateChanges.next();\n        });\n    }\n    _listenToChipsRemoved() {\n        this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n            const chip = event.chip;\n            const chipIndex = this.chips.toArray().indexOf(event.chip);\n            // In case the chip that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling chip that will\n            // receive focus.\n            if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n                this._lastDestroyedChipIndex = chipIndex;\n            }\n        });\n    }\n    /** Checks whether an event comes from inside a chip element. */\n    _originatesFromChip(event) {\n        let currentElement = event.target;\n        while (currentElement && currentElement !== this._elementRef.nativeElement) {\n            if (currentElement.classList.contains('mat-chip')) {\n                return true;\n            }\n            currentElement = currentElement.parentElement;\n        }\n        return false;\n    }\n    /** Checks whether any of the chips is focused. */\n    _hasFocusedChip() {\n        return this.chips && this.chips.some(chip => chip._hasFocus);\n    }\n    /** Syncs the list's state with the individual chips. */\n    _syncChipsState() {\n        if (this.chips) {\n            this.chips.forEach(chip => {\n                chip._chipListDisabled = this._disabled;\n                chip._chipListMultiple = this.multiple;\n            });\n        }\n    }\n}\nMatChipList.ɵfac = function MatChipList_Factory(t) { return new (t || MatChipList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl, 10)); };\nMatChipList.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatChipList, selectors: [[\"mat-chip-list\"]], contentQueries: function MatChipList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChip, true);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chips = _t);\n    } }, hostAttrs: [1, \"mat-chip-list\"], hostVars: 15, hostBindings: function MatChipList_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatChipList_focus_HostBindingHandler() { return ctx.focus(); })(\"blur\", function MatChipList_blur_HostBindingHandler() { return ctx._blur(); })(\"keydown\", function MatChipList_keydown_HostBindingHandler($event) { return ctx._keydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx._uid);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx._tabIndex)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-required\", ctx.role ? ctx.required : null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-multiselectable\", ctx.multiple)(\"role\", ctx.role)(\"aria-orientation\", ctx.ariaOrientation);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-list-disabled\", ctx.disabled)(\"mat-chip-list-invalid\", ctx.errorState)(\"mat-chip-list-required\", ctx.required);\n    } }, inputs: { ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"], multiple: \"multiple\", compareWith: \"compareWith\", value: \"value\", required: \"required\", placeholder: \"placeholder\", disabled: \"disabled\", selectable: \"selectable\", tabIndex: \"tabIndex\", errorStateMatcher: \"errorStateMatcher\" }, outputs: { change: \"change\", valueChange: \"valueChange\" }, exportAs: [\"matChipList\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: MatChipList }]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-chip-list-wrapper\"]], template: function MatChipList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatChipList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] }\n];\nMatChipList.propDecorators = {\n    errorStateMatcher: [{ type: Input }],\n    multiple: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    required: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    disabled: [{ type: Input }],\n    ariaOrientation: [{ type: Input, args: ['aria-orientation',] }],\n    selectable: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    change: [{ type: Output }],\n    valueChange: [{ type: Output }],\n    chips: [{ type: ContentChildren, args: [MatChip, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipList, [{\n        type: Component,\n        args: [{\n                selector: 'mat-chip-list',\n                template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n                exportAs: 'matChipList',\n                host: {\n                    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-required]': 'role ? required : null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.role]': 'role',\n                    '[class.mat-chip-list-disabled]': 'disabled',\n                    '[class.mat-chip-list-invalid]': 'errorState',\n                    '[class.mat-chip-list-required]': 'required',\n                    '[attr.aria-orientation]': 'ariaOrientation',\n                    'class': 'mat-chip-list',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()',\n                    '(keydown)': '_keydown($event)',\n                    '[id]': '_uid'\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatChipList }],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.ErrorStateMatcher }, { type: ɵngcc3.NgControl, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }]; }, { ariaOrientation: [{\n            type: Input,\n            args: ['aria-orientation']\n        }], change: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], multiple: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], tabIndex: [{\n            type: Input\n        }], errorStateMatcher: [{\n            type: Input\n        }], chips: [{\n            type: ContentChildren,\n            args: [MatChip, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids.\nlet nextUniqueId$1 = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nclass MatChipInput {\n    constructor(_elementRef, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._defaultOptions = _defaultOptions;\n        /** Whether the control is focused. */\n        this.focused = false;\n        this._addOnBlur = false;\n        /**\n         * The list of key codes that will trigger a chipEnd event.\n         *\n         * Defaults to `[ENTER]`.\n         */\n        this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n        /** Emitted when a chip is to be added. */\n        this.chipEnd = new EventEmitter();\n        /** The input's placeholder text. */\n        this.placeholder = '';\n        /** Unique id for the input. */\n        this.id = `mat-chip-list-input-${nextUniqueId$1++}`;\n        this._disabled = false;\n        this._inputElement = this._elementRef.nativeElement;\n    }\n    /** Register input for chip list */\n    set chipList(value) {\n        if (value) {\n            this._chipList = value;\n            this._chipList.registerInput(this);\n        }\n    }\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     */\n    get addOnBlur() { return this._addOnBlur; }\n    set addOnBlur(value) { this._addOnBlur = coerceBooleanProperty(value); }\n    /** Whether the input is disabled. */\n    get disabled() { return this._disabled || (this._chipList && this._chipList.disabled); }\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /** Whether the input is empty. */\n    get empty() { return !this._inputElement.value; }\n    ngOnChanges() {\n        this._chipList.stateChanges.next();\n    }\n    /** Utility method to make host definition/tests more clear. */\n    _keydown(event) {\n        // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n        // want to do this when going backwards, because focus should go back to the first chip.\n        if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n            this._chipList._allowFocusEscape();\n        }\n        this._emitChipEnd(event);\n    }\n    /** Checks to see if the blur should emit the (chipEnd) event. */\n    _blur() {\n        if (this.addOnBlur) {\n            this._emitChipEnd();\n        }\n        this.focused = false;\n        // Blur the chip list if it is not focused\n        if (!this._chipList.focused) {\n            this._chipList._blur();\n        }\n        this._chipList.stateChanges.next();\n    }\n    _focus() {\n        this.focused = true;\n        this._chipList.stateChanges.next();\n    }\n    /** Checks to see if the (chipEnd) event needs to be emitted. */\n    _emitChipEnd(event) {\n        if (!this._inputElement.value && !!event) {\n            this._chipList._keydown(event);\n        }\n        if (!event || this._isSeparatorKey(event)) {\n            this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n            if (event) {\n                event.preventDefault();\n            }\n        }\n    }\n    _onInput() {\n        // Let chip list know whenever the value changes.\n        this._chipList.stateChanges.next();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this._inputElement.focus(options);\n    }\n    /** Checks whether a keycode is one of the configured separators. */\n    _isSeparatorKey(event) {\n        return !hasModifierKey(event) && new Set(this.separatorKeyCodes).has(event.keyCode);\n    }\n}\nMatChipInput.ɵfac = function MatChipInput_Factory(t) { return new (t || MatChipInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_CHIPS_DEFAULT_OPTIONS)); };\nMatChipInput.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipInput, selectors: [[\"input\", \"matChipInputFor\", \"\"]], hostAttrs: [1, \"mat-chip-input\", \"mat-input-element\"], hostVars: 5, hostBindings: function MatChipInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatChipInput_keydown_HostBindingHandler($event) { return ctx._keydown($event); })(\"blur\", function MatChipInput_blur_HostBindingHandler() { return ctx._blur(); })(\"focus\", function MatChipInput_focus_HostBindingHandler() { return ctx._focus(); })(\"input\", function MatChipInput_input_HostBindingHandler() { return ctx._onInput(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"disabled\", ctx.disabled || null)(\"placeholder\", ctx.placeholder || null)(\"aria-invalid\", ctx._chipList && ctx._chipList.ngControl ? ctx._chipList.ngControl.invalid : null)(\"aria-required\", ctx._chipList && ctx._chipList.required || null);\n    } }, inputs: { separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"], placeholder: \"placeholder\", id: \"id\", chipList: [\"matChipInputFor\", \"chipList\"], addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"], disabled: \"disabled\" }, outputs: { chipEnd: \"matChipInputTokenEnd\" }, exportAs: [\"matChipInput\", \"matChipInputFor\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nMatChipInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_CHIPS_DEFAULT_OPTIONS,] }] }\n];\nMatChipInput.propDecorators = {\n    chipList: [{ type: Input, args: ['matChipInputFor',] }],\n    addOnBlur: [{ type: Input, args: ['matChipInputAddOnBlur',] }],\n    separatorKeyCodes: [{ type: Input, args: ['matChipInputSeparatorKeyCodes',] }],\n    chipEnd: [{ type: Output, args: ['matChipInputTokenEnd',] }],\n    placeholder: [{ type: Input }],\n    id: [{ type: Input }],\n    disabled: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipInput, [{\n        type: Directive,\n        args: [{\n                selector: 'input[matChipInputFor]',\n                exportAs: 'matChipInput, matChipInputFor',\n                host: {\n                    'class': 'mat-chip-input mat-input-element',\n                    '(keydown)': '_keydown($event)',\n                    '(blur)': '_blur()',\n                    '(focus)': '_focus()',\n                    '(input)': '_onInput()',\n                    '[id]': 'id',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.placeholder]': 'placeholder || null',\n                    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n                    '[attr.aria-required]': '_chipList && _chipList.required || null'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_CHIPS_DEFAULT_OPTIONS]\n            }] }]; }, { separatorKeyCodes: [{\n            type: Input,\n            args: ['matChipInputSeparatorKeyCodes']\n        }], chipEnd: [{\n            type: Output,\n            args: ['matChipInputTokenEnd']\n        }], placeholder: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], chipList: [{\n            type: Input,\n            args: ['matChipInputFor']\n        }], addOnBlur: [{\n            type: Input,\n            args: ['matChipInputAddOnBlur']\n        }], disabled: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst CHIP_DECLARATIONS = [\n    MatChipList,\n    MatChip,\n    MatChipInput,\n    MatChipRemove,\n    MatChipAvatar,\n    MatChipTrailingIcon,\n];\nconst ɵ0 = {\n    separatorKeyCodes: [ENTER]\n};\nclass MatChipsModule {\n}\nMatChipsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatChipsModule });\nMatChipsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatChipsModule_Factory(t) { return new (t || MatChipsModule)(); }, providers: [\n        ErrorStateMatcher,\n        {\n            provide: MAT_CHIPS_DEFAULT_OPTIONS,\n            useValue: ɵ0\n        }\n    ], imports: [[MatCommonModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatChipsModule, { declarations: function () { return [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipsModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: CHIP_DECLARATIONS,\n                declarations: CHIP_DECLARATIONS,\n                providers: [\n                    ErrorStateMatcher,\n                    {\n                        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n                        useValue: ɵ0\n                    }\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHIPS_DEFAULT_OPTIONS, MAT_CHIP_AVATAR, MAT_CHIP_REMOVE, MAT_CHIP_TRAILING_ICON, MatChip, MatChipAvatar, MatChipInput, MatChipList, MatChipListChange, MatChipRemove, MatChipSelectionChange, MatChipTrailingIcon, MatChipsModule, ɵ0 };\n\n//# sourceMappingURL=chips.js.map","import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { ReactiveFormsModule } from \"@angular/forms\";\nimport { MatAutocompleteModule } from \"@angular/material/autocomplete\";\nimport { MatChipsModule } from \"@angular/material/chips\";\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\nimport { MatTabsModule } from \"@angular/material/tabs\";\nimport { FooterModule } from \"@src/app/shared/footer/footer.module\";\nimport { AfterWorkComponent } from \"./after-work.component\";\nimport { AfterWorkItemModule } from \"./afterwork-item.module\";\n\n@NgModule({\n    declarations: [AfterWorkComponent],\n    imports: [CommonModule, FooterModule, MatTabsModule, MatChipsModule, MatAutocompleteModule, MatFormFieldModule, ReactiveFormsModule, AfterWorkItemModule],\n    exports: [AfterWorkComponent],\n})\nexport class AfterWorkModule {}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-hello',\n  templateUrl: './hello.component.html',\n  styleUrls: ['./hello.component.scss']\n})\nexport class HelloComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","export default \"<div class=\\\"bounds\\\">\\n    <div class=\\\"inner-bounds\\\">\\n        <div class=\\\"content\\\">\\n            <h1 class=\\\"header\\\"><span>#ALL</span><span>ABOUT ME</span></h1>\\n            <div class=\\\"main-content\\\">\\n                <div class=\\\"image-container\\\">\\n                    <div class=\\\"ava\\\">\\n                        <div class=\\\"ava-container\\\">\\n                            <div class=\\\"avatar\\\"></div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"name\\\">\\n                        <h2><span class=\\\"first-name\\\">VU HIEU </span><span>NGUYEN</span></h2>\\n                        <h3><span class=\\\"role\\\">SOFTWARE ENGINEER</span></h3>\\n                    </div>\\n                    <div class=\\\"icon\\\">\\n                        <div class=\\\"icon-container\\\">\\n                            <div></div>\\n                            <div>\\n                                <button\\n                                    aria-label=\\\"goToFacebook\\\"\\n                                    class=\\\"m-icon facebook\\\"\\n                                    onclick=\\\"window.open(\\n                                    'https://www.facebook.com/raiysaii/',\\n                                    '_blank'\\n                                  );\\\"></button>\\n                            </div>\\n                            <div>\\n                                <button\\n                                    aria-label=\\\"goToLinkedin\\\"\\n                                    class=\\\"m-icon linkedin\\\"\\n                                    onclick=\\\"window.open(\\n                                    'https://www.linkedin.com/in/nhvu95/',\\n                                    '_blank'\\n                                  );\\\"></button>\\n                            </div>\\n                            <div>\\n                                <button\\n                                    aria-label=\\\"goToGithub\\\"\\n                                    class=\\\"m-icon github\\\"\\n                                    onclick=\\\"window.open(\\n                                    'https://github.com/nhvu95',\\n                                    '_blank'\\n                                  );\\\"></button>\\n                            </div>\\n                            <div>\\n                                <button\\n                                    aria-label=\\\"goToCclaim\\\"\\n                                    class=\\\"m-icon cclaim\\\"\\n                                    onclick=\\\"window.open(\\n                                    'https://www.credly.com/users/hieu-nguyen-vu/badges',\\n                                    '_blank'\\n                                  );\\\"></button>\\n                            </div>\\n                            <div></div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"introduce\\\">\\n                    <p>\\n                        My name is\\n                        <span class=\\\"strong\\\"><span class=\\\"main-color\\\">Vu Hieu</span><span> Nguyen</span> </span>, You can call me\\n                        <span class=\\\"strong\\\"><span class=\\\"main-color\\\">\\\"Vue\\\"</span></span>\\n                        same as the way you call \\\"Vue\\\" in VueJS. I'm a Software Engineer. Up to now, I have done this job for 4 years. I have a bachelor's degree in Information Technology and also\\n                        have a certificate in Azure Cloud. My tech stack is Angular and Spring Boot, and with this tech stack, I am flexible to switch between many teams and many roles.\\n                    </p>\\n                    <p>\\n                        <span class=\\\"strong\\\">In my last team</span>, I work as a key member and a junior team leader. My direct supervisor gave me a chance to demonstrate my qualification. My main\\n                        responsibility is coding the core function, designing the project skeleton, and reviewing the source code and document. I also am in charge of the new members, planning tasks\\n                        and training for them.\\n                    </p>\\n                    <p>\\n                        <span class=\\\"strong\\\">I have a big 'DREAM'</span> to become a piece of a big thing or build it by myself. I don't clear about it. I know that It will be great and make the world\\n                        become a better place, and I'm still looking for it. A team with a big dream sounds good, right? Frequently, ideas came to my mind, and the first thing I do is make them come\\n                        true. You can see some of them in my PORTFOLIO, I also public their source code. I did not refactor or beautify almost all of them, but I believe that you still can understand.\\n                    </p>\\n\\n                    <p>\\n                        <span class=\\\"strong itatic main-color\\\">\\\"What is coming will come and we'll meet it when it does\\\".</span>\\n                        <br />\\n                        <span class=\\\"italic\\\">- J.K. Rowling -</span>\\n                    </p>\\n                    <p>\\n                        So what I can do right now is try my best, keep learning from the good ones, look what they do, and wait for an opportunity. The opportunity will come for those who are\\n                        prepared.\\n                    </p>\\n                    <p>\\n                        <span class=\\\"strong\\\"> I'm the kind of person</span>, if I want to do / I have to do something, I will study and self study everything I need to implement that. And by research\\n                        and self-study, I'm on my way to climbing on top of Pyramid. Only on top, I can see the opportunity, and touch on it. This isn't my last target, but It's my first step.\\n                    </p>\\n                </div>\\n            </div>\\n            <app-footer></app-footer>\\n        </div>\\n    </div>\\n</div>\\n\";","export default \".bounds .main-content .image-container {\\n  display: flex;\\n  flex: 1 1 100%;\\n  height: 100%;\\n  width: 100%;\\n  max-width: 30%;\\n  flex-direction: column;\\n  margin-left: 30px;\\n  margin-right: 30px;\\n}\\n.bounds .main-content .image-container .ava {\\n  margin-bottom: 2rem;\\n}\\n.bounds .main-content .image-container .ava .ava-container {\\n  width: 100%;\\n  height: 100%;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n}\\n.bounds .main-content .image-container .ava .ava-container .avatar {\\n  border-radius: 50%;\\n  background-color: #c4c4c4;\\n  width: 300px;\\n  height: 300px;\\n  border: 3px solid #00717b;\\n}\\n.bounds .main-content .image-container .name {\\n  text-align: center;\\n}\\n.bounds .main-content .image-container .name .first-name {\\n  color: #00717b !important;\\n}\\n.bounds .main-content .image-container .name h2 {\\n  font-weight: 400;\\n}\\n.bounds .main-content .image-container .name .role {\\n  font-weight: 300;\\n}\\n.bounds .main-content .image-container .icon-container {\\n  display: flex;\\n  flex-direction: row;\\n  flex: 1 1 100%;\\n  justify-content: center;\\n}\\n.bounds .main-content .image-container .icon-container > div > button {\\n  width: 50px;\\n  min-width: 50px;\\n  height: 50px;\\n  min-height: 50px;\\n  margin: 10px;\\n  cursor: pointer;\\n}\\n.bounds .main-content .introduce p {\\n  text-align: justify;\\n}\\n@media screen and (max-width: 1279px) {\\n  .main-content .image-container {\\n    max-width: 100% !important;\\n  }\\n}\";","import { AfterContentInit, AfterViewInit, Component, OnInit } from \"@angular/core\";\nimport { MatTabChangeEvent } from \"@angular/material/tabs\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\n\n@Component({\n    selector: \"app-main\",\n    templateUrl: \"./main.component.html\",\n    styleUrls: [\"./main.component.scss\"],\n})\nexport class MainComponent implements OnInit {\n    navIndex: number = 0;\n    defaultSelect: number = 0;\n    constructor(private route: ActivatedRoute, private router: Router) {\n        let param = this.route.snapshot.queryParams;\n        if (param && !isNaN(parseInt(param[\"index\"]))) {\n            this.defaultSelect = parseInt(param[\"index\"]);\n            this.navIndex = this.defaultSelect;\n            this.router.navigate([], {\n                queryParams: {\n                    index: null,\n                },\n                queryParamsHandling: \"merge\",\n            });\n        }\n    }\n\n    ngOnInit(): void {\n    }\n\n    tabChanged(tabChangeEvent: MatTabChangeEvent) {\n        this.navIndex = tabChangeEvent.index;\n    }\n}\n","export default \"<mat-tab-group mat-align-tabs=\\\"center\\\" (selectedTabChange)=\\\"tabChanged($event)\\\" [selectedIndex]=\\\"defaultSelect\\\" id=\\\"mainTab\\\">\\n    <mat-tab label=\\\"ABOUT ME\\\">\\n        <ng-template matTabContent>\\n            <app-hello></app-hello>\\n        </ng-template>\\n    </mat-tab>\\n    <mat-tab label=\\\"PORTFOLIO\\\">\\n        <ng-template matTabContent>\\n            <app-portfolio [currentNavIndex]=\\\"navIndex\\\"></app-portfolio>\\n        </ng-template>\\n    </mat-tab>\\n    <mat-tab label=\\\"AFTER WORK\\\">\\n        <ng-template matTabContent>\\n            <app-after-work [currentNavIndex]=\\\"navIndex\\\"></app-after-work>\\n        </ng-template>\\n    </mat-tab>\\n</mat-tab-group>\\n\";","export default \"#mainTab ::ng-deep .mat-tab-label {\\n  background-color: unset;\\n}\\n#mainTab ::ng-deep .mat-tab-labels .mat-tab-label-active:not(.mat-tab-disabled) {\\n  opacity: 1;\\n}\\n@media screen and (max-width: 539px) {\\n  #mainTab ::ng-deep .mat-tab-label {\\n    padding: 0 16px;\\n  }\\n}\";","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { MainComponent } from \"./main/main.component\";\n\nconst routes: Routes = [{ path: \"\", component: MainComponent }];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class MainRoutingModule {}\n","import { Component, Input, OnInit } from \"@angular/core\";\nimport { Project } from \"./project.model\";\n\n@Component({\n    selector: \"app-portfolio-item\",\n    template: `\n    <div *ngIf=\"project && project[type]\" [ngClass]=\"project.exist ? 'topic-container' : 'topic-container topic-container-invisible'\">\n        <div class=\"overlay\">\n            <div class=\"topic-image-container\">\n                <div class=\"topic-image\" style=\"background-image: url('{{ project[type].image }}');\"></div>\n            </div>\n            <div class=\"topic\">\n                <h3 class=\"title\" matTooltip=\"{{ project.title }}\" matTooltipClass=\"title-tooltip\" [matTooltipShowDelay]=\"500\">{{ project.title }}</h3>\n                <div class=\"technologies\" matTooltip=\"{{ project[type].technologies.join(' | ') }}\" matTooltipClass=\"flex-tooltip\" [matTooltipShowDelay]=\"500\">\n                    <ng-container *ngFor=\"let tech of project[type].technologies\">\n                        <label class=\"tag-item\"\n                            ><a href=\"#\">#{{ tech }}</a></label\n                        >\n                    </ng-container>\n                </div>\n                <figure class=\"description\" matTooltip=\"{{ project.description }}\" matTooltipClass=\"normal-tooltip\" [matTooltipShowDelay]=\"500\">\n                    {{ project.description }}\n                </figure>\n                <div class=\"topic-footer\">\n                    <div class=\"date\">{{ project[type].date_end }}</div>\n                    <span></span>\n                    <ng-container *ngIf=\"type != 3 || min == 2; else type3\">\n                        <div class=\"topic-link\">\n                            <a *ngIf=\"project[type].demo\" href=\"{{ project[type].demo }}\" target=\"_blank\">Demo</a>\n                            <a *ngIf=\"project[type].source\" href=\"{{ project[type].source }}\" target=\"_blank\">Source</a>\n                            <a *ngIf=\"project[type].guide\" href=\"{{ project[type].guide }}\" target=\"_blank\">Guide</a>\n                        </div>\n                    </ng-container>\n                    <ng-template #type3>\n                        <div class=\"topic-link\">\n                            <a *ngIf=\"project[type].demo\" href=\"{{ project[type].demo }}\" target=\"_blank\">Demo</a>\n                            <a *ngIf=\"project[type].guide\" href=\"{{ project[type].guide }}\" target=\"_blank\">Client</a>\n                            <a *ngIf=\"project[type].source\" href=\"{{ project[type].source }}\" target=\"_blank\">Server</a>\n                        </div>\n                    </ng-template>\n                </div>\n            </div>\n        </div>\n    </div>`,\n    styleUrls: [\"./portfolio-item.component.scss\"],\n})\nexport class PortfolioItemComponent implements OnInit {\n    constructor() {}\n    type: number;\n    min: number;\n    @Input() project: Project;\n    ngOnInit(): void {\n        this.type = this.project.displayType;\n        this.min = Math.min(...this.project.projectTypes);\n    }\n}\n","export default \".topic-container {\\n  background-color: #daf2e5;\\n  min-height: 170px;\\n  margin-bottom: 15px;\\n  border: 1px solid #f29e03;\\n  border-radius: 10px;\\n  overflow: hidden;\\n  display: flex;\\n}\\n\\n.overlay {\\n  display: flex;\\n  background-color: rgba(255, 255, 255, 0.7);\\n}\\n\\n.topic-image-container {\\n  padding: 10px;\\n  margin-right: 10px;\\n}\\n\\n.topic-image {\\n  border-radius: 10px;\\n  width: 150px;\\n  height: 150px;\\n  background-repeat: no-repeat;\\n  background-size: cover;\\n  background-position: center;\\n  box-shadow: rgba(0, 0, 0, 0.15) 1.95px 1.95px 2.6px;\\n  background-color: white;\\n}\\n\\n.technologies {\\n  line-height: 1;\\n  max-height: 29px;\\n  overflow: hidden;\\n}\\n\\n.technologies label {\\n  margin-bottom: 5px;\\n}\\n\\n.technologies .tag-item {\\n  display: inline-block;\\n  background-color: #0f9d5830;\\n  border: 1px solid #0f9d5830;\\n  margin-right: 5px;\\n  border-radius: 5px;\\n  padding: 4px;\\n  min-width: 40px;\\n  text-align: center;\\n}\\n\\n.technologies a {\\n  text-decoration: none;\\n}\\n\\n.technologies a:hover {\\n  color: #f29e03 !important;\\n}\\n\\n.topic {\\n  display: flex;\\n  flex-direction: column;\\n  height: 100%;\\n  padding-right: 20px;\\n  padding-top: 10px;\\n  padding-bottom: 10px;\\n}\\n\\n.topic .title {\\n  font-size: 20px !important;\\n  font-weight: 500;\\n}\\n\\n.topic .description {\\n  margin-top: 10px;\\n  margin-bottom: 10px;\\n  overflow: hidden;\\n  text-align: justify;\\n  text-overflow: ellipsis;\\n  display: -webkit-box;\\n  -webkit-line-clamp: 3;\\n  -webkit-box-orient: vertical;\\n  line-height: normal;\\n  min-height: 3rem;\\n}\\n\\n.topic .topic-footer {\\n  display: flex;\\n}\\n\\n.topic .topic-footer .topic-link a {\\n  color: #00717b !important;\\n  margin-right: 10px;\\n}\\n\\n.topic .topic-footer span {\\n  margin: auto;\\n}\\n\\n.topic figure {\\n  margin: 14px 0px;\\n  text-align: justify;\\n}\\n\\n.topic-container-invisible {\\n  visibility: hidden;\\n}\\n\\n.topic-container-hiden {\\n  display: none !important;\\n}\\n\\n.update-next-time {\\n  display: flex;\\n  flex-direction: row;\\n  width: 100%;\\n  justify-content: center;\\n}\\n\\n.update-next-time div {\\n  margin: auto;\\n}\\n\\n@media screen and (max-width: 539px) {\\n  .topic-container {\\n    flex-direction: column;\\n  }\\n  .topic-container .topic-image {\\n    width: 100%;\\n  }\\n  .topic-container .topic-image-container {\\n    width: calc(100% - 20px);\\n  }\\n  .topic-container .topic {\\n    padding-left: 10px;\\n  }\\n\\n  .topic-container-invisible {\\n    display: none;\\n  }\\n\\n  .overlay {\\n    flex-direction: column;\\n  }\\n}\";","export default \"<div class=\\\"bounds\\\">\\n    <div class=\\\"inner-bounds\\\">\\n        <div class=\\\"content\\\">\\n            <h1 class=\\\"header\\\">\\n                <span class=\\\"header-sub-wrapper\\\"><span>#MY</span><span>PORTFOLIO</span></span>\\n                <mat-tab-group *ngIf=\\\"currentNavIndex == 1\\\" #portfolio mat-align-tabs=\\\"end\\\" [selectedIndex]=\\\"3\\\" (selectedTabChange)=\\\"tabChanged($event)\\\">\\n                    <mat-tab label=\\\"Frontend\\\"></mat-tab>\\n                    <mat-tab label=\\\"Backend\\\"></mat-tab>\\n                    <mat-tab label=\\\"Tool & App\\\"></mat-tab>\\n                    <mat-tab label=\\\"All\\\"></mat-tab>\\n                </mat-tab-group>\\n            </h1>\\n\\n            <div class=\\\"main-content\\\">\\n                <div class=\\\"topic-wrapper\\\">\\n                    <div *ngFor=\\\"let pair of listProjects$ | async\\\" class=\\\"topic-container-row\\\">\\n                        <app-portfolio-item [project]=\\\"pair[0]\\\" class=\\\"topic-container-left\\\"></app-portfolio-item>\\n                        <app-portfolio-item [project]=\\\"pair[1]\\\" class=\\\"topic-container-right\\\"></app-portfolio-item>\\n                    </div>\\n                    <mat-accordion>\\n                        <mat-expansion-panel [disabled]=\\\"!loadMore\\\" (opened)=\\\"panelOpenState = true\\\" (closed)=\\\"panelOpenState = false\\\">\\n                            <mat-expansion-panel-header> </mat-expansion-panel-header>\\n                            <!-- <p>I'm visible because I am open</p> -->\\n                            <div *ngFor=\\\"let pair of _listLoadMoreProjects$ | async\\\" class=\\\"topic-container-row\\\">\\n                                <app-portfolio-item [project]=\\\"pair[0]\\\" class=\\\"topic-container-left\\\"></app-portfolio-item>\\n                                <app-portfolio-item [project]=\\\"pair[1]\\\" class=\\\"topic-container-right\\\"></app-portfolio-item>\\n                            </div>\\n                        </mat-expansion-panel>\\n                    </mat-accordion>\\n                </div>\\n            </div>\\n            <app-footer></app-footer>\\n        </div>\\n    </div>\\n</div>\\n\";","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MainScreenService {\n\n  constructor(private httpClient: HttpClient) { }\n\n  getProjectList<T>(): Observable<T[]> {\n    return this.httpClient.get<T[]>(\"/assets/configs/portfolio.json\");\n  }\n\n  getBlogList<T>(): Observable<T[]> {\n    return this.httpClient.get<T[]>(\"/assets/configs/blogs.json\");\n  }\n}\n","import { Component, Input, OnInit } from \"@angular/core\";\nimport { MatTabChangeEvent } from \"@angular/material/tabs\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { MainScreenService } from \"../main-screen.service\";\nimport { Project } from \"./project.model\";\n\n@Component({\n    selector: \"app-portfolio\",\n    templateUrl: \"./portfolio.component.html\",\n    styleUrls: [\"./portfolio.component.scss\"],\n})\nexport class PortfolioComponent implements OnInit {\n    @Input()\n    currentNavIndex = 0;\n    panelOpenState = false;\n    loadMore = false;\n\n    cache: Project[] = [];\n    constructor(private service: MainScreenService) {}\n    _listProjects$: BehaviorSubject<Project[][]> = new BehaviorSubject([]);\n    listProjects$ = this._listProjects$.asObservable();\n    _listLoadMoreProjects$: BehaviorSubject<Project[][]> = new BehaviorSubject([]);\n    listLoadMoreProjects$ = this._listLoadMoreProjects$.asObservable();\n    ngOnInit(): void {\n        this.getListItem();\n    }\n    /**\n     * Get List\n     * @param type\n     */\n    getListItem(type: number = 3) {\n        if (this.cache.length === 0) {\n            this.service.getProjectList<Project>().subscribe((res) => {\n                this.cache = res;\n                this.resultHandler(res, type);\n            });\n        } else this.resultHandler(this.cache, type);\n    }\n    /**\n     * Handle result\n     * @param res\n     * @param type\n     */\n    resultHandler(res: Project[], type: number) {\n        let list = [];\n        this.loadMore = false;\n        res = res.filter((item) => item.projectTypes.indexOf(type) > -1);\n        res = res.map((item) => {\n            item.displayType = type;\n            return item;\n        });\n        while (res.length > 0) {\n            let chunk = res.splice(0, 2);\n            if (chunk.length === 1) chunk.push({ ...chunk[0], exist: false });\n            list.push(chunk);\n        }\n        this._listProjects$.next(list.slice(0, 2));\n        this._listLoadMoreProjects$.next([]);\n        if (list.length > 2) {\n            this.loadMore = true;\n            this._listLoadMoreProjects$.next(list.slice(2));\n        }\n    }\n    /**\n     * On Tab Change\n     * @param tab {tab, index}\n     */\n    tabChanged(tab: MatTabChangeEvent) {\n        this.getListItem(tab.index);\n    }\n}\n","export default \".topic-wrapper {\\n  display: flex;\\n  flex-direction: column;\\n}\\n.topic-wrapper .topic-container-row {\\n  display: flex;\\n  flex: 1 1 100%;\\n  width: 100%;\\n}\\n.topic-wrapper .topic-container-row app-portfolio-item {\\n  margin-left: 5px;\\n  margin-right: 5px;\\n  max-width: calc(50% - 10px);\\n  width: 100%;\\n}\\nmat-tab-group {\\n  margin-left: auto;\\n}\\n::ng-deep mat-accordion .mat-expansion-panel {\\n  background: none;\\n}\\n::ng-deep mat-accordion .mat-expansion-panel:not([class*=mat-elevation-z]) {\\n  box-shadow: none;\\n}\\n::ng-deep mat-accordion .mat-expansion-panel-body {\\n  padding: 0;\\n}\\n::ng-deep mat-accordion .mat-expansion-indicator::after {\\n  color: #f29e03;\\n  border-width: 0 3px 3px 0;\\n  padding: 5px;\\n}\\n::ng-deep mat-accordion .mat-content {\\n  margin-top: 10px;\\n  margin-right: 10px;\\n}\\n::ng-deep mat-accordion .mat-expansion-panel-header:not([aria-expanded=false]) .mat-content {\\n  margin-top: 0px;\\n}\\n::ng-deep mat-accordion .mat-expansion-panel-header:not([aria-disabled=true]) .mat-content {\\n  display: block;\\n  height: 3px;\\n  width: calc(100% - 75px);\\n  border-radius: 3px;\\n  margin-right: 10px;\\n  overflow: hidden;\\n  background: linear-gradient(to right, rgba(0, 0, 0, 0) 0%, #fff 30%, #f29e03 50%, #f29e03 55%, #fff 70%, #fff 100%);\\n  background-size: 200% auto;\\n  animation: shine 2s linear alternate-reverse;\\n}\\n@keyframes shine {\\n  to {\\n    background-position: 100% center;\\n  }\\n}\\n@media screen and (max-width: 1279px) {\\n  .bounds .header {\\n    flex-direction: column;\\n    align-items: center;\\n  }\\n  .bounds .header mat-tab-group {\\n    margin-left: 0px !important;\\n  }\\n\\n  .topic-wrapper .topic-container-row {\\n    align-items: center;\\n  }\\n  .topic-wrapper .topic-container-row app-portfolio-item {\\n    max-width: unset !important;\\n  }\\n}\\n@media screen and (max-width: 920px) {\\n  .topic-wrapper .topic-container-row {\\n    flex-direction: column;\\n  }\\n}\\n@media screen and (max-width: 539px) {\\n  .bounds .content .header .header-sub-wrapper {\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n  }\\n  .bounds .content ::ng-deep .mat-tab-label {\\n    padding: 0 16px;\\n  }\\n}\";","import { CommonModule } from \"@angular/common\";\nimport { HttpClientModule } from \"@angular/common/http\";\nimport { NgModule } from \"@angular/core\";\nimport { MatExpansionModule } from \"@angular/material/expansion\";\nimport { MatTabsModule } from \"@angular/material/tabs\";\nimport { MatTooltipModule } from \"@angular/material/tooltip\";\nimport { FooterModule } from \"../shared/footer/footer.module\";\nimport { AfterWorkModule } from \"./after-work/after-work.module\";\nimport { HelloComponent } from \"./hello/hello.component\";\nimport { MainRoutingModule } from \"./main-screen-routing.module\";\nimport { MainComponent } from \"./main/main.component\";\nimport { PortfolioItemComponent } from \"./portfolio/portfolio-item.component\";\nimport { PortfolioComponent } from \"./portfolio/portfolio.component\";\n\n@NgModule({\n    declarations: [HelloComponent, MainComponent, PortfolioComponent, PortfolioItemComponent],\n    imports: [\n        CommonModule,\n        MainRoutingModule,\n        MatTabsModule,\n        HttpClientModule,\n        MatTooltipModule,\n        FooterModule,\n        MatExpansionModule,\n        AfterWorkModule,\n    ],\n    providers: [],\n})\nexport class MainScreenModule {}\n"],"sourceRoot":"webpack:///"}