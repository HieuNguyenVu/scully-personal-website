{"version":3,"sources":["./node_modules/rxjs/_esm2015/internal/observable/forkJoin.js","./node_modules/@angular/forms/__ivy_ngcc__/fesm2015/forms.js","./src/app/main-screen/after-work/afterwork-item.component.ts","./src/app/main-screen/after-work/afterwork-item.component.html","./src/app/main-screen/after-work/afterwork-item.component.scss","./src/app/main-screen/after-work/afterwork-item.module.ts","./node_modules/rxjs/_esm2015/internal/operators/skip.js","./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/layout.js","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/tooltip.js","./src/app/shared/posts.service.ts","./src/app/main-screen/after-work/after-work.component.ts","./src/app/main-screen/after-work/after-work.component.html","./src/app/main-screen/after-work/after-work.component.scss","./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/overlay.js"],"names":["forkJoinInternal","sources","keys","Observable","subscriber","len","length","complete","values","Array","completed","emitted","i","source","from","hasValue","add","subscribe","next","value","error","err","reduce","result","key","NG_VALUE_ACCESSOR","CHECKBOX_VALUE_ACCESSOR","provide","useExisting","CheckboxControlValueAccessor","multi","_renderer","_elementRef","this","onChange","_","onTouched","setProperty","nativeElement","fn","isDisabled","ɵfac","t","ɵdir","type","selectors","hostBindings","rf","ctx","$event","target","checked","features","ctorParameters","DEFAULT_VALUE_ACCESSOR","DefaultValueAccessor","COMPOSITION_BUFFER_MODE","_compositionMode","_composing","userAgent","getUserAgent","test","toLowerCase","_isAndroid","normalizedValue","isEmptyInputValue","hasValidLength","_handleInput","_compositionStart","_compositionEnd","Boolean","decorators","args","NG_VALIDATORS","NG_ASYNC_VALIDATORS","EMAIL_REGEXP","min","control","parseFloat","isNaN","max","minLength","maxLength","pattern","nullValidator","regex","regexStr","charAt","RegExp","toString","validators","presentValidators","filter","isPresent","mergeErrors","executeValidators","first","isArray","isObject","Object","getPrototypeOf","prototype","map","resultSelector","pop","pipe","forkJoin","toObservable","o","r","obs","arrayOfErrors","res","forEach","errors","assign","validator","normalizeValidators","validate","isValidatorFn","c","composeValidators","compose","composeAsyncValidators","composeAsync","mergeValidators","controlValidators","dirValidator","getControlValidators","_rawValidators","getControlAsyncValidators","_rawAsyncValidators","AbstractControlDirective","_onDestroyCallbacks","valid","invalid","pending","disabled","enabled","pristine","dirty","touched","status","untouched","statusChanges","valueChanges","_composedValidatorFn","_composedAsyncValidatorFn","push","reset","errorCode","path","hasError","getError","ControlContainer","ɵControlContainer_BaseFactory","NgControl","super","arguments","_parent","name","valueAccessor","AbstractControlStatus","cd","_cd","_a","_b","_c","NgControlStatus","hostVars","ngClassUntouched","ngClassTouched","ngClassPristine","ngClassDirty","ngClassValid","ngClassInvalid","ngClassPending","NgControlStatusGroup","NUMBER_VALUE_ACCESSOR","NumberValueAccessor","RADIO_VALUE_ACCESSOR","RadioControlValueAccessor","RadioControlRegistry","_accessors","accessor","splice","_isSameGroup","fireUncheck","controlPair","_control","ɵprov","token","factory","_registry","_injector","get","_checkName","remove","_state","_fn","select","writeValue","formControlName","inputs","propDecorators","RANGE_VALUE_ACCESSOR","RangeValueAccessor","SELECT_VALUE_ACCESSOR","SelectControlValueAccessor","_buildValueString","id","slice","_optionMap","Map","_idCounter","_compareWith","is","_getOptionId","valueString","_getOptionValue","split","_extractId","has","compareWith","NgSelectOption","_element","_select","_registerOption","set","_setElementValue","delete","ngValue","SELECT_MULTIPLE_VALUE_ACCESSOR","SelectMultipleControlValueAccessor","_buildValueString$1","optionSelectedStateSetter","ids","v","opt","_setSelected","indexOf","selected","undefined","selectedOptions","options","item","val","_value","_extractId$1","ɵNgSelectMultipleOption","controlPath","parent","setUpControl","dir","setUpValidators","registerOnChange","newValue","_pendingValue","_pendingChange","_pendingDirty","updateOn","updateControl","setUpViewChangePipeline","emitModelEvent","viewToModelUpdate","_registerOnDestroy","_unregisterOnChange","setUpModelChangePipeline","registerOnTouched","_pendingTouched","markAsTouched","setUpBlurPipeline","setDisabledState","onDisabledChange","registerOnDisabledChange","_unregisterOnDisabledChange","setUpDisabledChangeHandler","cleanUpControl","noop","ngDevMode","cleanUpValidators","_invokeOnDestroyCallbacks","_registerOnCollectionChange","registerOnValidatorChange","handleOnValidatorChange","setValidators","asyncValidators","asyncValidator","setAsyncValidators","onValidatorChange","updateValueAndValidity","markAsDirty","setValue","emitModelToViewChange","setUpFormContainer","isPropertyUpdated","changes","viewModel","hasOwnProperty","change","isFirstChange","currentValue","BUILTIN_ACCESSORS","syncPendingControls","form","directives","_syncPendingControls","selectValueAccessor","valueAccessors","defaultAccessor","builtinAccessor","customAccessor","constructor","some","a","removeListItem","list","el","index","VALID","INVALID","PENDING","DISABLED","pickValidators","validatorOrOpts","isOptionsObj","coerceToValidator","pickAsyncValidators","coerceToAsyncValidator","_hasOwnPendingAsyncValidator","_onCollectionChange","_onDisabledChange","validatorFn","asyncValidatorFn","_updateOn","newValidator","opts","onlySelf","_forEachChild","markAllAsTouched","markAsUntouched","_updateTouched","markAsPristine","_updatePristine","emitEvent","emit","markAsPending","skipPristineCheck","_parentMarkedDirty","disable","_updateValue","_updateAncestors","changeFn","enable","_setInitialStatus","_cancelExistingSubscription","_runValidator","_calculateStatus","_runAsyncValidator","ctrl","_updateTreeValidity","_allControlsDisabled","_asyncValidationSubscription","setErrors","unsubscribe","_updateControlsErrors","delimiter","controlToFind","FormGroup","controls","FormArray","at","_find","x","_anyControlsHaveStatus","_anyControls","_anyControlsDirty","_anyControlsTouched","formState","parentDirty","FormControl","_onChange","_applyFormState","_setUpdateStrategy","_initObservables","emitViewToModelChange","condition","cb","_isBoxedValue","_setUpControls","setParent","registerControl","controlName","_checkAllValuesPresent","_throwIfControlMissing","patchValue","_reduceChildren","acc","getRawValue","subtreeUpdated","updated","child","Error","k","_reduceValue","contains","initValue","_registerControl","formDirectiveProvider","resolvedPromise","Promise","resolve","submitted","_directives","ngSubmit","then","container","_findContainer","removeControl","group","resetForm","onSubmit","onReset","outputs","exportAs","AbstractFormGroupDirective","_checkParentType","formDirective","addFormGroup","removeFormGroup","getFormGroup","ɵAbstractFormGroupDirective_BaseFactory","modelGroupProvider","NgModelGroup","_setValidators","_setAsyncValidators","formControlBinding","resolvedPromise$1","_registered","update","_checkForErrors","_setUpControl","_updateDisabled","model","_isStandalone","_setUpStandalone","addControl","standalone","disabledValue","ɵNgNoValidate","hostAttrs","NG_MODEL_WITH_FORM_CONTROL_WARNING","formControlBinding$1","_ngModelWarningConfig","_ngModelWarningSent","_isControlChanged","_ngModelWarningSentOnce","String","formDirectiveProvider$1","_checkFormPresent","_updateValidators","_updateDomValue","_updateRegistrations","_oldForm","newCtrl","formGroupNameProvider","FormGroupName","_hasInvalidParent","formArrayNameProvider","FormArrayName","addFormArray","removeFormArray","getFormArray","controlNameBinding","_added","updateModel","REQUIRED_VALIDATOR","RequiredValidator","CHECKBOX_REQUIRED_VALIDATOR","CheckboxRequiredValidator","_required","required","requiredTrue","ɵCheckboxRequiredValidator_BaseFactory","EMAIL_VALIDATOR","EmailValidator","_enabled","email","MIN_LENGTH_VALIDATOR","MinLengthValidator","_validator","_createValidator","minlength","parseInt","MAX_LENGTH_VALIDATOR","MaxLengthValidator","maxlength","PATTERN_VALIDATOR","PatternValidator","ɵInternalFormsSharedModule","ɵmod","ɵinj","ngJitMode","declarations","exports","FormBuilder","controlsConfig","_reduceControls","isAbstractControlOptions","_createControl","controlConfig","FormsModule","providers","imports","ReactiveFormsModule","ngModule","useValue","warnOnNgModelWithFormControl","AfterWorkItemComponent","selector","template","AfterWorkItemModule","SkipOperator","total","Subscriber","destination","count","LayoutModule","mediaQueriesForWebkitCompatibility","Set","mediaQueryStyleNode","MediaMatcher","_platform","_matchMedia","isBrowser","window","matchMedia","bind","noopMatchMedia","query","WEBKIT","document","createElement","setAttribute","head","appendChild","sheet","insertRule","e","console","createEmptyStyleRule","matches","media","addListener","removeListener","providedIn","_mediaMatcher","_zone","_queries","_destroySubject","Subject","splitQueries","mediaQuery","_registerQuery","mql","observables","observable","stateObservable","combineLatest","concat","take","lift","debounceTime","breakpointStates","response","breakpoints","output","observer","handler","run","startWith","takeUntil","queries","a1","a2","trim","Breakpoints","matTooltipAnimations","tooltipState","opacity","transform","offset","passiveListenerOptions","passive","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","overlay","scrollStrategies","reposition","scrollThrottle","MAT_TOOLTIP_DEFAULT_OPTIONS","showDelay","hideDelay","touchendHideDelay","_overlay","_scrollDispatcher","_viewContainerRef","_ngZone","_ariaDescriber","_focusMonitor","scrollStrategy","_dir","_defaultOptions","_document","_position","_disabled","_viewInitialized","_pointerExitEventsInitialized","touchGestures","_message","_passiveListeners","_destroyed","_handleKeydown","event","_isTooltipVisible","keyCode","preventDefault","stopPropagation","hide","_scrollStrategy","position","runOutsideAngular","addEventListener","_overlayRef","_updatePosition","_tooltipInstance","show","updatePosition","_setupPointerEnterEventsIfNeeded","removeDescription","_updateTooltipMessage","describe","message","_tooltipClass","_setTooltipClass","monitor","origin","clearTimeout","_touchstartTimeout","dispose","removeEventListener","listener","stopMonitoring","delay","_showTimeoutId","_hideTimeoutId","overlayRef","_createOverlay","_detach","_portal","attach","instance","afterHidden","isVisible","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","create","direction","positionStrategy","panelClass","detachments","hasAttached","detach","getConfig","_getOrigin","_getOverlayPosition","withPositions","main","fallback","isLtr","originPosition","originX","originY","y","_invertPosition","overlayPosition","overlayX","overlayY","_markForCheck","onMicrotaskEmpty","tooltipClass","_platformSupportsMouseEvents","_setupPointerExitEventsIfNeeded","_disableNativeGesturesIfNecessary","setTimeout","_addListeners","exitListeners","_wheelListener","touchendListener","listeners","IOS","ANDROID","elementUnderPointer","elementFromPoint","clientX","clientY","element","gestures","style","nodeName","userSelect","msUserSelect","webkitUserSelect","MozUserSelect","draggable","webkitUserDrag","touchAction","webkitTapHighlightColor","_changeDetectorRef","_breakpointObserver","_visibility","_closeOnInteraction","_onHide","_isHandset","observe","toState","markForCheck","ɵcmp","_handleBodyInteraction","decls","vars","consts","_animationStart","_animationDone","tmp_0_0","pipes","styles","encapsulation","data","animation","changeDetection","MatTooltipModule","PostsService","scullyService","links$","posts$","tags$","allRoutes$","scullyRoutes","scullyRoute","route","startsWith","sort","postA","postB","priority","routes","title","replace","links","scullyRoute2Project","posts","tags","post","flat","limit","mode","b","type_index","image","description","date_start","date_end","link","exist","published","Mode","ALL_STR","postsService","currentNavIndex","_posts","BehaviorSubject","asObservable","allPosts","allCurrentModePost","remains","selectedKeywords","allKeywords","searchFormControl","separatorKeysCodes","subcribed","keywords$","_filter","includes","getPosts","Number","MAX_VALUE","all","updateMode","displayPost","tech","updateFilter","keywords","tag","arrs","focus","keywordInput","documentElement","scrollTop","body","offsetHeight","scrollHeight","loadMore","takeTwoRow","news","getValue","takeData","tab","matTabGroup","filterValue","log","keyword","option","viewValue","OnPush","scrollBehaviorSupported","BlockScrollStrategy","_viewportRuler","_previousHTMLStyles","top","left","_isEnabled","_canBeEnabled","root","_previousScrollPosition","getViewportScrollPosition","classList","html","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","scroll","viewport","getViewportSize","height","scrollWidth","width","CloseScrollStrategy","_config","_scrollSubscription","stream","scrolled","threshold","_initialScrollPosition","scrollPosition","Math","abs","NoopScrollStrategy","isElementScrolledOutsideView","scrollContainers","containerBounds","outsideAbove","bottom","outsideBelow","outsideLeft","right","outsideRight","isElementClippedByScrolling","scrollContainerRect","clippedAbove","clippedBelow","clippedLeft","clippedRight","RepositionScrollStrategy","throttle","autoClose","overlayRect","overlayElement","getBoundingClientRect","ScrollStrategyOptions","close","config","block","OverlayConfig","hasBackdrop","backdropClass","disposeOnNavigation","configKeys","ConnectionPositionPair","offsetX","offsetY","ScrollingVisibility","ConnectedOverlayPositionChange","connectionPair","BaseOverlayDispatcher","_attachedOverlays","OverlayKeyboardDispatcher","_keydownListener","overlays","_keydownEvents","observers","_isAttached","OverlayOutsideClickDispatcher","_cursorStyleIsSet","_clickListener","composedPath","_outsidePointerEvents","_cursorOriginalValue","cursor","isTestEnvironment","__karma__","jasmine","OverlayContainer","_containerElement","parentNode","removeChild","_createContainer","containerClass","oppositePlatformContainers","querySelectorAll","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_outsideClickDispatcher","_backdropElement","_backdropClick","_attachments","_detachments","_locationChanges","EMPTY","_backdropClickHandler","_positionStrategy","portal","attachResult","parentElement","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","_togglePointerEvents","_attachBackdrop","_toggleClasses","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","_disposeScrollStrategy","apply","sizeConfig","classes","getDirection","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","showingClass","insertBefore","requestAnimationFrame","nextSibling","timeoutId","backdropToDetach","finishDetach","cssClasses","isAdd","cssClass","subscription","children","boundingBoxClass","cssUnitPattern","FlexibleConnectedPositionStrategy","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","setOrigin","_validatePositions","hostElement","_boundingBox","_isDisposed","_isInitialRender","_lastPosition","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","originRect","viewportRect","flexibleFits","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","scrollables","positions","margin","flexibleDimensions","growAfterOpen","canPush","isLocked","_origin","_transformOriginSelector","startX","_isRtl","endX","overlayStartX","overlayStartY","point","rawOverlayRect","getRoundedBoundingClientRect","_getOffset","leftOverflow","rightOverflow","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","verticalFit","horizontalFit","start","overflowRight","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","_getScrollVisibility","changeEvent","elements","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","previousHeight","isBoundedByRightViewportEdge","previousWidth","_hasExactPosition","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","_pushOverlayOnScreen","virtualKeyboardOffset","getContainerElement","documentHeight","clientHeight","horizontalStyleProperty","documentWidth","clientWidth","originBounds","overlayBounds","scrollContainerBounds","scrollable","getElementRef","isOriginClipped","isOriginOutsideView","isOverlayOutsideView","overflows","currentOverflow","axis","Element","input","units","clientRect","floor","ConnectedPositionStrategy","originPos","overlayPos","viewportRuler","platform","overlayContainer","withPush","withFallbackPosition","onPositionChange","_direction","setDirection","withDefaultOffsetX","withDefaultOffsetY","withLockedPosition","wrapperClass","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","updateSize","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","marginLeft","marginTop","marginBottom","marginRight","OverlayPositionBuilder","elementRef","nextUniqueId","Overlay","_componentFactoryResolver","_positionBuilder","_directionality","host","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","_appRef","defaultPositionList","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","CdkOverlayOrigin","CdkConnectedOverlay","templateRef","viewContainerRef","scrollStrategyFactory","_hasBackdrop","_lockPosition","_flexibleDimensions","_push","_backdropSubscription","_attachSubscription","_detachSubscription","_positionSubscription","viewportMargin","open","disableClose","backdropClick","positionChange","overlayKeydown","overlayOutsideClick","_templatePortal","_scrollStrategyFactory","_updatePositionStrategy","_attachOverlay","_detachOverlay","_buildConfig","attachments","keydownEvents","outsidePointerEvents","_createPositionStrategy","currentPosition","withGrowAfterOpen","lockPosition","transformOriginSelector","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","OverlayModule","FullscreenOverlayContainer","ngOnDestroy","_fullScreenEventName","_fullScreenListener","_adjustParentForFullscreenChange","_addFullscreenChangeListener","getFullscreenElement","eventName","_getEventName","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement"],"mappings":"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","file":"1.f9c6497429454e334c07.js","sourcesContent":["import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { map } from '../operators/map';\nimport { isObject } from '../util/isObject';\nimport { from } from './from';\nexport function forkJoin(...sources) {\n    if (sources.length === 1) {\n        const first = sources[0];\n        if (isArray(first)) {\n            return forkJoinInternal(first, null);\n        }\n        if (isObject(first) && Object.getPrototypeOf(first) === Object.prototype) {\n            const keys = Object.keys(first);\n            return forkJoinInternal(keys.map(key => first[key]), keys);\n        }\n    }\n    if (typeof sources[sources.length - 1] === 'function') {\n        const resultSelector = sources.pop();\n        sources = (sources.length === 1 && isArray(sources[0])) ? sources[0] : sources;\n        return forkJoinInternal(sources, null).pipe(map((args) => resultSelector(...args)));\n    }\n    return forkJoinInternal(sources, null);\n}\nfunction forkJoinInternal(sources, keys) {\n    return new Observable(subscriber => {\n        const len = sources.length;\n        if (len === 0) {\n            subscriber.complete();\n            return;\n        }\n        const values = new Array(len);\n        let completed = 0;\n        let emitted = 0;\n        for (let i = 0; i < len; i++) {\n            const source = from(sources[i]);\n            let hasValue = false;\n            subscriber.add(source.subscribe({\n                next: value => {\n                    if (!hasValue) {\n                        hasValue = true;\n                        emitted++;\n                    }\n                    values[i] = value;\n                },\n                error: err => subscriber.error(err),\n                complete: () => {\n                    completed++;\n                    if (completed === len || !hasValue) {\n                        if (emitted === len) {\n                            subscriber.next(keys ?\n                                keys.reduce((result, key, i) => (result[key] = values[i], result), {}) :\n                                values);\n                        }\n                        subscriber.complete();\n                    }\n                }\n            }));\n        }\n    });\n}\n//# sourceMappingURL=forkJoin.js.map","/**\n * @license Angular v11.0.9\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { InjectionToken, forwardRef, Directive, Renderer2, ElementRef, Optional, Inject, ɵisPromise, ɵisObservable, Self, Injectable, Injector, Input, Host, EventEmitter, SkipSelf, Output, NgModule, Version } from '@angular/core';\nimport { ɵgetDOM } from '@angular/common';\nimport { forkJoin, from } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to provide a `ControlValueAccessor` for form controls.\n *\n * See `DefaultValueAccessor` for how to implement one.\n *\n * @publicApi\n */\nimport * as ɵngcc0 from '@angular/core';\nconst NG_VALUE_ACCESSOR = new InjectionToken('NgValueAccessor');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst CHECKBOX_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CheckboxControlValueAccessor),\n    multi: true,\n};\n/**\n * @description\n * A `ControlValueAccessor` for writing a value and listening to changes on a checkbox input\n * element.\n *\n * @usageNotes\n *\n * ### Using a checkbox with a reactive form.\n *\n * The following example shows how to use a checkbox with a reactive form.\n *\n * ```ts\n * const rememberLoginControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"checkbox\" [formControl]=\"rememberLoginControl\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass CheckboxControlValueAccessor {\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * The registered callback function called when a change event occurs on the input element.\n         * @nodoc\n         */\n        this.onChange = (_) => { };\n        /**\n         * The registered callback function called when a blur event occurs on the input element.\n         * @nodoc\n         */\n        this.onTouched = () => { };\n    }\n    /**\n     * Sets the \"checked\" property on the input element.\n     * @nodoc\n     */\n    writeValue(value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'checked', value);\n    }\n    /**\n     * Registers a function called when the control value changes.\n     * @nodoc\n     */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    /**\n     * Registers a function called when the control is touched.\n     * @nodoc\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the \"disabled\" property on the input element.\n     * @nodoc\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n}\nCheckboxControlValueAccessor.ɵfac = function CheckboxControlValueAccessor_Factory(t) { return new (t || CheckboxControlValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCheckboxControlValueAccessor.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CheckboxControlValueAccessor, selectors: [[\"input\", \"type\", \"checkbox\", \"formControlName\", \"\"], [\"input\", \"type\", \"checkbox\", \"formControl\", \"\"], [\"input\", \"type\", \"checkbox\", \"ngModel\", \"\"]], hostBindings: function CheckboxControlValueAccessor_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"change\", function CheckboxControlValueAccessor_change_HostBindingHandler($event) { return ctx.onChange($event.target.checked); })(\"blur\", function CheckboxControlValueAccessor_blur_HostBindingHandler() { return ctx.onTouched(); });\n    } }, features: [ɵngcc0.ɵɵProvidersFeature([CHECKBOX_VALUE_ACCESSOR])] });\nCheckboxControlValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CheckboxControlValueAccessor, [{\n        type: Directive,\n        args: [{\n                selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n                host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },\n                providers: [CHECKBOX_VALUE_ACCESSOR]\n            }]\n    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst DEFAULT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => DefaultValueAccessor),\n    multi: true\n};\n/**\n * We must check whether the agent is Android because composition events\n * behave differently between iOS and Android.\n */\nfunction _isAndroid() {\n    const userAgent = ɵgetDOM() ? ɵgetDOM().getUserAgent() : '';\n    return /android (\\d+)/.test(userAgent.toLowerCase());\n}\n/**\n * @description\n * Provide this token to control if form directives buffer IME input until\n * the \"compositionend\" event occurs.\n * @publicApi\n */\nconst COMPOSITION_BUFFER_MODE = new InjectionToken('CompositionEventMode');\n/**\n * @description\n *\n * {@searchKeywords ngDefaultControl}\n *\n * The default `ControlValueAccessor` for writing a value and listening to changes on input\n * elements. The accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * @usageNotes\n *\n * ### Using the default value accessor\n *\n * The following example shows how to use an input element that activates the default value accessor\n * (in this case, a text field).\n *\n * ```ts\n * const firstNameControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"text\" [formControl]=\"firstNameControl\">\n * ```\n *\n * This value accessor is used by default for `<input type=\"text\">` and `<textarea>` elements, but\n * you could also use it for custom components that have similar behavior and do not require special\n * processing. In order to attach the default value accessor to a custom element, add the\n * `ngDefaultControl` attribute as shown below.\n *\n * ```\n * <custom-input-component ngDefaultControl [(ngModel)]=\"value\"></custom-input-component>\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass DefaultValueAccessor {\n    constructor(_renderer, _elementRef, _compositionMode) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._compositionMode = _compositionMode;\n        /**\n         * The registered callback function called when an input event occurs on the input element.\n         * @nodoc\n         */\n        this.onChange = (_) => { };\n        /**\n         * The registered callback function called when a blur event occurs on the input element.\n         * @nodoc\n         */\n        this.onTouched = () => { };\n        /** Whether the user is creating a composition string (IME events). */\n        this._composing = false;\n        if (this._compositionMode == null) {\n            this._compositionMode = !_isAndroid();\n        }\n    }\n    /**\n     * Sets the \"value\" property on the input element.\n     * @nodoc\n     */\n    writeValue(value) {\n        const normalizedValue = value == null ? '' : value;\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n    }\n    /**\n     * Registers a function called when the control value changes.\n     * @nodoc\n     */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    /**\n     * Registers a function called when the control is touched.\n     * @nodoc\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the \"disabled\" property on the input element.\n     * @nodoc\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    /** @internal */\n    _handleInput(value) {\n        if (!this._compositionMode || (this._compositionMode && !this._composing)) {\n            this.onChange(value);\n        }\n    }\n    /** @internal */\n    _compositionStart() {\n        this._composing = true;\n    }\n    /** @internal */\n    _compositionEnd(value) {\n        this._composing = false;\n        this._compositionMode && this.onChange(value);\n    }\n}\nDefaultValueAccessor.ɵfac = function DefaultValueAccessor_Factory(t) { return new (t || DefaultValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(COMPOSITION_BUFFER_MODE, 8)); };\nDefaultValueAccessor.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DefaultValueAccessor, selectors: [[\"input\", \"formControlName\", \"\", 3, \"type\", \"checkbox\"], [\"textarea\", \"formControlName\", \"\"], [\"input\", \"formControl\", \"\", 3, \"type\", \"checkbox\"], [\"textarea\", \"formControl\", \"\"], [\"input\", \"ngModel\", \"\", 3, \"type\", \"checkbox\"], [\"textarea\", \"ngModel\", \"\"], [\"\", \"ngDefaultControl\", \"\"]], hostBindings: function DefaultValueAccessor_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function DefaultValueAccessor_input_HostBindingHandler($event) { return ctx._handleInput($event.target.value); })(\"blur\", function DefaultValueAccessor_blur_HostBindingHandler() { return ctx.onTouched(); })(\"compositionstart\", function DefaultValueAccessor_compositionstart_HostBindingHandler() { return ctx._compositionStart(); })(\"compositionend\", function DefaultValueAccessor_compositionend_HostBindingHandler($event) { return ctx._compositionEnd($event.target.value); });\n    } }, features: [ɵngcc0.ɵɵProvidersFeature([DEFAULT_VALUE_ACCESSOR])] });\nDefaultValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef },\n    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DefaultValueAccessor, [{\n        type: Directive,\n        args: [{\n                selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n                // TODO: vsavkin replace the above selector with the one below it once\n                // https://github.com/angular/angular/issues/3011 is implemented\n                // selector: '[ngModel],[formControl],[formControlName]',\n                host: {\n                    '(input)': '$any(this)._handleInput($event.target.value)',\n                    '(blur)': 'onTouched()',\n                    '(compositionstart)': '$any(this)._compositionStart()',\n                    '(compositionend)': '$any(this)._compositionEnd($event.target.value)'\n                },\n                providers: [DEFAULT_VALUE_ACCESSOR]\n            }]\n    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: Boolean, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [COMPOSITION_BUFFER_MODE]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction isEmptyInputValue(value) {\n    // we don't check for string here so it also works with arrays\n    return value == null || value.length === 0;\n}\nfunction hasValidLength(value) {\n    // non-strict comparison is intentional, to check for both `null` and `undefined` values\n    return value != null && typeof value.length === 'number';\n}\n/**\n * @description\n * An `InjectionToken` for registering additional synchronous validators used with\n * `AbstractControl`s.\n *\n * @see `NG_ASYNC_VALIDATORS`\n *\n * @usageNotes\n *\n * ### Providing a custom validator\n *\n * The following example registers a custom validator directive. Adding the validator to the\n * existing collection of validators requires the `multi: true` option.\n *\n * ```typescript\n * @Directive({\n *   selector: '[customValidator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(control: AbstractControl): ValidationErrors | null {\n *     return { 'custom': true };\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nconst NG_VALIDATORS = new InjectionToken('NgValidators');\n/**\n * @description\n * An `InjectionToken` for registering additional asynchronous validators used with\n * `AbstractControl`s.\n *\n * @see `NG_VALIDATORS`\n *\n * @publicApi\n */\nconst NG_ASYNC_VALIDATORS = new InjectionToken('NgAsyncValidators');\n/**\n * A regular expression that matches valid e-mail addresses.\n *\n * At a high level, this regexp matches e-mail addresses of the format `local-part@tld`, where:\n * - `local-part` consists of one or more of the allowed characters (alphanumeric and some\n *   punctuation symbols).\n * - `local-part` cannot begin or end with a period (`.`).\n * - `local-part` cannot be longer than 64 characters.\n * - `tld` consists of one or more `labels` separated by periods (`.`). For example `localhost` or\n *   `foo.com`.\n * - A `label` consists of one or more of the allowed characters (alphanumeric, dashes (`-`) and\n *   periods (`.`)).\n * - A `label` cannot begin or end with a dash (`-`) or a period (`.`).\n * - A `label` cannot be longer than 63 characters.\n * - The whole address cannot be longer than 254 characters.\n *\n * ## Implementation background\n *\n * This regexp was ported over from AngularJS (see there for git history):\n * https://github.com/angular/angular.js/blob/c133ef836/src/ng/directive/input.js#L27\n * It is based on the\n * [WHATWG version](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address) with\n * some enhancements to incorporate more RFC rules (such as rules related to domain names and the\n * lengths of different parts of the address). The main differences from the WHATWG version are:\n *   - Disallow `local-part` to begin or end with a period (`.`).\n *   - Disallow `local-part` length to exceed 64 characters.\n *   - Disallow total address length to exceed 254 characters.\n *\n * See [this commit](https://github.com/angular/angular.js/commit/f3f5cf72e) for more details.\n */\nconst EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n/**\n * @description\n * Provides a set of built-in validators that can be used by form controls.\n *\n * A validator is a function that processes a `FormControl` or collection of\n * controls and returns an error map or null. A null map means that validation has passed.\n *\n * @see [Form Validation](/guide/form-validation)\n *\n * @publicApi\n */\nclass Validators {\n    /**\n     * @description\n     * Validator that requires the control's value to be greater than or equal to the provided number.\n     * The validator exists only as a function and not as a directive.\n     *\n     * @usageNotes\n     *\n     * ### Validate against a minimum of 3\n     *\n     * ```typescript\n     * const control = new FormControl(2, Validators.min(3));\n     *\n     * console.log(control.errors); // {min: {min: 3, actual: 2}}\n     * ```\n     *\n     * @returns A validator function that returns an error map with the\n     * `min` property if the validation check fails, otherwise `null`.\n     *\n     * @see `updateValueAndValidity()`\n     *\n     */\n    static min(min) {\n        return (control) => {\n            if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            const value = parseFloat(control.value);\n            // Controls with NaN values after parsing should be treated as not having a\n            // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min\n            return !isNaN(value) && value < min ? { 'min': { 'min': min, 'actual': control.value } } : null;\n        };\n    }\n    /**\n     * @description\n     * Validator that requires the control's value to be less than or equal to the provided number.\n     * The validator exists only as a function and not as a directive.\n     *\n     * @usageNotes\n     *\n     * ### Validate against a maximum of 15\n     *\n     * ```typescript\n     * const control = new FormControl(16, Validators.max(15));\n     *\n     * console.log(control.errors); // {max: {max: 15, actual: 16}}\n     * ```\n     *\n     * @returns A validator function that returns an error map with the\n     * `max` property if the validation check fails, otherwise `null`.\n     *\n     * @see `updateValueAndValidity()`\n     *\n     */\n    static max(max) {\n        return (control) => {\n            if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            const value = parseFloat(control.value);\n            // Controls with NaN values after parsing should be treated as not having a\n            // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max\n            return !isNaN(value) && value > max ? { 'max': { 'max': max, 'actual': control.value } } : null;\n        };\n    }\n    /**\n     * @description\n     * Validator that requires the control have a non-empty value.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field is non-empty\n     *\n     * ```typescript\n     * const control = new FormControl('', Validators.required);\n     *\n     * console.log(control.errors); // {required: true}\n     * ```\n     *\n     * @returns An error map with the `required` property\n     * if the validation check fails, otherwise `null`.\n     *\n     * @see `updateValueAndValidity()`\n     *\n     */\n    static required(control) {\n        return isEmptyInputValue(control.value) ? { 'required': true } : null;\n    }\n    /**\n     * @description\n     * Validator that requires the control's value be true. This validator is commonly\n     * used for required checkboxes.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field value is true\n     *\n     * ```typescript\n     * const control = new FormControl('', Validators.requiredTrue);\n     *\n     * console.log(control.errors); // {required: true}\n     * ```\n     *\n     * @returns An error map that contains the `required` property\n     * set to `true` if the validation check fails, otherwise `null`.\n     *\n     * @see `updateValueAndValidity()`\n     *\n     */\n    static requiredTrue(control) {\n        return control.value === true ? null : { 'required': true };\n    }\n    /**\n     * @description\n     * Validator that requires the control's value pass an email validation test.\n     *\n     * Tests the value using a [regular\n     * expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)\n     * pattern suitable for common usecases. The pattern is based on the definition of a valid email\n     * address in the [WHATWG HTML\n     * specification](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address) with\n     * some enhancements to incorporate more RFC rules (such as rules related to domain names and the\n     * lengths of different parts of the address).\n     *\n     * The differences from the WHATWG version include:\n     * - Disallow `local-part` (the part before the `@` symbol) to begin or end with a period (`.`).\n     * - Disallow `local-part` to be longer than 64 characters.\n     * - Disallow the whole address to be longer than 254 characters.\n     *\n     * If this pattern does not satisfy your business needs, you can use `Validators.pattern()` to\n     * validate the value against a different pattern.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field matches a valid email pattern\n     *\n     * ```typescript\n     * const control = new FormControl('bad@', Validators.email);\n     *\n     * console.log(control.errors); // {email: true}\n     * ```\n     *\n     * @returns An error map with the `email` property\n     * if the validation check fails, otherwise `null`.\n     *\n     * @see `updateValueAndValidity()`\n     *\n     */\n    static email(control) {\n        if (isEmptyInputValue(control.value)) {\n            return null; // don't validate empty values to allow optional controls\n        }\n        return EMAIL_REGEXP.test(control.value) ? null : { 'email': true };\n    }\n    /**\n     * @description\n     * Validator that requires the length of the control's value to be greater than or equal\n     * to the provided minimum length. This validator is also provided by default if you use the\n     * the HTML5 `minlength` attribute. Note that the `minLength` validator is intended to be used\n     * only for types that have a numeric `length` property, such as strings or arrays. The\n     * `minLength` validator logic is also not invoked for values when their `length` property is 0\n     * (for example in case of an empty string or an empty array), to support optional controls. You\n     * can use the standard `required` validator if empty values should not be considered valid.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field has a minimum of 3 characters\n     *\n     * ```typescript\n     * const control = new FormControl('ng', Validators.minLength(3));\n     *\n     * console.log(control.errors); // {minlength: {requiredLength: 3, actualLength: 2}}\n     * ```\n     *\n     * ```html\n     * <input minlength=\"5\">\n     * ```\n     *\n     * @returns A validator function that returns an error map with the\n     * `minlength` property if the validation check fails, otherwise `null`.\n     *\n     * @see `updateValueAndValidity()`\n     *\n     */\n    static minLength(minLength) {\n        return (control) => {\n            if (isEmptyInputValue(control.value) || !hasValidLength(control.value)) {\n                // don't validate empty values to allow optional controls\n                // don't validate values without `length` property\n                return null;\n            }\n            return control.value.length < minLength ?\n                { 'minlength': { 'requiredLength': minLength, 'actualLength': control.value.length } } :\n                null;\n        };\n    }\n    /**\n     * @description\n     * Validator that requires the length of the control's value to be less than or equal\n     * to the provided maximum length. This validator is also provided by default if you use the\n     * the HTML5 `maxlength` attribute. Note that the `maxLength` validator is intended to be used\n     * only for types that have a numeric `length` property, such as strings or arrays.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field has maximum of 5 characters\n     *\n     * ```typescript\n     * const control = new FormControl('Angular', Validators.maxLength(5));\n     *\n     * console.log(control.errors); // {maxlength: {requiredLength: 5, actualLength: 7}}\n     * ```\n     *\n     * ```html\n     * <input maxlength=\"5\">\n     * ```\n     *\n     * @returns A validator function that returns an error map with the\n     * `maxlength` property if the validation check fails, otherwise `null`.\n     *\n     * @see `updateValueAndValidity()`\n     *\n     */\n    static maxLength(maxLength) {\n        return (control) => {\n            return hasValidLength(control.value) && control.value.length > maxLength ?\n                { 'maxlength': { 'requiredLength': maxLength, 'actualLength': control.value.length } } :\n                null;\n        };\n    }\n    /**\n     * @description\n     * Validator that requires the control's value to match a regex pattern. This validator is also\n     * provided by default if you use the HTML5 `pattern` attribute.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field only contains letters or spaces\n     *\n     * ```typescript\n     * const control = new FormControl('1', Validators.pattern('[a-zA-Z ]*'));\n     *\n     * console.log(control.errors); // {pattern: {requiredPattern: '^[a-zA-Z ]*$', actualValue: '1'}}\n     * ```\n     *\n     * ```html\n     * <input pattern=\"[a-zA-Z ]*\">\n     * ```\n     *\n     * ### Pattern matching with the global or sticky flag\n     *\n     * `RegExp` objects created with the `g` or `y` flags that are passed into `Validators.pattern`\n     * can produce different results on the same input when validations are run consecutively. This is\n     * due to how the behavior of `RegExp.prototype.test` is\n     * specified in [ECMA-262](https://tc39.es/ecma262/#sec-regexpbuiltinexec)\n     * (`RegExp` preserves the index of the last match when the global or sticky flag is used).\n     * Due to this behavior, it is recommended that when using\n     * `Validators.pattern` you **do not** pass in a `RegExp` object with either the global or sticky\n     * flag enabled.\n     *\n     * ```typescript\n     * // Not recommended (since the `g` flag is used)\n     * const controlOne = new FormControl('1', Validators.pattern(/foo/g));\n     *\n     * // Good\n     * const controlTwo = new FormControl('1', Validators.pattern(/foo/));\n     * ```\n     *\n     * @param pattern A regular expression to be used as is to test the values, or a string.\n     * If a string is passed, the `^` character is prepended and the `$` character is\n     * appended to the provided string (if not already present), and the resulting regular\n     * expression is used to test the values.\n     *\n     * @returns A validator function that returns an error map with the\n     * `pattern` property if the validation check fails, otherwise `null`.\n     *\n     * @see `updateValueAndValidity()`\n     *\n     */\n    static pattern(pattern) {\n        if (!pattern)\n            return Validators.nullValidator;\n        let regex;\n        let regexStr;\n        if (typeof pattern === 'string') {\n            regexStr = '';\n            if (pattern.charAt(0) !== '^')\n                regexStr += '^';\n            regexStr += pattern;\n            if (pattern.charAt(pattern.length - 1) !== '$')\n                regexStr += '$';\n            regex = new RegExp(regexStr);\n        }\n        else {\n            regexStr = pattern.toString();\n            regex = pattern;\n        }\n        return (control) => {\n            if (isEmptyInputValue(control.value)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            const value = control.value;\n            return regex.test(value) ? null :\n                { 'pattern': { 'requiredPattern': regexStr, 'actualValue': value } };\n        };\n    }\n    /**\n     * @description\n     * Validator that performs no operation.\n     *\n     * @see `updateValueAndValidity()`\n     *\n     */\n    static nullValidator(control) {\n        return null;\n    }\n    static compose(validators) {\n        if (!validators)\n            return null;\n        const presentValidators = validators.filter(isPresent);\n        if (presentValidators.length == 0)\n            return null;\n        return function (control) {\n            return mergeErrors(executeValidators(control, presentValidators));\n        };\n    }\n    /**\n     * @description\n     * Compose multiple async validators into a single function that returns the union\n     * of the individual error objects for the provided control.\n     *\n     * @returns A validator function that returns an error map with the\n     * merged error objects of the async validators if the validation check fails, otherwise `null`.\n     *\n     * @see `updateValueAndValidity()`\n     *\n     */\n    static composeAsync(validators) {\n        if (!validators)\n            return null;\n        const presentValidators = validators.filter(isPresent);\n        if (presentValidators.length == 0)\n            return null;\n        return function (control) {\n            const observables = executeValidators(control, presentValidators).map(toObservable);\n            return forkJoin(observables).pipe(map(mergeErrors));\n        };\n    }\n}\nfunction isPresent(o) {\n    return o != null;\n}\nfunction toObservable(r) {\n    const obs = ɵisPromise(r) ? from(r) : r;\n    if (!(ɵisObservable(obs)) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw new Error(`Expected validator to return Promise or Observable.`);\n    }\n    return obs;\n}\nfunction mergeErrors(arrayOfErrors) {\n    let res = {};\n    // Not using Array.reduce here due to a Chrome 80 bug\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=1049982\n    arrayOfErrors.forEach((errors) => {\n        res = errors != null ? Object.assign(Object.assign({}, res), errors) : res;\n    });\n    return Object.keys(res).length === 0 ? null : res;\n}\nfunction executeValidators(control, validators) {\n    return validators.map(validator => validator(control));\n}\nfunction isValidatorFn(validator) {\n    return !validator.validate;\n}\n/**\n * Given the list of validators that may contain both functions as well as classes, return the list\n * of validator functions (convert validator classes into validator functions). This is needed to\n * have consistent structure in validators list before composing them.\n *\n * @param validators The set of validators that may contain validators both in plain function form\n *     as well as represented as a validator class.\n */\nfunction normalizeValidators(validators) {\n    return validators.map(validator => {\n        return isValidatorFn(validator) ?\n            validator :\n            ((c) => validator.validate(c));\n    });\n}\n/**\n * Merges synchronous validators into a single validator function (combined using\n * `Validators.compose`).\n */\nfunction composeValidators(validators) {\n    return validators != null ? Validators.compose(normalizeValidators(validators)) :\n        null;\n}\n/**\n * Merges asynchronous validators into a single validator function (combined using\n * `Validators.composeAsync`).\n */\nfunction composeAsyncValidators(validators) {\n    return validators != null ?\n        Validators.composeAsync(normalizeValidators(validators)) :\n        null;\n}\n/**\n * Merges raw control validators with a given directive validator and returns the combined list of\n * validators as an array.\n */\nfunction mergeValidators(controlValidators, dirValidator) {\n    if (controlValidators === null)\n        return [dirValidator];\n    return Array.isArray(controlValidators) ? [...controlValidators, dirValidator] :\n        [controlValidators, dirValidator];\n}\n/**\n * Retrieves the list of raw synchronous validators attached to a given control.\n */\nfunction getControlValidators(control) {\n    return control._rawValidators;\n}\n/**\n * Retrieves the list of raw asynchronous validators attached to a given control.\n */\nfunction getControlAsyncValidators(control) {\n    return control._rawAsyncValidators;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n * Base class for control directives.\n *\n * This class is only used internally in the `ReactiveFormsModule` and the `FormsModule`.\n *\n * @publicApi\n */\nclass AbstractControlDirective {\n    constructor() {\n        /**\n         * Set of synchronous validators as they were provided while calling `setValidators` function.\n         * @internal\n         */\n        this._rawValidators = [];\n        /**\n         * Set of asynchronous validators as they were provided while calling `setAsyncValidators`\n         * function.\n         * @internal\n         */\n        this._rawAsyncValidators = [];\n        /*\n         * The set of callbacks to be invoked when directive instance is being destroyed.\n         */\n        this._onDestroyCallbacks = [];\n    }\n    /**\n     * @description\n     * Reports the value of the control if it is present, otherwise null.\n     */\n    get value() {\n        return this.control ? this.control.value : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is valid. A control is considered valid if no\n     * validation errors exist with the current value.\n     * If the control is not present, null is returned.\n     */\n    get valid() {\n        return this.control ? this.control.valid : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is invalid, meaning that an error exists in the input value.\n     * If the control is not present, null is returned.\n     */\n    get invalid() {\n        return this.control ? this.control.invalid : null;\n    }\n    /**\n     * @description\n     * Reports whether a control is pending, meaning that that async validation is occurring and\n     * errors are not yet available for the input value. If the control is not present, null is\n     * returned.\n     */\n    get pending() {\n        return this.control ? this.control.pending : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is disabled, meaning that the control is disabled\n     * in the UI and is exempt from validation checks and excluded from aggregate\n     * values of ancestor controls. If the control is not present, null is returned.\n     */\n    get disabled() {\n        return this.control ? this.control.disabled : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is enabled, meaning that the control is included in ancestor\n     * calculations of validity or value. If the control is not present, null is returned.\n     */\n    get enabled() {\n        return this.control ? this.control.enabled : null;\n    }\n    /**\n     * @description\n     * Reports the control's validation errors. If the control is not present, null is returned.\n     */\n    get errors() {\n        return this.control ? this.control.errors : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is pristine, meaning that the user has not yet changed\n     * the value in the UI. If the control is not present, null is returned.\n     */\n    get pristine() {\n        return this.control ? this.control.pristine : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is dirty, meaning that the user has changed\n     * the value in the UI. If the control is not present, null is returned.\n     */\n    get dirty() {\n        return this.control ? this.control.dirty : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is touched, meaning that the user has triggered\n     * a `blur` event on it. If the control is not present, null is returned.\n     */\n    get touched() {\n        return this.control ? this.control.touched : null;\n    }\n    /**\n     * @description\n     * Reports the validation status of the control. Possible values include:\n     * 'VALID', 'INVALID', 'DISABLED', and 'PENDING'.\n     * If the control is not present, null is returned.\n     */\n    get status() {\n        return this.control ? this.control.status : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is untouched, meaning that the user has not yet triggered\n     * a `blur` event on it. If the control is not present, null is returned.\n     */\n    get untouched() {\n        return this.control ? this.control.untouched : null;\n    }\n    /**\n     * @description\n     * Returns a multicasting observable that emits a validation status whenever it is\n     * calculated for the control. If the control is not present, null is returned.\n     */\n    get statusChanges() {\n        return this.control ? this.control.statusChanges : null;\n    }\n    /**\n     * @description\n     * Returns a multicasting observable of value changes for the control that emits every time the\n     * value of the control changes in the UI or programmatically.\n     * If the control is not present, null is returned.\n     */\n    get valueChanges() {\n        return this.control ? this.control.valueChanges : null;\n    }\n    /**\n     * @description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     */\n    get path() {\n        return null;\n    }\n    /**\n     * Sets synchronous validators for this directive.\n     * @internal\n     */\n    _setValidators(validators) {\n        this._rawValidators = validators || [];\n        this._composedValidatorFn = composeValidators(this._rawValidators);\n    }\n    /**\n     * Sets asynchronous validators for this directive.\n     * @internal\n     */\n    _setAsyncValidators(validators) {\n        this._rawAsyncValidators = validators || [];\n        this._composedAsyncValidatorFn = composeAsyncValidators(this._rawAsyncValidators);\n    }\n    /**\n     * @description\n     * Synchronous validator function composed of all the synchronous validators registered with this\n     * directive.\n     */\n    get validator() {\n        return this._composedValidatorFn || null;\n    }\n    /**\n     * @description\n     * Asynchronous validator function composed of all the asynchronous validators registered with\n     * this directive.\n     */\n    get asyncValidator() {\n        return this._composedAsyncValidatorFn || null;\n    }\n    /**\n     * Internal function to register callbacks that should be invoked\n     * when directive instance is being destroyed.\n     * @internal\n     */\n    _registerOnDestroy(fn) {\n        this._onDestroyCallbacks.push(fn);\n    }\n    /**\n     * Internal function to invoke all registered \"on destroy\" callbacks.\n     * Note: calling this function also clears the list of callbacks.\n     * @internal\n     */\n    _invokeOnDestroyCallbacks() {\n        this._onDestroyCallbacks.forEach(fn => fn());\n        this._onDestroyCallbacks = [];\n    }\n    /**\n     * @description\n     * Resets the control with the provided value if the control is present.\n     */\n    reset(value = undefined) {\n        if (this.control)\n            this.control.reset(value);\n    }\n    /**\n     * @description\n     * Reports whether the control with the given path has the error specified.\n     *\n     * @param errorCode The code of the error to check\n     * @param path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * If no path is given, this method checks for the error on the current control.\n     *\n     * @returns whether the given error is present in the control at the given path.\n     *\n     * If the control is not present, false is returned.\n     */\n    hasError(errorCode, path) {\n        return this.control ? this.control.hasError(errorCode, path) : false;\n    }\n    /**\n     * @description\n     * Reports error data for the control with the given path.\n     *\n     * @param errorCode The code of the error to check\n     * @param path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * @returns error data for that particular error. If the control or error is not present,\n     * null is returned.\n     */\n    getError(errorCode, path) {\n        return this.control ? this.control.getError(errorCode, path) : null;\n    }\n}\nAbstractControlDirective.ɵfac = function AbstractControlDirective_Factory(t) { return new (t || AbstractControlDirective)(); };\nAbstractControlDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AbstractControlDirective });\n\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n * A base class for directives that contain multiple registered instances of `NgControl`.\n * Only used by the forms module.\n *\n * @publicApi\n */\nclass ControlContainer extends AbstractControlDirective {\n    /**\n     * @description\n     * The top-level form directive for the control.\n     */\n    get formDirective() {\n        return null;\n    }\n    /**\n     * @description\n     * The path to this group.\n     */\n    get path() {\n        return null;\n    }\n}\nControlContainer.ɵfac = function ControlContainer_Factory(t) { return ɵControlContainer_BaseFactory(t || ControlContainer); };\nControlContainer.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ControlContainer, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵControlContainer_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(ControlContainer);\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n * A base class that all `FormControl`-based directives extend. It binds a `FormControl`\n * object to a DOM element.\n *\n * @publicApi\n */\nclass NgControl extends AbstractControlDirective {\n    constructor() {\n        super(...arguments);\n        /**\n         * @description\n         * The parent form for the control.\n         *\n         * @internal\n         */\n        this._parent = null;\n        /**\n         * @description\n         * The name for the control\n         */\n        this.name = null;\n        /**\n         * @description\n         * The value accessor for the control\n         */\n        this.valueAccessor = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass AbstractControlStatus {\n    constructor(cd) {\n        this._cd = cd;\n    }\n    get ngClassUntouched() {\n        var _a, _b, _c;\n        return (_c = (_b = (_a = this._cd) === null || _a === void 0 ? void 0 : _a.control) === null || _b === void 0 ? void 0 : _b.untouched) !== null && _c !== void 0 ? _c : false;\n    }\n    get ngClassTouched() {\n        var _a, _b, _c;\n        return (_c = (_b = (_a = this._cd) === null || _a === void 0 ? void 0 : _a.control) === null || _b === void 0 ? void 0 : _b.touched) !== null && _c !== void 0 ? _c : false;\n    }\n    get ngClassPristine() {\n        var _a, _b, _c;\n        return (_c = (_b = (_a = this._cd) === null || _a === void 0 ? void 0 : _a.control) === null || _b === void 0 ? void 0 : _b.pristine) !== null && _c !== void 0 ? _c : false;\n    }\n    get ngClassDirty() {\n        var _a, _b, _c;\n        return (_c = (_b = (_a = this._cd) === null || _a === void 0 ? void 0 : _a.control) === null || _b === void 0 ? void 0 : _b.dirty) !== null && _c !== void 0 ? _c : false;\n    }\n    get ngClassValid() {\n        var _a, _b, _c;\n        return (_c = (_b = (_a = this._cd) === null || _a === void 0 ? void 0 : _a.control) === null || _b === void 0 ? void 0 : _b.valid) !== null && _c !== void 0 ? _c : false;\n    }\n    get ngClassInvalid() {\n        var _a, _b, _c;\n        return (_c = (_b = (_a = this._cd) === null || _a === void 0 ? void 0 : _a.control) === null || _b === void 0 ? void 0 : _b.invalid) !== null && _c !== void 0 ? _c : false;\n    }\n    get ngClassPending() {\n        var _a, _b, _c;\n        return (_c = (_b = (_a = this._cd) === null || _a === void 0 ? void 0 : _a.control) === null || _b === void 0 ? void 0 : _b.pending) !== null && _c !== void 0 ? _c : false;\n    }\n}\nconst ngControlStatusHost = {\n    '[class.ng-untouched]': 'ngClassUntouched',\n    '[class.ng-touched]': 'ngClassTouched',\n    '[class.ng-pristine]': 'ngClassPristine',\n    '[class.ng-dirty]': 'ngClassDirty',\n    '[class.ng-valid]': 'ngClassValid',\n    '[class.ng-invalid]': 'ngClassInvalid',\n    '[class.ng-pending]': 'ngClassPending',\n};\n/**\n * @description\n * Directive automatically applied to Angular form controls that sets CSS classes\n * based on control status.\n *\n * @usageNotes\n *\n * ### CSS classes applied\n *\n * The following classes are applied as the properties become true:\n *\n * * ng-valid\n * * ng-invalid\n * * ng-pending\n * * ng-pristine\n * * ng-dirty\n * * ng-untouched\n * * ng-touched\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass NgControlStatus extends AbstractControlStatus {\n    constructor(cd) {\n        super(cd);\n    }\n}\nNgControlStatus.ɵfac = function NgControlStatus_Factory(t) { return new (t || NgControlStatus)(ɵngcc0.ɵɵdirectiveInject(NgControl, 2)); };\nNgControlStatus.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgControlStatus, selectors: [[\"\", \"formControlName\", \"\"], [\"\", \"ngModel\", \"\"], [\"\", \"formControl\", \"\"]], hostVars: 14, hostBindings: function NgControlStatus_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ng-untouched\", ctx.ngClassUntouched)(\"ng-touched\", ctx.ngClassTouched)(\"ng-pristine\", ctx.ngClassPristine)(\"ng-dirty\", ctx.ngClassDirty)(\"ng-valid\", ctx.ngClassValid)(\"ng-invalid\", ctx.ngClassInvalid)(\"ng-pending\", ctx.ngClassPending);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nNgControlStatus.ctorParameters = () => [\n    { type: NgControl, decorators: [{ type: Self }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgControlStatus, [{\n        type: Directive,\n        args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost }]\n    }], function () { return [{ type: NgControl, decorators: [{\n                type: Self\n            }] }]; }, null); })();\n/**\n * @description\n * Directive automatically applied to Angular form groups that sets CSS classes\n * based on control status (valid/invalid/dirty/etc).\n *\n * @see `NgControlStatus`\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass NgControlStatusGroup extends AbstractControlStatus {\n    constructor(cd) {\n        super(cd);\n    }\n}\nNgControlStatusGroup.ɵfac = function NgControlStatusGroup_Factory(t) { return new (t || NgControlStatusGroup)(ɵngcc0.ɵɵdirectiveInject(ControlContainer, 10)); };\nNgControlStatusGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgControlStatusGroup, selectors: [[\"\", \"formGroupName\", \"\"], [\"\", \"formArrayName\", \"\"], [\"\", \"ngModelGroup\", \"\"], [\"\", \"formGroup\", \"\"], [\"form\", 3, \"ngNoForm\", \"\"], [\"\", \"ngForm\", \"\"]], hostVars: 14, hostBindings: function NgControlStatusGroup_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ng-untouched\", ctx.ngClassUntouched)(\"ng-touched\", ctx.ngClassTouched)(\"ng-pristine\", ctx.ngClassPristine)(\"ng-dirty\", ctx.ngClassDirty)(\"ng-valid\", ctx.ngClassValid)(\"ng-invalid\", ctx.ngClassInvalid)(\"ng-pending\", ctx.ngClassPending);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nNgControlStatusGroup.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Optional }, { type: Self }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgControlStatusGroup, [{\n        type: Directive,\n        args: [{\n                selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n                host: ngControlStatusHost\n            }]\n    }], function () { return [{ type: ControlContainer, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst NUMBER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => NumberValueAccessor),\n    multi: true\n};\n/**\n * @description\n * The `ControlValueAccessor` for writing a number value and listening to number input changes.\n * The value accessor is used by the `FormControlDirective`, `FormControlName`, and `NgModel`\n * directives.\n *\n * @usageNotes\n *\n * ### Using a number input with a reactive form.\n *\n * The following example shows how to use a number input with a reactive form.\n *\n * ```ts\n * const totalCountControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"number\" [formControl]=\"totalCountControl\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass NumberValueAccessor {\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * The registered callback function called when a change or input event occurs on the input\n         * element.\n         * @nodoc\n         */\n        this.onChange = (_) => { };\n        /**\n         * The registered callback function called when a blur event occurs on the input element.\n         * @nodoc\n         */\n        this.onTouched = () => { };\n    }\n    /**\n     * Sets the \"value\" property on the input element.\n     * @nodoc\n     */\n    writeValue(value) {\n        // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n        const normalizedValue = value == null ? '' : value;\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n    }\n    /**\n     * Registers a function called when the control value changes.\n     * @nodoc\n     */\n    registerOnChange(fn) {\n        this.onChange = (value) => {\n            fn(value == '' ? null : parseFloat(value));\n        };\n    }\n    /**\n     * Registers a function called when the control is touched.\n     * @nodoc\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the \"disabled\" property on the input element.\n     * @nodoc\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n}\nNumberValueAccessor.ɵfac = function NumberValueAccessor_Factory(t) { return new (t || NumberValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nNumberValueAccessor.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NumberValueAccessor, selectors: [[\"input\", \"type\", \"number\", \"formControlName\", \"\"], [\"input\", \"type\", \"number\", \"formControl\", \"\"], [\"input\", \"type\", \"number\", \"ngModel\", \"\"]], hostBindings: function NumberValueAccessor_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function NumberValueAccessor_input_HostBindingHandler($event) { return ctx.onChange($event.target.value); })(\"blur\", function NumberValueAccessor_blur_HostBindingHandler() { return ctx.onTouched(); });\n    } }, features: [ɵngcc0.ɵɵProvidersFeature([NUMBER_VALUE_ACCESSOR])] });\nNumberValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NumberValueAccessor, [{\n        type: Directive,\n        args: [{\n                selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n                host: { '(input)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                providers: [NUMBER_VALUE_ACCESSOR]\n            }]\n    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst RADIO_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioControlValueAccessor),\n    multi: true\n};\nfunction throwNameError() {\n    throw new Error(`\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    `);\n}\n/**\n * @description\n * Class used by Angular to track radio buttons. For internal use only.\n */\nclass RadioControlRegistry {\n    constructor() {\n        this._accessors = [];\n    }\n    /**\n     * @description\n     * Adds a control to the internal registry. For internal use only.\n     */\n    add(control, accessor) {\n        this._accessors.push([control, accessor]);\n    }\n    /**\n     * @description\n     * Removes a control from the internal registry. For internal use only.\n     */\n    remove(accessor) {\n        for (let i = this._accessors.length - 1; i >= 0; --i) {\n            if (this._accessors[i][1] === accessor) {\n                this._accessors.splice(i, 1);\n                return;\n            }\n        }\n    }\n    /**\n     * @description\n     * Selects a radio button. For internal use only.\n     */\n    select(accessor) {\n        this._accessors.forEach((c) => {\n            if (this._isSameGroup(c, accessor) && c[1] !== accessor) {\n                c[1].fireUncheck(accessor.value);\n            }\n        });\n    }\n    _isSameGroup(controlPair, accessor) {\n        if (!controlPair[0].control)\n            return false;\n        return controlPair[0]._parent === accessor._control._parent &&\n            controlPair[1].name === accessor.name;\n    }\n}\nRadioControlRegistry.ɵfac = function RadioControlRegistry_Factory(t) { return new (t || RadioControlRegistry)(); };\nRadioControlRegistry.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: RadioControlRegistry, factory: RadioControlRegistry.ɵfac });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RadioControlRegistry, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\n/**\n * @description\n * The `ControlValueAccessor` for writing radio control values and listening to radio control\n * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * @usageNotes\n *\n * ### Using radio buttons with reactive form directives\n *\n * The follow example shows how to use radio buttons in a reactive form. When using radio buttons in\n * a reactive form, radio buttons in the same group should have the same `formControlName`.\n * Providing a `name` attribute is optional.\n *\n * {@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass RadioControlValueAccessor {\n    constructor(_renderer, _elementRef, _registry, _injector) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._registry = _registry;\n        this._injector = _injector;\n        /**\n         * The registered callback function called when a change event occurs on the input element.\n         * @nodoc\n         */\n        this.onChange = () => { };\n        /**\n         * The registered callback function called when a blur event occurs on the input element.\n         * @nodoc\n         */\n        this.onTouched = () => { };\n    }\n    /** @nodoc */\n    ngOnInit() {\n        this._control = this._injector.get(NgControl);\n        this._checkName();\n        this._registry.add(this._control, this);\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        this._registry.remove(this);\n    }\n    /**\n     * Sets the \"checked\" property value on the radio input element.\n     * @nodoc\n     */\n    writeValue(value) {\n        this._state = value === this.value;\n        this._renderer.setProperty(this._elementRef.nativeElement, 'checked', this._state);\n    }\n    /**\n     * Registers a function called when the control value changes.\n     * @nodoc\n     */\n    registerOnChange(fn) {\n        this._fn = fn;\n        this.onChange = () => {\n            fn(this.value);\n            this._registry.select(this);\n        };\n    }\n    /**\n     * Sets the \"value\" on the radio input element and unchecks it.\n     *\n     * @param value\n     */\n    fireUncheck(value) {\n        this.writeValue(value);\n    }\n    /**\n     * Registers a function called when the control is touched.\n     * @nodoc\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the \"disabled\" property on the input element.\n     * @nodoc\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    _checkName() {\n        if (this.name && this.formControlName && this.name !== this.formControlName &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwNameError();\n        }\n        if (!this.name && this.formControlName)\n            this.name = this.formControlName;\n    }\n}\nRadioControlValueAccessor.ɵfac = function RadioControlValueAccessor_Factory(t) { return new (t || RadioControlValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(RadioControlRegistry), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };\nRadioControlValueAccessor.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: RadioControlValueAccessor, selectors: [[\"input\", \"type\", \"radio\", \"formControlName\", \"\"], [\"input\", \"type\", \"radio\", \"formControl\", \"\"], [\"input\", \"type\", \"radio\", \"ngModel\", \"\"]], hostBindings: function RadioControlValueAccessor_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"change\", function RadioControlValueAccessor_change_HostBindingHandler() { return ctx.onChange(); })(\"blur\", function RadioControlValueAccessor_blur_HostBindingHandler() { return ctx.onTouched(); });\n    } }, inputs: { name: \"name\", formControlName: \"formControlName\", value: \"value\" }, features: [ɵngcc0.ɵɵProvidersFeature([RADIO_VALUE_ACCESSOR])] });\nRadioControlValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef },\n    { type: RadioControlRegistry },\n    { type: Injector }\n];\nRadioControlValueAccessor.propDecorators = {\n    name: [{ type: Input }],\n    formControlName: [{ type: Input }],\n    value: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RadioControlValueAccessor, [{\n        type: Directive,\n        args: [{\n                selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n                host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },\n                providers: [RADIO_VALUE_ACCESSOR]\n            }]\n    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: RadioControlRegistry }, { type: ɵngcc0.Injector }]; }, { name: [{\n            type: Input\n        }], formControlName: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst RANGE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RangeValueAccessor),\n    multi: true\n};\n/**\n * @description\n * The `ControlValueAccessor` for writing a range value and listening to range input changes.\n * The value accessor is used by the `FormControlDirective`, `FormControlName`, and  `NgModel`\n * directives.\n *\n * @usageNotes\n *\n * ### Using a range input with a reactive form\n *\n * The following example shows how to use a range input with a reactive form.\n *\n * ```ts\n * const ageControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"range\" [formControl]=\"ageControl\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass RangeValueAccessor {\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * The registered callback function called when a change or input event occurs on the input\n         * element.\n         * @nodoc\n         */\n        this.onChange = (_) => { };\n        /**\n         * The registered callback function called when a blur event occurs on the input element.\n         * @nodoc\n         */\n        this.onTouched = () => { };\n    }\n    /**\n     * Sets the \"value\" property on the input element.\n     * @nodoc\n     */\n    writeValue(value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', parseFloat(value));\n    }\n    /**\n     * Registers a function called when the control value changes.\n     * @nodoc\n     */\n    registerOnChange(fn) {\n        this.onChange = (value) => {\n            fn(value == '' ? null : parseFloat(value));\n        };\n    }\n    /**\n     * Registers a function called when the control is touched.\n     * @nodoc\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the \"disabled\" property on the range input element.\n     * @nodoc\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n}\nRangeValueAccessor.ɵfac = function RangeValueAccessor_Factory(t) { return new (t || RangeValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nRangeValueAccessor.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: RangeValueAccessor, selectors: [[\"input\", \"type\", \"range\", \"formControlName\", \"\"], [\"input\", \"type\", \"range\", \"formControl\", \"\"], [\"input\", \"type\", \"range\", \"ngModel\", \"\"]], hostBindings: function RangeValueAccessor_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"change\", function RangeValueAccessor_change_HostBindingHandler($event) { return ctx.onChange($event.target.value); })(\"input\", function RangeValueAccessor_input_HostBindingHandler($event) { return ctx.onChange($event.target.value); })(\"blur\", function RangeValueAccessor_blur_HostBindingHandler() { return ctx.onTouched(); });\n    } }, features: [ɵngcc0.ɵɵProvidersFeature([RANGE_VALUE_ACCESSOR])] });\nRangeValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RangeValueAccessor, [{\n        type: Directive,\n        args: [{\n                selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',\n                host: {\n                    '(change)': 'onChange($event.target.value)',\n                    '(input)': 'onChange($event.target.value)',\n                    '(blur)': 'onTouched()'\n                },\n                providers: [RANGE_VALUE_ACCESSOR]\n            }]\n    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst FormErrorExamples = {\n    formControlName: `\n    <div [formGroup]=\"myGroup\">\n      <input formControlName=\"firstName\">\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       firstName: new FormControl()\n    });`,\n    formGroupName: `\n    <div [formGroup]=\"myGroup\">\n       <div formGroupName=\"person\">\n          <input formControlName=\"firstName\">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });`,\n    formArrayName: `\n    <div [formGroup]=\"myGroup\">\n      <div formArrayName=\"cities\">\n        <div *ngFor=\"let city of cityArray.controls; index as i\">\n          <input [formControlName]=\"i\">\n        </div>\n      </div>\n    </div>\n\n    In your class:\n\n    this.cityArray = new FormArray([new FormControl('SF')]);\n    this.myGroup = new FormGroup({\n      cities: this.cityArray\n    });`,\n    ngModelGroup: `\n    <form>\n       <div ngModelGroup=\"person\">\n          <input [(ngModel)]=\"person.name\" name=\"firstName\">\n       </div>\n    </form>`,\n    ngModelWithFormGroup: `\n    <div [formGroup]=\"myGroup\">\n       <input formControlName=\"firstName\">\n       <input [(ngModel)]=\"showMoreControls\" [ngModelOptions]=\"{standalone: true}\">\n    </div>\n  `\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ReactiveErrors {\n    static controlParentException() {\n        throw new Error(`formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      ${FormErrorExamples.formControlName}`);\n    }\n    static ngModelGroupException() {\n        throw new Error(`formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n       that also have a \"form\" prefix: formGroupName, formArrayName, or formGroup.\n\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n        ${FormErrorExamples.formGroupName}\n\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n        ${FormErrorExamples.ngModelGroup}`);\n    }\n    static missingFormException() {\n        throw new Error(`formGroup expects a FormGroup instance. Please pass one in.\n\n       Example:\n\n       ${FormErrorExamples.formControlName}`);\n    }\n    static groupParentException() {\n        throw new Error(`formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      ${FormErrorExamples.formGroupName}`);\n    }\n    static arrayParentException() {\n        throw new Error(`formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n        Example:\n\n        ${FormErrorExamples.formArrayName}`);\n    }\n    static disabledAttrWarning() {\n        console.warn(`\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n      you. We recommend using this approach to avoid 'changed after checked' errors.\n\n      Example:\n      form = new FormGroup({\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n        last: new FormControl('Drew', Validators.required)\n      });\n    `);\n    }\n    static ngModelWarning(directiveName) {\n        console.warn(`\n    It looks like you're using ngModel on the same form field as ${directiveName}.\n    Support for using the ngModel input property and ngModelChange event with\n    reactive form directives has been deprecated in Angular v6 and will be removed\n    in a future version of Angular.\n\n    For more information on this, see our API docs here:\n    https://angular.io/api/forms/${directiveName === 'formControl' ? 'FormControlDirective' :\n            'FormControlName'}#use-with-ngmodel\n    `);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst SELECT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SelectControlValueAccessor),\n    multi: true\n};\nfunction _buildValueString(id, value) {\n    if (id == null)\n        return `${value}`;\n    if (value && typeof value === 'object')\n        value = 'Object';\n    return `${id}: ${value}`.slice(0, 50);\n}\nfunction _extractId(valueString) {\n    return valueString.split(':')[0];\n}\n/**\n * @description\n * The `ControlValueAccessor` for writing select control values and listening to select control\n * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * @usageNotes\n *\n * ### Using select controls in a reactive form\n *\n * The following examples show how to use a select control in a reactive form.\n *\n * {@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n *\n * ### Using select controls in a template-driven form\n *\n * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n * attribute to the main `<select>` tag.\n *\n * {@example forms/ts/selectControl/select_control_example.ts region='Component'}\n *\n * ### Customizing option selection\n *\n * Angular uses object identity to select option. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects option by the return value of the function.\n *\n * ```ts\n * const selectedCountriesControl = new FormControl();\n * ```\n *\n * ```\n * <select [compareWith]=\"compareFn\"  [formControl]=\"selectedCountriesControl\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n *\n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n *\n * **Note:** We listen to the 'change' event because 'input' events aren't fired\n * for selects in Firefox and IE:\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass SelectControlValueAccessor {\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /** @internal */\n        this._optionMap = new Map();\n        /** @internal */\n        this._idCounter = 0;\n        /**\n         * The registered callback function called when a change event occurs on the input element.\n         * @nodoc\n         */\n        this.onChange = (_) => { };\n        /**\n         * The registered callback function called when a blur event occurs on the input element.\n         * @nodoc\n         */\n        this.onTouched = () => { };\n        this._compareWith = Object.is;\n    }\n    /**\n     * @description\n     * Tracks the option comparison algorithm for tracking identities when\n     * checking for changes.\n     */\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw new Error(`compareWith must be a function, but received ${JSON.stringify(fn)}`);\n        }\n        this._compareWith = fn;\n    }\n    /**\n     * Sets the \"value\" property on the input element. The \"selectedIndex\"\n     * property is also set if an ID is provided on the option element.\n     * @nodoc\n     */\n    writeValue(value) {\n        this.value = value;\n        const id = this._getOptionId(value);\n        if (id == null) {\n            this._renderer.setProperty(this._elementRef.nativeElement, 'selectedIndex', -1);\n        }\n        const valueString = _buildValueString(id, value);\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', valueString);\n    }\n    /**\n     * Registers a function called when the control value changes.\n     * @nodoc\n     */\n    registerOnChange(fn) {\n        this.onChange = (valueString) => {\n            this.value = this._getOptionValue(valueString);\n            fn(this.value);\n        };\n    }\n    /**\n     * Registers a function called when the control is touched.\n     * @nodoc\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the \"disabled\" property on the select input element.\n     * @nodoc\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    /** @internal */\n    _registerOption() {\n        return (this._idCounter++).toString();\n    }\n    /** @internal */\n    _getOptionId(value) {\n        for (const id of Array.from(this._optionMap.keys())) {\n            if (this._compareWith(this._optionMap.get(id), value))\n                return id;\n        }\n        return null;\n    }\n    /** @internal */\n    _getOptionValue(valueString) {\n        const id = _extractId(valueString);\n        return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\n    }\n}\nSelectControlValueAccessor.ɵfac = function SelectControlValueAccessor_Factory(t) { return new (t || SelectControlValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nSelectControlValueAccessor.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: SelectControlValueAccessor, selectors: [[\"select\", \"formControlName\", \"\", 3, \"multiple\", \"\"], [\"select\", \"formControl\", \"\", 3, \"multiple\", \"\"], [\"select\", \"ngModel\", \"\", 3, \"multiple\", \"\"]], hostBindings: function SelectControlValueAccessor_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"change\", function SelectControlValueAccessor_change_HostBindingHandler($event) { return ctx.onChange($event.target.value); })(\"blur\", function SelectControlValueAccessor_blur_HostBindingHandler() { return ctx.onTouched(); });\n    } }, inputs: { compareWith: \"compareWith\" }, features: [ɵngcc0.ɵɵProvidersFeature([SELECT_VALUE_ACCESSOR])] });\nSelectControlValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef }\n];\nSelectControlValueAccessor.propDecorators = {\n    compareWith: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SelectControlValueAccessor, [{\n        type: Directive,\n        args: [{\n                selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n                host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                providers: [SELECT_VALUE_ACCESSOR]\n            }]\n    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, { compareWith: [{\n            type: Input\n        }] }); })();\n/**\n * @description\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * @see `SelectControlValueAccessor`\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass NgSelectOption {\n    constructor(_element, _renderer, _select) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._select = _select;\n        if (this._select)\n            this.id = this._select._registerOption();\n    }\n    /**\n     * @description\n     * Tracks the value bound to the option element. Unlike the value binding,\n     * ngValue supports binding to objects.\n     */\n    set ngValue(value) {\n        if (this._select == null)\n            return;\n        this._select._optionMap.set(this.id, value);\n        this._setElementValue(_buildValueString(this.id, value));\n        this._select.writeValue(this._select.value);\n    }\n    /**\n     * @description\n     * Tracks simple string values bound to the option element.\n     * For objects, use the `ngValue` input binding.\n     */\n    set value(value) {\n        this._setElementValue(value);\n        if (this._select)\n            this._select.writeValue(this._select.value);\n    }\n    /** @internal */\n    _setElementValue(value) {\n        this._renderer.setProperty(this._element.nativeElement, 'value', value);\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        if (this._select) {\n            this._select._optionMap.delete(this.id);\n            this._select.writeValue(this._select.value);\n        }\n    }\n}\nNgSelectOption.ɵfac = function NgSelectOption_Factory(t) { return new (t || NgSelectOption)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(SelectControlValueAccessor, 9)); };\nNgSelectOption.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgSelectOption, selectors: [[\"option\"]], inputs: { ngValue: \"ngValue\", value: \"value\" } });\nNgSelectOption.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Renderer2 },\n    { type: SelectControlValueAccessor, decorators: [{ type: Optional }, { type: Host }] }\n];\nNgSelectOption.propDecorators = {\n    ngValue: [{ type: Input, args: ['ngValue',] }],\n    value: [{ type: Input, args: ['value',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgSelectOption, [{\n        type: Directive,\n        args: [{ selector: 'option' }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: SelectControlValueAccessor, decorators: [{\n                type: Optional\n            }, {\n                type: Host\n            }] }]; }, { ngValue: [{\n            type: Input,\n            args: ['ngValue']\n        }], value: [{\n            type: Input,\n            args: ['value']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst SELECT_MULTIPLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SelectMultipleControlValueAccessor),\n    multi: true\n};\nfunction _buildValueString$1(id, value) {\n    if (id == null)\n        return `${value}`;\n    if (typeof value === 'string')\n        value = `'${value}'`;\n    if (value && typeof value === 'object')\n        value = 'Object';\n    return `${id}: ${value}`.slice(0, 50);\n}\nfunction _extractId$1(valueString) {\n    return valueString.split(':')[0];\n}\n/** Mock interface for HTMLCollection */\nclass HTMLCollection {\n}\n/**\n * @description\n * The `ControlValueAccessor` for writing multi-select control values and listening to multi-select\n * control changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * @see `SelectControlValueAccessor`\n *\n * @usageNotes\n *\n * ### Using a multi-select control\n *\n * The follow example shows you how to use a multi-select control with a reactive form.\n *\n * ```ts\n * const countryControl = new FormControl();\n * ```\n *\n * ```\n * <select multiple name=\"countries\" [formControl]=\"countryControl\">\n *   <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *     {{ country.name }}\n *   </option>\n * </select>\n * ```\n *\n * ### Customizing option selection\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * See the `SelectControlValueAccessor` for usage.\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass SelectMultipleControlValueAccessor {\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /** @internal */\n        this._optionMap = new Map();\n        /** @internal */\n        this._idCounter = 0;\n        /**\n         * The registered callback function called when a change event occurs on the input element.\n         * @nodoc\n         */\n        this.onChange = (_) => { };\n        /**\n         * The registered callback function called when a blur event occurs on the input element.\n         * @nodoc\n         */\n        this.onTouched = () => { };\n        this._compareWith = Object.is;\n    }\n    /**\n     * @description\n     * Tracks the option comparison algorithm for tracking identities when\n     * checking for changes.\n     */\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw new Error(`compareWith must be a function, but received ${JSON.stringify(fn)}`);\n        }\n        this._compareWith = fn;\n    }\n    /**\n     * Sets the \"value\" property on one or of more of the select's options.\n     * @nodoc\n     */\n    writeValue(value) {\n        this.value = value;\n        let optionSelectedStateSetter;\n        if (Array.isArray(value)) {\n            // convert values to ids\n            const ids = value.map((v) => this._getOptionId(v));\n            optionSelectedStateSetter = (opt, o) => {\n                opt._setSelected(ids.indexOf(o.toString()) > -1);\n            };\n        }\n        else {\n            optionSelectedStateSetter = (opt, o) => {\n                opt._setSelected(false);\n            };\n        }\n        this._optionMap.forEach(optionSelectedStateSetter);\n    }\n    /**\n     * Registers a function called when the control value changes\n     * and writes an array of the selected options.\n     * @nodoc\n     */\n    registerOnChange(fn) {\n        this.onChange = (_) => {\n            const selected = [];\n            if (_.selectedOptions !== undefined) {\n                const options = _.selectedOptions;\n                for (let i = 0; i < options.length; i++) {\n                    const opt = options.item(i);\n                    const val = this._getOptionValue(opt.value);\n                    selected.push(val);\n                }\n            }\n            // Degrade on IE\n            else {\n                const options = _.options;\n                for (let i = 0; i < options.length; i++) {\n                    const opt = options.item(i);\n                    if (opt.selected) {\n                        const val = this._getOptionValue(opt.value);\n                        selected.push(val);\n                    }\n                }\n            }\n            this.value = selected;\n            fn(selected);\n        };\n    }\n    /**\n     * Registers a function called when the control is touched.\n     * @nodoc\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the \"disabled\" property on the select input element.\n     * @nodoc\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    /** @internal */\n    _registerOption(value) {\n        const id = (this._idCounter++).toString();\n        this._optionMap.set(id, value);\n        return id;\n    }\n    /** @internal */\n    _getOptionId(value) {\n        for (const id of Array.from(this._optionMap.keys())) {\n            if (this._compareWith(this._optionMap.get(id)._value, value))\n                return id;\n        }\n        return null;\n    }\n    /** @internal */\n    _getOptionValue(valueString) {\n        const id = _extractId$1(valueString);\n        return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString;\n    }\n}\nSelectMultipleControlValueAccessor.ɵfac = function SelectMultipleControlValueAccessor_Factory(t) { return new (t || SelectMultipleControlValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nSelectMultipleControlValueAccessor.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: SelectMultipleControlValueAccessor, selectors: [[\"select\", \"multiple\", \"\", \"formControlName\", \"\"], [\"select\", \"multiple\", \"\", \"formControl\", \"\"], [\"select\", \"multiple\", \"\", \"ngModel\", \"\"]], hostBindings: function SelectMultipleControlValueAccessor_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"change\", function SelectMultipleControlValueAccessor_change_HostBindingHandler($event) { return ctx.onChange($event.target); })(\"blur\", function SelectMultipleControlValueAccessor_blur_HostBindingHandler() { return ctx.onTouched(); });\n    } }, inputs: { compareWith: \"compareWith\" }, features: [ɵngcc0.ɵɵProvidersFeature([SELECT_MULTIPLE_VALUE_ACCESSOR])] });\nSelectMultipleControlValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef }\n];\nSelectMultipleControlValueAccessor.propDecorators = {\n    compareWith: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SelectMultipleControlValueAccessor, [{\n        type: Directive,\n        args: [{\n                selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n                host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },\n                providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n            }]\n    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, { compareWith: [{\n            type: Input\n        }] }); })();\n/**\n * @description\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * @see `SelectMultipleControlValueAccessor`\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass ɵNgSelectMultipleOption {\n    constructor(_element, _renderer, _select) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._select = _select;\n        if (this._select) {\n            this.id = this._select._registerOption(this);\n        }\n    }\n    /**\n     * @description\n     * Tracks the value bound to the option element. Unlike the value binding,\n     * ngValue supports binding to objects.\n     */\n    set ngValue(value) {\n        if (this._select == null)\n            return;\n        this._value = value;\n        this._setElementValue(_buildValueString$1(this.id, value));\n        this._select.writeValue(this._select.value);\n    }\n    /**\n     * @description\n     * Tracks simple string values bound to the option element.\n     * For objects, use the `ngValue` input binding.\n     */\n    set value(value) {\n        if (this._select) {\n            this._value = value;\n            this._setElementValue(_buildValueString$1(this.id, value));\n            this._select.writeValue(this._select.value);\n        }\n        else {\n            this._setElementValue(value);\n        }\n    }\n    /** @internal */\n    _setElementValue(value) {\n        this._renderer.setProperty(this._element.nativeElement, 'value', value);\n    }\n    /** @internal */\n    _setSelected(selected) {\n        this._renderer.setProperty(this._element.nativeElement, 'selected', selected);\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        if (this._select) {\n            this._select._optionMap.delete(this.id);\n            this._select.writeValue(this._select.value);\n        }\n    }\n}\nɵNgSelectMultipleOption.ɵfac = function ɵNgSelectMultipleOption_Factory(t) { return new (t || ɵNgSelectMultipleOption)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(SelectMultipleControlValueAccessor, 9)); };\nɵNgSelectMultipleOption.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ɵNgSelectMultipleOption, selectors: [[\"option\"]], inputs: { ngValue: \"ngValue\", value: \"value\" } });\nɵNgSelectMultipleOption.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Renderer2 },\n    { type: SelectMultipleControlValueAccessor, decorators: [{ type: Optional }, { type: Host }] }\n];\nɵNgSelectMultipleOption.propDecorators = {\n    ngValue: [{ type: Input, args: ['ngValue',] }],\n    value: [{ type: Input, args: ['value',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ɵNgSelectMultipleOption, [{\n        type: Directive,\n        args: [{ selector: 'option' }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: SelectMultipleControlValueAccessor, decorators: [{\n                type: Optional\n            }, {\n                type: Host\n            }] }]; }, { ngValue: [{\n            type: Input,\n            args: ['ngValue']\n        }], value: [{\n            type: Input,\n            args: ['value']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction controlPath(name, parent) {\n    return [...parent.path, name];\n}\nfunction setUpControl(control, dir) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (!control)\n            _throwError(dir, 'Cannot find control with');\n        if (!dir.valueAccessor)\n            _throwError(dir, 'No value accessor for form control with');\n    }\n    setUpValidators(control, dir, /* handleOnValidatorChange */ true);\n    dir.valueAccessor.writeValue(control.value);\n    setUpViewChangePipeline(control, dir);\n    setUpModelChangePipeline(control, dir);\n    setUpBlurPipeline(control, dir);\n    setUpDisabledChangeHandler(control, dir);\n}\nfunction cleanUpControl(control, dir) {\n    const noop = () => {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            _noControlError(dir);\n        }\n    };\n    dir.valueAccessor.registerOnChange(noop);\n    dir.valueAccessor.registerOnTouched(noop);\n    cleanUpValidators(control, dir, /* handleOnValidatorChange */ true);\n    if (control) {\n        dir._invokeOnDestroyCallbacks();\n        control._registerOnCollectionChange(() => { });\n    }\n}\nfunction registerOnValidatorChange(validators, onChange) {\n    validators.forEach((validator) => {\n        if (validator.registerOnValidatorChange)\n            validator.registerOnValidatorChange(onChange);\n    });\n}\n/**\n * Sets up disabled change handler function on a given form control if ControlValueAccessor\n * associated with a given directive instance supports the `setDisabledState` call.\n *\n * @param control Form control where disabled change handler should be setup.\n * @param dir Corresponding directive instance associated with this control.\n */\nfunction setUpDisabledChangeHandler(control, dir) {\n    if (dir.valueAccessor.setDisabledState) {\n        const onDisabledChange = (isDisabled) => {\n            dir.valueAccessor.setDisabledState(isDisabled);\n        };\n        control.registerOnDisabledChange(onDisabledChange);\n        // Register a callback function to cleanup disabled change handler\n        // from a control instance when a directive is destroyed.\n        dir._registerOnDestroy(() => {\n            control._unregisterOnDisabledChange(onDisabledChange);\n        });\n    }\n}\n/**\n * Sets up sync and async directive validators on provided form control.\n * This function merges validators from the directive into the validators of the control.\n *\n * @param control Form control where directive validators should be setup.\n * @param dir Directive instance that contains validators to be setup.\n * @param handleOnValidatorChange Flag that determines whether directive validators should be setup\n *     to handle validator input change.\n */\nfunction setUpValidators(control, dir, handleOnValidatorChange) {\n    const validators = getControlValidators(control);\n    if (dir.validator !== null) {\n        control.setValidators(mergeValidators(validators, dir.validator));\n    }\n    else if (typeof validators === 'function') {\n        // If sync validators are represented by a single validator function, we force the\n        // `Validators.compose` call to happen by executing the `setValidators` function with\n        // an array that contains that function. We need this to avoid possible discrepancies in\n        // validators behavior, so sync validators are always processed by the `Validators.compose`.\n        // Note: we should consider moving this logic inside the `setValidators` function itself, so we\n        // have consistent behavior on AbstractControl API level. The same applies to the async\n        // validators logic below.\n        control.setValidators([validators]);\n    }\n    const asyncValidators = getControlAsyncValidators(control);\n    if (dir.asyncValidator !== null) {\n        control.setAsyncValidators(mergeValidators(asyncValidators, dir.asyncValidator));\n    }\n    else if (typeof asyncValidators === 'function') {\n        control.setAsyncValidators([asyncValidators]);\n    }\n    // Re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n    if (handleOnValidatorChange) {\n        const onValidatorChange = () => control.updateValueAndValidity();\n        registerOnValidatorChange(dir._rawValidators, onValidatorChange);\n        registerOnValidatorChange(dir._rawAsyncValidators, onValidatorChange);\n    }\n}\n/**\n * Cleans up sync and async directive validators on provided form control.\n * This function reverts the setup performed by the `setUpValidators` function, i.e.\n * removes directive-specific validators from a given control instance.\n *\n * @param control Form control from where directive validators should be removed.\n * @param dir Directive instance that contains validators to be removed.\n * @param handleOnValidatorChange Flag that determines whether directive validators should also be\n *     cleaned up to stop handling validator input change (if previously configured to do so).\n */\nfunction cleanUpValidators(control, dir, handleOnValidatorChange) {\n    if (control !== null) {\n        if (dir.validator !== null) {\n            const validators = getControlValidators(control);\n            if (Array.isArray(validators) && validators.length > 0) {\n                // Filter out directive validator function.\n                control.setValidators(validators.filter(validator => validator !== dir.validator));\n            }\n        }\n        if (dir.asyncValidator !== null) {\n            const asyncValidators = getControlAsyncValidators(control);\n            if (Array.isArray(asyncValidators) && asyncValidators.length > 0) {\n                // Filter out directive async validator function.\n                control.setAsyncValidators(asyncValidators.filter(asyncValidator => asyncValidator !== dir.asyncValidator));\n            }\n        }\n    }\n    if (handleOnValidatorChange) {\n        // Clear onValidatorChange callbacks by providing a noop function.\n        const noop = () => { };\n        registerOnValidatorChange(dir._rawValidators, noop);\n        registerOnValidatorChange(dir._rawAsyncValidators, noop);\n    }\n}\nfunction setUpViewChangePipeline(control, dir) {\n    dir.valueAccessor.registerOnChange((newValue) => {\n        control._pendingValue = newValue;\n        control._pendingChange = true;\n        control._pendingDirty = true;\n        if (control.updateOn === 'change')\n            updateControl(control, dir);\n    });\n}\nfunction setUpBlurPipeline(control, dir) {\n    dir.valueAccessor.registerOnTouched(() => {\n        control._pendingTouched = true;\n        if (control.updateOn === 'blur' && control._pendingChange)\n            updateControl(control, dir);\n        if (control.updateOn !== 'submit')\n            control.markAsTouched();\n    });\n}\nfunction updateControl(control, dir) {\n    if (control._pendingDirty)\n        control.markAsDirty();\n    control.setValue(control._pendingValue, { emitModelToViewChange: false });\n    dir.viewToModelUpdate(control._pendingValue);\n    control._pendingChange = false;\n}\nfunction setUpModelChangePipeline(control, dir) {\n    const onChange = (newValue, emitModelEvent) => {\n        // control -> view\n        dir.valueAccessor.writeValue(newValue);\n        // control -> ngModel\n        if (emitModelEvent)\n            dir.viewToModelUpdate(newValue);\n    };\n    control.registerOnChange(onChange);\n    // Register a callback function to cleanup onChange handler\n    // from a control instance when a directive is destroyed.\n    dir._registerOnDestroy(() => {\n        control._unregisterOnChange(onChange);\n    });\n}\nfunction setUpFormContainer(control, dir) {\n    if (control == null && (typeof ngDevMode === 'undefined' || ngDevMode))\n        _throwError(dir, 'Cannot find control with');\n    setUpValidators(control, dir, /* handleOnValidatorChange */ false);\n}\nfunction _noControlError(dir) {\n    return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n}\nfunction _throwError(dir, message) {\n    let messageEnd;\n    if (dir.path.length > 1) {\n        messageEnd = `path: '${dir.path.join(' -> ')}'`;\n    }\n    else if (dir.path[0]) {\n        messageEnd = `name: '${dir.path}'`;\n    }\n    else {\n        messageEnd = 'unspecified name attribute';\n    }\n    throw new Error(`${message} ${messageEnd}`);\n}\nfunction isPropertyUpdated(changes, viewModel) {\n    if (!changes.hasOwnProperty('model'))\n        return false;\n    const change = changes['model'];\n    if (change.isFirstChange())\n        return true;\n    return !Object.is(viewModel, change.currentValue);\n}\nconst BUILTIN_ACCESSORS = [\n    CheckboxControlValueAccessor,\n    RangeValueAccessor,\n    NumberValueAccessor,\n    SelectControlValueAccessor,\n    SelectMultipleControlValueAccessor,\n    RadioControlValueAccessor,\n];\nfunction isBuiltInAccessor(valueAccessor) {\n    return BUILTIN_ACCESSORS.some(a => valueAccessor.constructor === a);\n}\nfunction syncPendingControls(form, directives) {\n    form._syncPendingControls();\n    directives.forEach(dir => {\n        const control = dir.control;\n        if (control.updateOn === 'submit' && control._pendingChange) {\n            dir.viewToModelUpdate(control._pendingValue);\n            control._pendingChange = false;\n        }\n    });\n}\n// TODO: vsavkin remove it once https://github.com/angular/angular/issues/3011 is implemented\nfunction selectValueAccessor(dir, valueAccessors) {\n    if (!valueAccessors)\n        return null;\n    if (!Array.isArray(valueAccessors) && (typeof ngDevMode === 'undefined' || ngDevMode))\n        _throwError(dir, 'Value accessor was not provided as an array for form control with');\n    let defaultAccessor = undefined;\n    let builtinAccessor = undefined;\n    let customAccessor = undefined;\n    valueAccessors.forEach((v) => {\n        if (v.constructor === DefaultValueAccessor) {\n            defaultAccessor = v;\n        }\n        else if (isBuiltInAccessor(v)) {\n            if (builtinAccessor && (typeof ngDevMode === 'undefined' || ngDevMode))\n                _throwError(dir, 'More than one built-in value accessor matches form control with');\n            builtinAccessor = v;\n        }\n        else {\n            if (customAccessor && (typeof ngDevMode === 'undefined' || ngDevMode))\n                _throwError(dir, 'More than one custom value accessor matches form control with');\n            customAccessor = v;\n        }\n    });\n    if (customAccessor)\n        return customAccessor;\n    if (builtinAccessor)\n        return builtinAccessor;\n    if (defaultAccessor)\n        return defaultAccessor;\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        _throwError(dir, 'No valid value accessor for form control with');\n    }\n    return null;\n}\nfunction removeListItem(list, el) {\n    const index = list.indexOf(el);\n    if (index > -1)\n        list.splice(index, 1);\n}\n// TODO(kara): remove after deprecation period\nfunction _ngModelWarning(name, type, instance, warningConfig) {\n    if (warningConfig === 'never')\n        return;\n    if (((warningConfig === null || warningConfig === 'once') && !type._ngModelWarningSentOnce) ||\n        (warningConfig === 'always' && !instance._ngModelWarningSent)) {\n        ReactiveErrors.ngModelWarning(name);\n        type._ngModelWarningSentOnce = true;\n        instance._ngModelWarningSent = true;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reports that a FormControl is valid, meaning that no errors exist in the input value.\n *\n * @see `status`\n */\nconst VALID = 'VALID';\n/**\n * Reports that a FormControl is invalid, meaning that an error exists in the input value.\n *\n * @see `status`\n */\nconst INVALID = 'INVALID';\n/**\n * Reports that a FormControl is pending, meaning that that async validation is occurring and\n * errors are not yet available for the input value.\n *\n * @see `markAsPending`\n * @see `status`\n */\nconst PENDING = 'PENDING';\n/**\n * Reports that a FormControl is disabled, meaning that the control is exempt from ancestor\n * calculations of validity or value.\n *\n * @see `markAsDisabled`\n * @see `status`\n */\nconst DISABLED = 'DISABLED';\nfunction _find(control, path, delimiter) {\n    if (path == null)\n        return null;\n    if (!Array.isArray(path)) {\n        path = path.split(delimiter);\n    }\n    if (Array.isArray(path) && path.length === 0)\n        return null;\n    // Not using Array.reduce here due to a Chrome 80 bug\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=1049982\n    let controlToFind = control;\n    path.forEach((name) => {\n        if (controlToFind instanceof FormGroup) {\n            controlToFind = controlToFind.controls.hasOwnProperty(name) ?\n                controlToFind.controls[name] :\n                null;\n        }\n        else if (controlToFind instanceof FormArray) {\n            controlToFind = controlToFind.at(name) || null;\n        }\n        else {\n            controlToFind = null;\n        }\n    });\n    return controlToFind;\n}\n/**\n * Gets validators from either an options object or given validators.\n */\nfunction pickValidators(validatorOrOpts) {\n    return (isOptionsObj(validatorOrOpts) ? validatorOrOpts.validators : validatorOrOpts) || null;\n}\n/**\n * Creates validator function by combining provided validators.\n */\nfunction coerceToValidator(validator) {\n    return Array.isArray(validator) ? composeValidators(validator) : validator || null;\n}\n/**\n * Gets async validators from either an options object or given validators.\n */\nfunction pickAsyncValidators(asyncValidator, validatorOrOpts) {\n    return (isOptionsObj(validatorOrOpts) ? validatorOrOpts.asyncValidators : asyncValidator) || null;\n}\n/**\n * Creates async validator function by combining provided async validators.\n */\nfunction coerceToAsyncValidator(asyncValidator) {\n    return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) :\n        asyncValidator || null;\n}\nfunction isOptionsObj(validatorOrOpts) {\n    return validatorOrOpts != null && !Array.isArray(validatorOrOpts) &&\n        typeof validatorOrOpts === 'object';\n}\n/**\n * This is the base class for `FormControl`, `FormGroup`, and `FormArray`.\n *\n * It provides some of the shared behavior that all controls and groups of controls have, like\n * running validators, calculating status, and resetting state. It also defines the properties\n * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n * instantiated directly.\n *\n * @see [Forms Guide](/guide/forms)\n * @see [Reactive Forms Guide](/guide/reactive-forms)\n * @see [Dynamic Forms Guide](/guide/dynamic-form)\n *\n * @publicApi\n */\nclass AbstractControl {\n    /**\n     * Initialize the AbstractControl instance.\n     *\n     * @param validators The function or array of functions that is used to determine the validity of\n     *     this control synchronously.\n     * @param asyncValidators The function or array of functions that is used to determine validity of\n     *     this control asynchronously.\n     */\n    constructor(validators, asyncValidators) {\n        /**\n         * Indicates that a control has its own pending asynchronous validation in progress.\n         *\n         * @internal\n         */\n        this._hasOwnPendingAsyncValidator = false;\n        /** @internal */\n        this._onCollectionChange = () => { };\n        this._parent = null;\n        /**\n         * A control is `pristine` if the user has not yet changed\n         * the value in the UI.\n         *\n         * @returns True if the user has not yet changed the value in the UI; compare `dirty`.\n         * Programmatic changes to a control's value do not mark it dirty.\n         */\n        this.pristine = true;\n        /**\n         * True if the control is marked as `touched`.\n         *\n         * A control is marked `touched` once the user has triggered\n         * a `blur` event on it.\n         */\n        this.touched = false;\n        /** @internal */\n        this._onDisabledChange = [];\n        this._rawValidators = validators;\n        this._rawAsyncValidators = asyncValidators;\n        this._composedValidatorFn = coerceToValidator(this._rawValidators);\n        this._composedAsyncValidatorFn = coerceToAsyncValidator(this._rawAsyncValidators);\n    }\n    /**\n     * The function that is used to determine the validity of this control synchronously.\n     */\n    get validator() {\n        return this._composedValidatorFn;\n    }\n    set validator(validatorFn) {\n        this._rawValidators = this._composedValidatorFn = validatorFn;\n    }\n    /**\n     * The function that is used to determine the validity of this control asynchronously.\n     */\n    get asyncValidator() {\n        return this._composedAsyncValidatorFn;\n    }\n    set asyncValidator(asyncValidatorFn) {\n        this._rawAsyncValidators = this._composedAsyncValidatorFn = asyncValidatorFn;\n    }\n    /**\n     * The parent control.\n     */\n    get parent() {\n        return this._parent;\n    }\n    /**\n     * A control is `valid` when its `status` is `VALID`.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     * @returns True if the control has passed all of its validation tests,\n     * false otherwise.\n     */\n    get valid() {\n        return this.status === VALID;\n    }\n    /**\n     * A control is `invalid` when its `status` is `INVALID`.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     * @returns True if this control has failed one or more of its validation checks,\n     * false otherwise.\n     */\n    get invalid() {\n        return this.status === INVALID;\n    }\n    /**\n     * A control is `pending` when its `status` is `PENDING`.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     * @returns True if this control is in the process of conducting a validation check,\n     * false otherwise.\n     */\n    get pending() {\n        return this.status == PENDING;\n    }\n    /**\n     * A control is `disabled` when its `status` is `DISABLED`.\n     *\n     * Disabled controls are exempt from validation checks and\n     * are not included in the aggregate value of their ancestor\n     * controls.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     * @returns True if the control is disabled, false otherwise.\n     */\n    get disabled() {\n        return this.status === DISABLED;\n    }\n    /**\n     * A control is `enabled` as long as its `status` is not `DISABLED`.\n     *\n     * @returns True if the control has any status other than 'DISABLED',\n     * false if the status is 'DISABLED'.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     */\n    get enabled() {\n        return this.status !== DISABLED;\n    }\n    /**\n     * A control is `dirty` if the user has changed the value\n     * in the UI.\n     *\n     * @returns True if the user has changed the value of this control in the UI; compare `pristine`.\n     * Programmatic changes to a control's value do not mark it dirty.\n     */\n    get dirty() {\n        return !this.pristine;\n    }\n    /**\n     * True if the control has not been marked as touched\n     *\n     * A control is `untouched` if the user has not yet triggered\n     * a `blur` event on it.\n     */\n    get untouched() {\n        return !this.touched;\n    }\n    /**\n     * Reports the update strategy of the `AbstractControl` (meaning\n     * the event on which the control updates itself).\n     * Possible values: `'change'` | `'blur'` | `'submit'`\n     * Default value: `'change'`\n     */\n    get updateOn() {\n        return this._updateOn ? this._updateOn : (this.parent ? this.parent.updateOn : 'change');\n    }\n    /**\n     * Sets the synchronous validators that are active on this control.  Calling\n     * this overwrites any existing sync validators.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     */\n    setValidators(newValidator) {\n        this._rawValidators = newValidator;\n        this._composedValidatorFn = coerceToValidator(newValidator);\n    }\n    /**\n     * Sets the async validators that are active on this control. Calling this\n     * overwrites any existing async validators.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     */\n    setAsyncValidators(newValidator) {\n        this._rawAsyncValidators = newValidator;\n        this._composedAsyncValidatorFn = coerceToAsyncValidator(newValidator);\n    }\n    /**\n     * Empties out the sync validator list.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     */\n    clearValidators() {\n        this.validator = null;\n    }\n    /**\n     * Empties out the async validator list.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     */\n    clearAsyncValidators() {\n        this.asyncValidator = null;\n    }\n    /**\n     * Marks the control as `touched`. A control is touched by focus and\n     * blur events that do not change the value.\n     *\n     * @see `markAsUntouched()`\n     * @see `markAsDirty()`\n     * @see `markAsPristine()`\n     *\n     * @param opts Configuration options that determine how the control propagates changes\n     * and emits events after marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     */\n    markAsTouched(opts = {}) {\n        this.touched = true;\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsTouched(opts);\n        }\n    }\n    /**\n     * Marks the control and all its descendant controls as `touched`.\n     * @see `markAsTouched()`\n     */\n    markAllAsTouched() {\n        this.markAsTouched({ onlySelf: true });\n        this._forEachChild((control) => control.markAllAsTouched());\n    }\n    /**\n     * Marks the control as `untouched`.\n     *\n     * If the control has any children, also marks all children as `untouched`\n     * and recalculates the `touched` status of all parent controls.\n     *\n     * @see `markAsTouched()`\n     * @see `markAsDirty()`\n     * @see `markAsPristine()`\n     *\n     * @param opts Configuration options that determine how the control propagates changes\n     * and emits events after the marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     */\n    markAsUntouched(opts = {}) {\n        this.touched = false;\n        this._pendingTouched = false;\n        this._forEachChild((control) => {\n            control.markAsUntouched({ onlySelf: true });\n        });\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updateTouched(opts);\n        }\n    }\n    /**\n     * Marks the control as `dirty`. A control becomes dirty when\n     * the control's value is changed through the UI; compare `markAsTouched`.\n     *\n     * @see `markAsTouched()`\n     * @see `markAsUntouched()`\n     * @see `markAsPristine()`\n     *\n     * @param opts Configuration options that determine how the control propagates changes\n     * and emits events after marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     */\n    markAsDirty(opts = {}) {\n        this.pristine = false;\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsDirty(opts);\n        }\n    }\n    /**\n     * Marks the control as `pristine`.\n     *\n     * If the control has any children, marks all children as `pristine`,\n     * and recalculates the `pristine` status of all parent\n     * controls.\n     *\n     * @see `markAsTouched()`\n     * @see `markAsUntouched()`\n     * @see `markAsDirty()`\n     *\n     * @param opts Configuration options that determine how the control emits events after\n     * marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     */\n    markAsPristine(opts = {}) {\n        this.pristine = true;\n        this._pendingDirty = false;\n        this._forEachChild((control) => {\n            control.markAsPristine({ onlySelf: true });\n        });\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updatePristine(opts);\n        }\n    }\n    /**\n     * Marks the control as `pending`.\n     *\n     * A control is pending while the control performs async validation.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     * @param opts Configuration options that determine how the control propagates changes and\n     * emits events after marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     * * `emitEvent`: When true or not supplied (the default), the `statusChanges`\n     * observable emits an event with the latest status the control is marked pending.\n     * When false, no events are emitted.\n     *\n     */\n    markAsPending(opts = {}) {\n        this.status = PENDING;\n        if (opts.emitEvent !== false) {\n            this.statusChanges.emit(this.status);\n        }\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsPending(opts);\n        }\n    }\n    /**\n     * Disables the control. This means the control is exempt from validation checks and\n     * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n     *\n     * If the control has children, all children are also disabled.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     * @param opts Configuration options that determine how the control propagates\n     * changes and emits events after the control is disabled.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is disabled.\n     * When false, no events are emitted.\n     */\n    disable(opts = {}) {\n        // If parent has been marked artificially dirty we don't want to re-calculate the\n        // parent's dirtiness based on the children.\n        const skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);\n        this.status = DISABLED;\n        this.errors = null;\n        this._forEachChild((control) => {\n            control.disable(Object.assign(Object.assign({}, opts), { onlySelf: true }));\n        });\n        this._updateValue();\n        if (opts.emitEvent !== false) {\n            this.valueChanges.emit(this.value);\n            this.statusChanges.emit(this.status);\n        }\n        this._updateAncestors(Object.assign(Object.assign({}, opts), { skipPristineCheck }));\n        this._onDisabledChange.forEach((changeFn) => changeFn(true));\n    }\n    /**\n     * Enables the control. This means the control is included in validation checks and\n     * the aggregate value of its parent. Its status recalculates based on its value and\n     * its validators.\n     *\n     * By default, if the control has children, all children are enabled.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     * @param opts Configure options that control how the control propagates changes and\n     * emits events when marked as untouched\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is enabled.\n     * When false, no events are emitted.\n     */\n    enable(opts = {}) {\n        // If parent has been marked artificially dirty we don't want to re-calculate the\n        // parent's dirtiness based on the children.\n        const skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);\n        this.status = VALID;\n        this._forEachChild((control) => {\n            control.enable(Object.assign(Object.assign({}, opts), { onlySelf: true }));\n        });\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });\n        this._updateAncestors(Object.assign(Object.assign({}, opts), { skipPristineCheck }));\n        this._onDisabledChange.forEach((changeFn) => changeFn(false));\n    }\n    _updateAncestors(opts) {\n        if (this._parent && !opts.onlySelf) {\n            this._parent.updateValueAndValidity(opts);\n            if (!opts.skipPristineCheck) {\n                this._parent._updatePristine();\n            }\n            this._parent._updateTouched();\n        }\n    }\n    /**\n     * @param parent Sets the parent of the control\n     */\n    setParent(parent) {\n        this._parent = parent;\n    }\n    /**\n     * Recalculates the value and validation status of the control.\n     *\n     * By default, it also updates the value and validity of its ancestors.\n     *\n     * @param opts Configuration options determine how the control propagates changes and emits events\n     * after updates and validity checks are applied.\n     * * `onlySelf`: When true, only update this control. When false or not supplied,\n     * update all direct ancestors. Default is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is updated.\n     * When false, no events are emitted.\n     */\n    updateValueAndValidity(opts = {}) {\n        this._setInitialStatus();\n        this._updateValue();\n        if (this.enabled) {\n            this._cancelExistingSubscription();\n            this.errors = this._runValidator();\n            this.status = this._calculateStatus();\n            if (this.status === VALID || this.status === PENDING) {\n                this._runAsyncValidator(opts.emitEvent);\n            }\n        }\n        if (opts.emitEvent !== false) {\n            this.valueChanges.emit(this.value);\n            this.statusChanges.emit(this.status);\n        }\n        if (this._parent && !opts.onlySelf) {\n            this._parent.updateValueAndValidity(opts);\n        }\n    }\n    /** @internal */\n    _updateTreeValidity(opts = { emitEvent: true }) {\n        this._forEachChild((ctrl) => ctrl._updateTreeValidity(opts));\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });\n    }\n    _setInitialStatus() {\n        this.status = this._allControlsDisabled() ? DISABLED : VALID;\n    }\n    _runValidator() {\n        return this.validator ? this.validator(this) : null;\n    }\n    _runAsyncValidator(emitEvent) {\n        if (this.asyncValidator) {\n            this.status = PENDING;\n            this._hasOwnPendingAsyncValidator = true;\n            const obs = toObservable(this.asyncValidator(this));\n            this._asyncValidationSubscription = obs.subscribe((errors) => {\n                this._hasOwnPendingAsyncValidator = false;\n                // This will trigger the recalculation of the validation status, which depends on\n                // the state of the asynchronous validation (whether it is in progress or not). So, it is\n                // necessary that we have updated the `_hasOwnPendingAsyncValidator` boolean flag first.\n                this.setErrors(errors, { emitEvent });\n            });\n        }\n    }\n    _cancelExistingSubscription() {\n        if (this._asyncValidationSubscription) {\n            this._asyncValidationSubscription.unsubscribe();\n            this._hasOwnPendingAsyncValidator = false;\n        }\n    }\n    /**\n     * Sets errors on a form control when running validations manually, rather than automatically.\n     *\n     * Calling `setErrors` also updates the validity of the parent control.\n     *\n     * @usageNotes\n     *\n     * ### Manually set the errors for a control\n     *\n     * ```\n     * const login = new FormControl('someLogin');\n     * login.setErrors({\n     *   notUnique: true\n     * });\n     *\n     * expect(login.valid).toEqual(false);\n     * expect(login.errors).toEqual({ notUnique: true });\n     *\n     * login.setValue('someOtherLogin');\n     *\n     * expect(login.valid).toEqual(true);\n     * ```\n     */\n    setErrors(errors, opts = {}) {\n        this.errors = errors;\n        this._updateControlsErrors(opts.emitEvent !== false);\n    }\n    /**\n     * Retrieves a child control given the control's name or path.\n     *\n     * @param path A dot-delimited string or array of string/number values that define the path to the\n     * control.\n     *\n     * @usageNotes\n     * ### Retrieve a nested control\n     *\n     * For example, to get a `name` control nested within a `person` sub-group:\n     *\n     * * `this.form.get('person.name');`\n     *\n     * -OR-\n     *\n     * * `this.form.get(['person', 'name']);`\n     */\n    get(path) {\n        return _find(this, path, '.');\n    }\n    /**\n     * @description\n     * Reports error data for the control with the given path.\n     *\n     * @param errorCode The code of the error to check\n     * @param path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * @returns error data for that particular error. If the control or error is not present,\n     * null is returned.\n     */\n    getError(errorCode, path) {\n        const control = path ? this.get(path) : this;\n        return control && control.errors ? control.errors[errorCode] : null;\n    }\n    /**\n     * @description\n     * Reports whether the control with the given path has the error specified.\n     *\n     * @param errorCode The code of the error to check\n     * @param path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * If no path is given, this method checks for the error on the current control.\n     *\n     * @returns whether the given error is present in the control at the given path.\n     *\n     * If the control is not present, false is returned.\n     */\n    hasError(errorCode, path) {\n        return !!this.getError(errorCode, path);\n    }\n    /**\n     * Retrieves the top-level ancestor of this control.\n     */\n    get root() {\n        let x = this;\n        while (x._parent) {\n            x = x._parent;\n        }\n        return x;\n    }\n    /** @internal */\n    _updateControlsErrors(emitEvent) {\n        this.status = this._calculateStatus();\n        if (emitEvent) {\n            this.statusChanges.emit(this.status);\n        }\n        if (this._parent) {\n            this._parent._updateControlsErrors(emitEvent);\n        }\n    }\n    /** @internal */\n    _initObservables() {\n        this.valueChanges = new EventEmitter();\n        this.statusChanges = new EventEmitter();\n    }\n    _calculateStatus() {\n        if (this._allControlsDisabled())\n            return DISABLED;\n        if (this.errors)\n            return INVALID;\n        if (this._hasOwnPendingAsyncValidator || this._anyControlsHaveStatus(PENDING))\n            return PENDING;\n        if (this._anyControlsHaveStatus(INVALID))\n            return INVALID;\n        return VALID;\n    }\n    /** @internal */\n    _anyControlsHaveStatus(status) {\n        return this._anyControls((control) => control.status === status);\n    }\n    /** @internal */\n    _anyControlsDirty() {\n        return this._anyControls((control) => control.dirty);\n    }\n    /** @internal */\n    _anyControlsTouched() {\n        return this._anyControls((control) => control.touched);\n    }\n    /** @internal */\n    _updatePristine(opts = {}) {\n        this.pristine = !this._anyControlsDirty();\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updatePristine(opts);\n        }\n    }\n    /** @internal */\n    _updateTouched(opts = {}) {\n        this.touched = this._anyControlsTouched();\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updateTouched(opts);\n        }\n    }\n    /** @internal */\n    _isBoxedValue(formState) {\n        return typeof formState === 'object' && formState !== null &&\n            Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;\n    }\n    /** @internal */\n    _registerOnCollectionChange(fn) {\n        this._onCollectionChange = fn;\n    }\n    /** @internal */\n    _setUpdateStrategy(opts) {\n        if (isOptionsObj(opts) && opts.updateOn != null) {\n            this._updateOn = opts.updateOn;\n        }\n    }\n    /**\n     * Check to see if parent has been marked artificially dirty.\n     *\n     * @internal\n     */\n    _parentMarkedDirty(onlySelf) {\n        const parentDirty = this._parent && this._parent.dirty;\n        return !onlySelf && !!parentDirty && !this._parent._anyControlsDirty();\n    }\n}\n/**\n * Tracks the value and validation status of an individual form control.\n *\n * This is one of the three fundamental building blocks of Angular forms, along with\n * `FormGroup` and `FormArray`. It extends the `AbstractControl` class that\n * implements most of the base functionality for accessing the value, validation status,\n * user interactions and events. See [usage examples below](#usage-notes).\n *\n * @see `AbstractControl`\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see [Usage Notes](#usage-notes)\n *\n * @usageNotes\n *\n * ### Initializing Form Controls\n *\n * Instantiate a `FormControl`, with an initial value.\n *\n * ```ts\n * const control = new FormControl('some value');\n * console.log(control.value);     // 'some value'\n *```\n *\n * The following example initializes the control with a form state object. The `value`\n * and `disabled` keys are required in this case.\n *\n * ```ts\n * const control = new FormControl({ value: 'n/a', disabled: true });\n * console.log(control.value);     // 'n/a'\n * console.log(control.status);    // 'DISABLED'\n * ```\n *\n * The following example initializes the control with a sync validator.\n *\n * ```ts\n * const control = new FormControl('', Validators.required);\n * console.log(control.value);      // ''\n * console.log(control.status);     // 'INVALID'\n * ```\n *\n * The following example initializes the control using an options object.\n *\n * ```ts\n * const control = new FormControl('', {\n *    validators: Validators.required,\n *    asyncValidators: myAsyncValidator\n * });\n * ```\n *\n * ### Configure the control to update on a blur event\n *\n * Set the `updateOn` option to `'blur'` to update on the blur `event`.\n *\n * ```ts\n * const control = new FormControl('', { updateOn: 'blur' });\n * ```\n *\n * ### Configure the control to update on a submit event\n *\n * Set the `updateOn` option to `'submit'` to update on a submit `event`.\n *\n * ```ts\n * const control = new FormControl('', { updateOn: 'submit' });\n * ```\n *\n * ### Reset the control back to an initial value\n *\n * You reset to a specific form state by passing through a standalone\n * value or a form state object that contains both a value and a disabled state\n * (these are the only two properties that cannot be calculated).\n *\n * ```ts\n * const control = new FormControl('Nancy');\n *\n * console.log(control.value); // 'Nancy'\n *\n * control.reset('Drew');\n *\n * console.log(control.value); // 'Drew'\n * ```\n *\n * ### Reset the control back to an initial value and disabled\n *\n * ```\n * const control = new FormControl('Nancy');\n *\n * console.log(control.value); // 'Nancy'\n * console.log(control.status); // 'VALID'\n *\n * control.reset({ value: 'Drew', disabled: true });\n *\n * console.log(control.value); // 'Drew'\n * console.log(control.status); // 'DISABLED'\n * ```\n *\n * @publicApi\n */\nclass FormControl extends AbstractControl {\n    /**\n     * Creates a new `FormControl` instance.\n     *\n     * @param formState Initializes the control with an initial value,\n     * or an object that defines the initial value and disabled state.\n     *\n     * @param validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains validation functions\n     * and a validation trigger.\n     *\n     * @param asyncValidator A single async validator or array of async validator functions\n     *\n     */\n    constructor(formState = null, validatorOrOpts, asyncValidator) {\n        super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));\n        /** @internal */\n        this._onChange = [];\n        this._applyFormState(formState);\n        this._setUpdateStrategy(validatorOrOpts);\n        this._initObservables();\n        this.updateValueAndValidity({\n            onlySelf: true,\n            // If `asyncValidator` is present, it will trigger control status change from `PENDING` to\n            // `VALID` or `INVALID`.\n            // The status should be broadcasted via the `statusChanges` observable, so we set `emitEvent`\n            // to `true` to allow that during the control creation process.\n            emitEvent: !!asyncValidator\n        });\n    }\n    /**\n     * Sets a new value for the form control.\n     *\n     * @param value The new value for the control.\n     * @param options Configuration options that determine how the control propagates changes\n     * and emits events when the value changes.\n     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * * `emitModelToViewChange`: When true or not supplied  (the default), each change triggers an\n     * `onChange` event to\n     * update the view.\n     * * `emitViewToModelChange`: When true or not supplied (the default), each change triggers an\n     * `ngModelChange`\n     * event to update the model.\n     *\n     */\n    setValue(value, options = {}) {\n        this.value = this._pendingValue = value;\n        if (this._onChange.length && options.emitModelToViewChange !== false) {\n            this._onChange.forEach((changeFn) => changeFn(this.value, options.emitViewToModelChange !== false));\n        }\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Patches the value of a control.\n     *\n     * This function is functionally the same as {@link FormControl#setValue setValue} at this level.\n     * It exists for symmetry with {@link FormGroup#patchValue patchValue} on `FormGroups` and\n     * `FormArrays`, where it does behave differently.\n     *\n     * @see `setValue` for options\n     */\n    patchValue(value, options = {}) {\n        this.setValue(value, options);\n    }\n    /**\n     * Resets the form control, marking it `pristine` and `untouched`, and setting\n     * the value to null.\n     *\n     * @param formState Resets the control with an initial value,\n     * or an object that defines the initial value and disabled state.\n     *\n     * @param options Configuration options that determine how the control propagates changes\n     * and emits events after the value changes.\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is reset.\n     * When false, no events are emitted.\n     *\n     */\n    reset(formState = null, options = {}) {\n        this._applyFormState(formState);\n        this.markAsPristine(options);\n        this.markAsUntouched(options);\n        this.setValue(this.value, options);\n        this._pendingChange = false;\n    }\n    /**\n     * @internal\n     */\n    _updateValue() { }\n    /**\n     * @internal\n     */\n    _anyControls(condition) {\n        return false;\n    }\n    /**\n     * @internal\n     */\n    _allControlsDisabled() {\n        return this.disabled;\n    }\n    /**\n     * Register a listener for change events.\n     *\n     * @param fn The method that is called when the value changes\n     */\n    registerOnChange(fn) {\n        this._onChange.push(fn);\n    }\n    /**\n     * Internal function to unregister a change events listener.\n     * @internal\n     */\n    _unregisterOnChange(fn) {\n        removeListItem(this._onChange, fn);\n    }\n    /**\n     * Register a listener for disabled events.\n     *\n     * @param fn The method that is called when the disabled status changes.\n     */\n    registerOnDisabledChange(fn) {\n        this._onDisabledChange.push(fn);\n    }\n    /**\n     * Internal function to unregister a disabled event listener.\n     * @internal\n     */\n    _unregisterOnDisabledChange(fn) {\n        removeListItem(this._onDisabledChange, fn);\n    }\n    /**\n     * @internal\n     */\n    _forEachChild(cb) { }\n    /** @internal */\n    _syncPendingControls() {\n        if (this.updateOn === 'submit') {\n            if (this._pendingDirty)\n                this.markAsDirty();\n            if (this._pendingTouched)\n                this.markAsTouched();\n            if (this._pendingChange) {\n                this.setValue(this._pendingValue, { onlySelf: true, emitModelToViewChange: false });\n                return true;\n            }\n        }\n        return false;\n    }\n    _applyFormState(formState) {\n        if (this._isBoxedValue(formState)) {\n            this.value = this._pendingValue = formState.value;\n            formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :\n                this.enable({ onlySelf: true, emitEvent: false });\n        }\n        else {\n            this.value = this._pendingValue = formState;\n        }\n    }\n}\n/**\n * Tracks the value and validity state of a group of `FormControl` instances.\n *\n * A `FormGroup` aggregates the values of each child `FormControl` into one object,\n * with each control name as the key.  It calculates its status by reducing the status values\n * of its children. For example, if one of the controls in a group is invalid, the entire\n * group becomes invalid.\n *\n * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n * along with `FormControl` and `FormArray`.\n *\n * When instantiating a `FormGroup`, pass in a collection of child controls as the first\n * argument. The key for each child registers the name for the control.\n *\n * @usageNotes\n *\n * ### Create a form group with 2 controls\n *\n * ```\n * const form = new FormGroup({\n *   first: new FormControl('Nancy', Validators.minLength(2)),\n *   last: new FormControl('Drew'),\n * });\n *\n * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n * console.log(form.status);  // 'VALID'\n * ```\n *\n * ### Create a form group with a group-level validator\n *\n * You include group-level validators as the second arg, or group-level async\n * validators as the third arg. These come in handy when you want to perform validation\n * that considers the value of more than one child control.\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('', Validators.minLength(2)),\n *   passwordConfirm: new FormControl('', Validators.minLength(2)),\n * }, passwordMatchValidator);\n *\n *\n * function passwordMatchValidator(g: FormGroup) {\n *    return g.get('password').value === g.get('passwordConfirm').value\n *       ? null : {'mismatch': true};\n * }\n * ```\n *\n * Like `FormControl` instances, you choose to pass in\n * validators and async validators as part of an options object.\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('')\n *   passwordConfirm: new FormControl('')\n * }, { validators: passwordMatchValidator, asyncValidators: otherValidator });\n * ```\n *\n * ### Set the updateOn property for all controls in a form group\n *\n * The options object is used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * group level, all child controls default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const c = new FormGroup({\n *   one: new FormControl()\n * }, { updateOn: 'blur' });\n * ```\n *\n * @publicApi\n */\nclass FormGroup extends AbstractControl {\n    /**\n     * Creates a new `FormGroup` instance.\n     *\n     * @param controls A collection of child controls. The key for each child is the name\n     * under which it is registered.\n     *\n     * @param validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains validation functions\n     * and a validation trigger.\n     *\n     * @param asyncValidator A single async validator or array of async validator functions\n     *\n     */\n    constructor(controls, validatorOrOpts, asyncValidator) {\n        super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));\n        this.controls = controls;\n        this._initObservables();\n        this._setUpdateStrategy(validatorOrOpts);\n        this._setUpControls();\n        this.updateValueAndValidity({\n            onlySelf: true,\n            // If `asyncValidator` is present, it will trigger control status change from `PENDING` to\n            // `VALID` or `INVALID`. The status should be broadcasted via the `statusChanges` observable,\n            // so we set `emitEvent` to `true` to allow that during the control creation process.\n            emitEvent: !!asyncValidator\n        });\n    }\n    /**\n     * Registers a control with the group's list of controls.\n     *\n     * This method does not update the value or validity of the control.\n     * Use {@link FormGroup#addControl addControl} instead.\n     *\n     * @param name The control name to register in the collection\n     * @param control Provides the control for the given name\n     */\n    registerControl(name, control) {\n        if (this.controls[name])\n            return this.controls[name];\n        this.controls[name] = control;\n        control.setParent(this);\n        control._registerOnCollectionChange(this._onCollectionChange);\n        return control;\n    }\n    /**\n     * Add a control to this group.\n     *\n     * This method also updates the value and validity of the control.\n     *\n     * @param name The control name to add to the collection\n     * @param control Provides the control for the given name\n     */\n    addControl(name, control) {\n        this.registerControl(name, control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    }\n    /**\n     * Remove a control from this group.\n     *\n     * @param name The control name to remove from the collection\n     */\n    removeControl(name) {\n        if (this.controls[name])\n            this.controls[name]._registerOnCollectionChange(() => { });\n        delete (this.controls[name]);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    }\n    /**\n     * Replace an existing control.\n     *\n     * @param name The control name to replace in the collection\n     * @param control Provides the control for the given name\n     */\n    setControl(name, control) {\n        if (this.controls[name])\n            this.controls[name]._registerOnCollectionChange(() => { });\n        delete (this.controls[name]);\n        if (control)\n            this.registerControl(name, control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    }\n    /**\n     * Check whether there is an enabled control with the given name in the group.\n     *\n     * Reports false for disabled controls. If you'd like to check for existence in the group\n     * only, use {@link AbstractControl#get get} instead.\n     *\n     * @param controlName The control name to check for existence in the collection\n     *\n     * @returns false for disabled controls, true otherwise.\n     */\n    contains(controlName) {\n        return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n    }\n    /**\n     * Sets the value of the `FormGroup`. It accepts an object that matches\n     * the structure of the group, with control names as keys.\n     *\n     * @usageNotes\n     * ### Set the complete value for the form group\n     *\n     * ```\n     * const form = new FormGroup({\n     *   first: new FormControl(),\n     *   last: new FormControl()\n     * });\n     *\n     * console.log(form.value);   // {first: null, last: null}\n     *\n     * form.setValue({first: 'Nancy', last: 'Drew'});\n     * console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n     * ```\n     *\n     * @throws When strict checks fail, such as setting the value of a control\n     * that doesn't exist or if you exclude a value of a control that does exist.\n     *\n     * @param value The new value for the control that matches the structure of the group.\n     * @param options Configuration options that determine how the control propagates changes\n     * and emits events after the value changes.\n     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     */\n    setValue(value, options = {}) {\n        this._checkAllValuesPresent(value);\n        Object.keys(value).forEach(name => {\n            this._throwIfControlMissing(name);\n            this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Patches the value of the `FormGroup`. It accepts an object with control\n     * names as keys, and does its best to match the values to the correct controls\n     * in the group.\n     *\n     * It accepts both super-sets and sub-sets of the group without throwing an error.\n     *\n     * @usageNotes\n     * ### Patch the value for a form group\n     *\n     * ```\n     * const form = new FormGroup({\n     *    first: new FormControl(),\n     *    last: new FormControl()\n     * });\n     * console.log(form.value);   // {first: null, last: null}\n     *\n     * form.patchValue({first: 'Nancy'});\n     * console.log(form.value);   // {first: 'Nancy', last: null}\n     * ```\n     *\n     * @param value The object that matches the structure of the group.\n     * @param options Configuration options that determine how the control propagates changes and\n     * emits events after the value is patched.\n     * * `onlySelf`: When true, each change only affects this control and not its parent. Default is\n     * true.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     */\n    patchValue(value, options = {}) {\n        Object.keys(value).forEach(name => {\n            if (this.controls[name]) {\n                this.controls[name].patchValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n            }\n        });\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Resets the `FormGroup`, marks all descendants `pristine` and `untouched` and sets\n     * the value of all descendants to null.\n     *\n     * You reset to a specific form state by passing in a map of states\n     * that matches the structure of your form, with control names as keys. The state\n     * is a standalone value or a form state object with both a value and a disabled\n     * status.\n     *\n     * @param value Resets the control with an initial value,\n     * or an object that defines the initial value and disabled state.\n     *\n     * @param options Configuration options that determine how the control propagates changes\n     * and emits events when the group is reset.\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is reset.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     *\n     * @usageNotes\n     *\n     * ### Reset the form group values\n     *\n     * ```ts\n     * const form = new FormGroup({\n     *   first: new FormControl('first name'),\n     *   last: new FormControl('last name')\n     * });\n     *\n     * console.log(form.value);  // {first: 'first name', last: 'last name'}\n     *\n     * form.reset({ first: 'name', last: 'last name' });\n     *\n     * console.log(form.value);  // {first: 'name', last: 'last name'}\n     * ```\n     *\n     * ### Reset the form group values and disabled status\n     *\n     * ```\n     * const form = new FormGroup({\n     *   first: new FormControl('first name'),\n     *   last: new FormControl('last name')\n     * });\n     *\n     * form.reset({\n     *   first: {value: 'name', disabled: true},\n     *   last: 'last'\n     * });\n     *\n     * console.log(form.value);  // {last: 'last'}\n     * console.log(form.get('first').status);  // 'DISABLED'\n     * ```\n     */\n    reset(value = {}, options = {}) {\n        this._forEachChild((control, name) => {\n            control.reset(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this._updatePristine(options);\n        this._updateTouched(options);\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * The aggregate value of the `FormGroup`, including any disabled controls.\n     *\n     * Retrieves all values regardless of disabled status.\n     * The `value` property is the best way to get the value of the group, because\n     * it excludes disabled controls in the `FormGroup`.\n     */\n    getRawValue() {\n        return this._reduceChildren({}, (acc, control, name) => {\n            acc[name] = control instanceof FormControl ? control.value : control.getRawValue();\n            return acc;\n        });\n    }\n    /** @internal */\n    _syncPendingControls() {\n        let subtreeUpdated = this._reduceChildren(false, (updated, child) => {\n            return child._syncPendingControls() ? true : updated;\n        });\n        if (subtreeUpdated)\n            this.updateValueAndValidity({ onlySelf: true });\n        return subtreeUpdated;\n    }\n    /** @internal */\n    _throwIfControlMissing(name) {\n        if (!Object.keys(this.controls).length) {\n            throw new Error(`\n        There are no form controls registered with this group yet. If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      `);\n        }\n        if (!this.controls[name]) {\n            throw new Error(`Cannot find form control with name: ${name}.`);\n        }\n    }\n    /** @internal */\n    _forEachChild(cb) {\n        Object.keys(this.controls).forEach(k => cb(this.controls[k], k));\n    }\n    /** @internal */\n    _setUpControls() {\n        this._forEachChild((control) => {\n            control.setParent(this);\n            control._registerOnCollectionChange(this._onCollectionChange);\n        });\n    }\n    /** @internal */\n    _updateValue() {\n        this.value = this._reduceValue();\n    }\n    /** @internal */\n    _anyControls(condition) {\n        for (const controlName of Object.keys(this.controls)) {\n            const control = this.controls[controlName];\n            if (this.contains(controlName) && condition(control)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /** @internal */\n    _reduceValue() {\n        return this._reduceChildren({}, (acc, control, name) => {\n            if (control.enabled || this.disabled) {\n                acc[name] = control.value;\n            }\n            return acc;\n        });\n    }\n    /** @internal */\n    _reduceChildren(initValue, fn) {\n        let res = initValue;\n        this._forEachChild((control, name) => {\n            res = fn(res, control, name);\n        });\n        return res;\n    }\n    /** @internal */\n    _allControlsDisabled() {\n        for (const controlName of Object.keys(this.controls)) {\n            if (this.controls[controlName].enabled) {\n                return false;\n            }\n        }\n        return Object.keys(this.controls).length > 0 || this.disabled;\n    }\n    /** @internal */\n    _checkAllValuesPresent(value) {\n        this._forEachChild((control, name) => {\n            if (value[name] === undefined) {\n                throw new Error(`Must supply a value for form control with name: '${name}'.`);\n            }\n        });\n    }\n}\n/**\n * Tracks the value and validity state of an array of `FormControl`,\n * `FormGroup` or `FormArray` instances.\n *\n * A `FormArray` aggregates the values of each child `FormControl` into an array.\n * It calculates its status by reducing the status values of its children. For example, if one of\n * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n *\n * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n * along with `FormControl` and `FormGroup`.\n *\n * @usageNotes\n *\n * ### Create an array of form controls\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy', Validators.minLength(2)),\n *   new FormControl('Drew'),\n * ]);\n *\n * console.log(arr.value);   // ['Nancy', 'Drew']\n * console.log(arr.status);  // 'VALID'\n * ```\n *\n * ### Create a form array with array-level validators\n *\n * You include array-level validators and async validators. These come in handy\n * when you want to perform validation that considers the value of more than one child\n * control.\n *\n * The two types of validators are passed in separately as the second and third arg\n * respectively, or together as part of an options object.\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy'),\n *   new FormControl('Drew')\n * ], {validators: myValidator, asyncValidators: myAsyncValidator});\n * ```\n *\n * ### Set the updateOn property for all controls in a form array\n *\n * The options object is used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * array level, all child controls default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const arr = new FormArray([\n *    new FormControl()\n * ], {updateOn: 'blur'});\n * ```\n *\n * ### Adding or removing controls from a form array\n *\n * To change the controls in the array, use the `push`, `insert`, `removeAt` or `clear` methods\n * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n * the `FormArray` directly, as that result in strange and unexpected behavior such\n * as broken change detection.\n *\n * @publicApi\n */\nclass FormArray extends AbstractControl {\n    /**\n     * Creates a new `FormArray` instance.\n     *\n     * @param controls An array of child controls. Each child control is given an index\n     * where it is registered.\n     *\n     * @param validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains validation functions\n     * and a validation trigger.\n     *\n     * @param asyncValidator A single async validator or array of async validator functions\n     *\n     */\n    constructor(controls, validatorOrOpts, asyncValidator) {\n        super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));\n        this.controls = controls;\n        this._initObservables();\n        this._setUpdateStrategy(validatorOrOpts);\n        this._setUpControls();\n        this.updateValueAndValidity({\n            onlySelf: true,\n            // If `asyncValidator` is present, it will trigger control status change from `PENDING` to\n            // `VALID` or `INVALID`.\n            // The status should be broadcasted via the `statusChanges` observable, so we set `emitEvent`\n            // to `true` to allow that during the control creation process.\n            emitEvent: !!asyncValidator\n        });\n    }\n    /**\n     * Get the `AbstractControl` at the given `index` in the array.\n     *\n     * @param index Index in the array to retrieve the control\n     */\n    at(index) {\n        return this.controls[index];\n    }\n    /**\n     * Insert a new `AbstractControl` at the end of the array.\n     *\n     * @param control Form control to be inserted\n     */\n    push(control) {\n        this.controls.push(control);\n        this._registerControl(control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    }\n    /**\n     * Insert a new `AbstractControl` at the given `index` in the array.\n     *\n     * @param index Index in the array to insert the control\n     * @param control Form control to be inserted\n     */\n    insert(index, control) {\n        this.controls.splice(index, 0, control);\n        this._registerControl(control);\n        this.updateValueAndValidity();\n    }\n    /**\n     * Remove the control at the given `index` in the array.\n     *\n     * @param index Index in the array to remove the control\n     */\n    removeAt(index) {\n        if (this.controls[index])\n            this.controls[index]._registerOnCollectionChange(() => { });\n        this.controls.splice(index, 1);\n        this.updateValueAndValidity();\n    }\n    /**\n     * Replace an existing control.\n     *\n     * @param index Index in the array to replace the control\n     * @param control The `AbstractControl` control to replace the existing control\n     */\n    setControl(index, control) {\n        if (this.controls[index])\n            this.controls[index]._registerOnCollectionChange(() => { });\n        this.controls.splice(index, 1);\n        if (control) {\n            this.controls.splice(index, 0, control);\n            this._registerControl(control);\n        }\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    }\n    /**\n     * Length of the control array.\n     */\n    get length() {\n        return this.controls.length;\n    }\n    /**\n     * Sets the value of the `FormArray`. It accepts an array that matches\n     * the structure of the control.\n     *\n     * This method performs strict checks, and throws an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     * @usageNotes\n     * ### Set the values for the controls in the form array\n     *\n     * ```\n     * const arr = new FormArray([\n     *   new FormControl(),\n     *   new FormControl()\n     * ]);\n     * console.log(arr.value);   // [null, null]\n     *\n     * arr.setValue(['Nancy', 'Drew']);\n     * console.log(arr.value);   // ['Nancy', 'Drew']\n     * ```\n     *\n     * @param value Array of values for the controls\n     * @param options Configure options that determine how the control propagates changes and\n     * emits events after the value changes\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n     * is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     */\n    setValue(value, options = {}) {\n        this._checkAllValuesPresent(value);\n        value.forEach((newValue, index) => {\n            this._throwIfControlMissing(index);\n            this.at(index).setValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Patches the value of the `FormArray`. It accepts an array that matches the\n     * structure of the control, and does its best to match the values to the correct\n     * controls in the group.\n     *\n     * It accepts both super-sets and sub-sets of the array without throwing an error.\n     *\n     * @usageNotes\n     * ### Patch the values for controls in a form array\n     *\n     * ```\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     * console.log(arr.value);   // [null, null]\n     *\n     * arr.patchValue(['Nancy']);\n     * console.log(arr.value);   // ['Nancy', null]\n     * ```\n     *\n     * @param value Array of latest values for the controls\n     * @param options Configure options that determine how the control propagates changes and\n     * emits events after the value changes\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n     * is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     */\n    patchValue(value, options = {}) {\n        value.forEach((newValue, index) => {\n            if (this.at(index)) {\n                this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });\n            }\n        });\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Resets the `FormArray` and all descendants are marked `pristine` and `untouched`, and the\n     * value of all descendants to null or null maps.\n     *\n     * You reset to a specific form state by passing in an array of states\n     * that matches the structure of the control. The state is a standalone value\n     * or a form state object with both a value and a disabled status.\n     *\n     * @usageNotes\n     * ### Reset the values in a form array\n     *\n     * ```ts\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     * arr.reset(['name', 'last name']);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * ```\n     *\n     * ### Reset the values in a form array and the disabled status for the first control\n     *\n     * ```\n     * this.arr.reset([\n     *   {value: 'name', disabled: true},\n     *   'last'\n     * ]);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * console.log(this.arr.get(0).status);  // 'DISABLED'\n     * ```\n     *\n     * @param value Array of values for the controls\n     * @param options Configure options that determine how the control propagates changes and\n     * emits events after the value changes\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n     * is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is reset.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     */\n    reset(value = [], options = {}) {\n        this._forEachChild((control, index) => {\n            control.reset(value[index], { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this._updatePristine(options);\n        this._updateTouched(options);\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * The aggregate value of the array, including any disabled controls.\n     *\n     * Reports all values regardless of disabled status.\n     * For enabled controls only, the `value` property is the best way to get the value of the array.\n     */\n    getRawValue() {\n        return this.controls.map((control) => {\n            return control instanceof FormControl ? control.value : control.getRawValue();\n        });\n    }\n    /**\n     * Remove all controls in the `FormArray`.\n     *\n     * @usageNotes\n     * ### Remove all elements from a FormArray\n     *\n     * ```ts\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     * console.log(arr.length);  // 2\n     *\n     * arr.clear();\n     * console.log(arr.length);  // 0\n     * ```\n     *\n     * It's a simpler and more efficient alternative to removing all elements one by one:\n     *\n     * ```ts\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     *\n     * while (arr.length) {\n     *    arr.removeAt(0);\n     * }\n     * ```\n     */\n    clear() {\n        if (this.controls.length < 1)\n            return;\n        this._forEachChild((control) => control._registerOnCollectionChange(() => { }));\n        this.controls.splice(0);\n        this.updateValueAndValidity();\n    }\n    /** @internal */\n    _syncPendingControls() {\n        let subtreeUpdated = this.controls.reduce((updated, child) => {\n            return child._syncPendingControls() ? true : updated;\n        }, false);\n        if (subtreeUpdated)\n            this.updateValueAndValidity({ onlySelf: true });\n        return subtreeUpdated;\n    }\n    /** @internal */\n    _throwIfControlMissing(index) {\n        if (!this.controls.length) {\n            throw new Error(`\n        There are no form controls registered with this array yet. If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      `);\n        }\n        if (!this.at(index)) {\n            throw new Error(`Cannot find form control at index ${index}`);\n        }\n    }\n    /** @internal */\n    _forEachChild(cb) {\n        this.controls.forEach((control, index) => {\n            cb(control, index);\n        });\n    }\n    /** @internal */\n    _updateValue() {\n        this.value =\n            this.controls.filter((control) => control.enabled || this.disabled)\n                .map((control) => control.value);\n    }\n    /** @internal */\n    _anyControls(condition) {\n        return this.controls.some((control) => control.enabled && condition(control));\n    }\n    /** @internal */\n    _setUpControls() {\n        this._forEachChild((control) => this._registerControl(control));\n    }\n    /** @internal */\n    _checkAllValuesPresent(value) {\n        this._forEachChild((control, i) => {\n            if (value[i] === undefined) {\n                throw new Error(`Must supply a value for form control at index: ${i}.`);\n            }\n        });\n    }\n    /** @internal */\n    _allControlsDisabled() {\n        for (const control of this.controls) {\n            if (control.enabled)\n                return false;\n        }\n        return this.controls.length > 0 || this.disabled;\n    }\n    _registerControl(control) {\n        control.setParent(this);\n        control._registerOnCollectionChange(this._onCollectionChange);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst formDirectiveProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => NgForm)\n};\nconst ɵ0 = () => Promise.resolve(null);\nconst resolvedPromise = (ɵ0)();\n/**\n * @description\n * Creates a top-level `FormGroup` instance and binds it to a form\n * to track aggregate form value and validation status.\n *\n * As soon as you import the `FormsModule`, this directive becomes active by default on\n * all `<form>` tags.  You don't need to add a special selector.\n *\n * You optionally export the directive into a local template variable using `ngForm` as the key\n * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n * `FormGroup` instance are duplicated on the directive itself, so a reference to it\n * gives you access to the aggregate value and validity status of the form, as well as\n * user interaction properties like `dirty` and `touched`.\n *\n * To register child controls with the form, use `NgModel` with a `name`\n * attribute. You may use `NgModelGroup` to create sub-groups within the form.\n *\n * If necessary, listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event emits the original form\n * submission event.\n *\n * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.\n * To import the `FormsModule` but skip its usage in some forms,\n * for example, to use native HTML5 validation, add the `ngNoForm` and the `<form>`\n * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is\n * unnecessary because the `<form>` tags are inert. In that case, you would\n * refrain from using the `formGroup` directive.\n *\n * @usageNotes\n *\n * ### Listening for form submission\n *\n * The following example shows how to capture the form values from the \"ngSubmit\" event.\n *\n * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * ### Setting the update options\n *\n * The following example shows you how to change the \"updateOn\" option from its default using\n * ngFormOptions.\n *\n * ```html\n * <form [ngFormOptions]=\"{updateOn: 'blur'}\">\n *    <input name=\"one\" ngModel>  <!-- this ngModel will update on blur -->\n * </form>\n * ```\n *\n * ### Native DOM validation UI\n *\n * In order to prevent the native DOM form validation UI from interfering with Angular's form\n * validation, Angular automatically adds the `novalidate` attribute on any `<form>` whenever\n * `FormModule` or `ReactiveFormModule` are imported into the application.\n * If you want to explicitly enable native DOM validation UI with Angular forms, you can add the\n * `ngNativeValidate` attribute to the `<form>` element:\n *\n * ```html\n * <form ngNativeValidate>\n *   ...\n * </form>\n * ```\n *\n * @ngModule FormsModule\n * @publicApi\n */\nclass NgForm extends ControlContainer {\n    constructor(validators, asyncValidators) {\n        super();\n        /**\n         * @description\n         * Returns whether the form submission has been triggered.\n         */\n        this.submitted = false;\n        this._directives = [];\n        /**\n         * @description\n         * Event emitter for the \"ngSubmit\" event\n         */\n        this.ngSubmit = new EventEmitter();\n        this.form =\n            new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n    }\n    /** @nodoc */\n    ngAfterViewInit() {\n        this._setUpdateStrategy();\n    }\n    /**\n     * @description\n     * The directive instance.\n     */\n    get formDirective() {\n        return this;\n    }\n    /**\n     * @description\n     * The internal `FormGroup` instance.\n     */\n    get control() {\n        return this.form;\n    }\n    /**\n     * @description\n     * Returns an array representing the path to this group. Because this directive\n     * always lives at the top level of a form, it is always an empty array.\n     */\n    get path() {\n        return [];\n    }\n    /**\n     * @description\n     * Returns a map of the controls in this group.\n     */\n    get controls() {\n        return this.form.controls;\n    }\n    /**\n     * @description\n     * Method that sets up the control directive in this group, re-calculates its value\n     * and validity, and adds the instance to the internal list of directives.\n     *\n     * @param dir The `NgModel` directive instance.\n     */\n    addControl(dir) {\n        resolvedPromise.then(() => {\n            const container = this._findContainer(dir.path);\n            dir.control =\n                container.registerControl(dir.name, dir.control);\n            setUpControl(dir.control, dir);\n            dir.control.updateValueAndValidity({ emitEvent: false });\n            this._directives.push(dir);\n        });\n    }\n    /**\n     * @description\n     * Retrieves the `FormControl` instance from the provided `NgModel` directive.\n     *\n     * @param dir The `NgModel` directive instance.\n     */\n    getControl(dir) {\n        return this.form.get(dir.path);\n    }\n    /**\n     * @description\n     * Removes the `NgModel` instance from the internal list of directives\n     *\n     * @param dir The `NgModel` directive instance.\n     */\n    removeControl(dir) {\n        resolvedPromise.then(() => {\n            const container = this._findContainer(dir.path);\n            if (container) {\n                container.removeControl(dir.name);\n            }\n            removeListItem(this._directives, dir);\n        });\n    }\n    /**\n     * @description\n     * Adds a new `NgModelGroup` directive instance to the form.\n     *\n     * @param dir The `NgModelGroup` directive instance.\n     */\n    addFormGroup(dir) {\n        resolvedPromise.then(() => {\n            const container = this._findContainer(dir.path);\n            const group = new FormGroup({});\n            setUpFormContainer(group, dir);\n            container.registerControl(dir.name, group);\n            group.updateValueAndValidity({ emitEvent: false });\n        });\n    }\n    /**\n     * @description\n     * Removes the `NgModelGroup` directive instance from the form.\n     *\n     * @param dir The `NgModelGroup` directive instance.\n     */\n    removeFormGroup(dir) {\n        resolvedPromise.then(() => {\n            const container = this._findContainer(dir.path);\n            if (container) {\n                container.removeControl(dir.name);\n            }\n        });\n    }\n    /**\n     * @description\n     * Retrieves the `FormGroup` for a provided `NgModelGroup` directive instance\n     *\n     * @param dir The `NgModelGroup` directive instance.\n     */\n    getFormGroup(dir) {\n        return this.form.get(dir.path);\n    }\n    /**\n     * Sets the new value for the provided `NgControl` directive.\n     *\n     * @param dir The `NgControl` directive instance.\n     * @param value The new value for the directive's control.\n     */\n    updateModel(dir, value) {\n        resolvedPromise.then(() => {\n            const ctrl = this.form.get(dir.path);\n            ctrl.setValue(value);\n        });\n    }\n    /**\n     * @description\n     * Sets the value for this `FormGroup`.\n     *\n     * @param value The new value\n     */\n    setValue(value) {\n        this.control.setValue(value);\n    }\n    /**\n     * @description\n     * Method called when the \"submit\" event is triggered on the form.\n     * Triggers the `ngSubmit` emitter to emit the \"submit\" event as its payload.\n     *\n     * @param $event The \"submit\" event object\n     */\n    onSubmit($event) {\n        this.submitted = true;\n        syncPendingControls(this.form, this._directives);\n        this.ngSubmit.emit($event);\n        return false;\n    }\n    /**\n     * @description\n     * Method called when the \"reset\" event is triggered on the form.\n     */\n    onReset() {\n        this.resetForm();\n    }\n    /**\n     * @description\n     * Resets the form to an initial value and resets its submitted status.\n     *\n     * @param value The new value for the form.\n     */\n    resetForm(value = undefined) {\n        this.form.reset(value);\n        this.submitted = false;\n    }\n    _setUpdateStrategy() {\n        if (this.options && this.options.updateOn != null) {\n            this.form._updateOn = this.options.updateOn;\n        }\n    }\n    /** @internal */\n    _findContainer(path) {\n        path.pop();\n        return path.length ? this.form.get(path) : this.form;\n    }\n}\nNgForm.ɵfac = function NgForm_Factory(t) { return new (t || NgForm)(ɵngcc0.ɵɵdirectiveInject(NG_VALIDATORS, 10), ɵngcc0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10)); };\nNgForm.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgForm, selectors: [[\"form\", 3, \"ngNoForm\", \"\", 3, \"formGroup\", \"\"], [\"ng-form\"], [\"\", \"ngForm\", \"\"]], hostBindings: function NgForm_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"submit\", function NgForm_submit_HostBindingHandler($event) { return ctx.onSubmit($event); })(\"reset\", function NgForm_reset_HostBindingHandler() { return ctx.onReset(); });\n    } }, inputs: { options: [\"ngFormOptions\", \"options\"] }, outputs: { ngSubmit: \"ngSubmit\" }, exportAs: [\"ngForm\"], features: [ɵngcc0.ɵɵProvidersFeature([formDirectiveProvider]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nNgForm.ctorParameters = () => [\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] }\n];\nNgForm.propDecorators = {\n    options: [{ type: Input, args: ['ngFormOptions',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgForm, [{\n        type: Directive,\n        args: [{\n                selector: 'form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]',\n                providers: [formDirectiveProvider],\n                host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                outputs: ['ngSubmit'],\n                exportAs: 'ngForm'\n            }]\n    }], function () { return [{ type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_VALIDATORS]\n            }] }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_ASYNC_VALIDATORS]\n            }] }]; }, { options: [{\n            type: Input,\n            args: ['ngFormOptions']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n * A base class for code shared between the `NgModelGroup` and `FormGroupName` directives.\n *\n * @publicApi\n */\nclass AbstractFormGroupDirective extends ControlContainer {\n    /** @nodoc */\n    ngOnInit() {\n        this._checkParentType();\n        // Register the group with its parent group.\n        this.formDirective.addFormGroup(this);\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        if (this.formDirective) {\n            // Remove the group from its parent group.\n            this.formDirective.removeFormGroup(this);\n        }\n    }\n    /**\n     * @description\n     * The `FormGroup` bound to this directive.\n     */\n    get control() {\n        return this.formDirective.getFormGroup(this);\n    }\n    /**\n     * @description\n     * The path to this group from the top-level directive.\n     */\n    get path() {\n        return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);\n    }\n    /**\n     * @description\n     * The top-level directive for this group if present, otherwise null.\n     */\n    get formDirective() {\n        return this._parent ? this._parent.formDirective : null;\n    }\n    /** @internal */\n    _checkParentType() { }\n}\nAbstractFormGroupDirective.ɵfac = function AbstractFormGroupDirective_Factory(t) { return ɵAbstractFormGroupDirective_BaseFactory(t || AbstractFormGroupDirective); };\nAbstractFormGroupDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AbstractFormGroupDirective, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵAbstractFormGroupDirective_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(AbstractFormGroupDirective);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AbstractFormGroupDirective, [{\n        type: Directive\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass TemplateDrivenErrors {\n    static modelParentException() {\n        throw new Error(`\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n      formGroup's partner directive \"formControlName\" instead.  Example:\n\n      ${FormErrorExamples.formControlName}\n\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n      Example:\n\n      ${FormErrorExamples.ngModelWithFormGroup}`);\n    }\n    static formGroupNameException() {\n        throw new Error(`\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n      ${FormErrorExamples.formGroupName}\n\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n      ${FormErrorExamples.ngModelGroup}`);\n    }\n    static missingNameException() {\n        throw new Error(`If ngModel is used within a form tag, either the name attribute must be set or the form\n      control must be defined as 'standalone' in ngModelOptions.\n\n      Example 1: <input [(ngModel)]=\"person.firstName\" name=\"first\">\n      Example 2: <input [(ngModel)]=\"person.firstName\" [ngModelOptions]=\"{standalone: true}\">`);\n    }\n    static modelGroupParentException() {\n        throw new Error(`\n      ngModelGroup cannot be used with a parent formGroup directive.\n\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n      ${FormErrorExamples.formGroupName}\n\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n      ${FormErrorExamples.ngModelGroup}`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst modelGroupProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => NgModelGroup)\n};\n/**\n * @description\n * Creates and binds a `FormGroup` instance to a DOM element.\n *\n * This directive can only be used as a child of `NgForm` (within `<form>` tags).\n *\n * Use this directive to validate a sub-group of your form separately from the\n * rest of your form, or if some values in your domain model make more sense\n * to consume together in a nested object.\n *\n * Provide a name for the sub-group and it will become the key\n * for the sub-group in the form's full value. If you need direct access, export the directive into\n * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n *\n * @usageNotes\n *\n * ### Consuming controls in a grouping\n *\n * The following example shows you how to combine controls together in a sub-group\n * of the form.\n *\n * {@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n *\n * @ngModule FormsModule\n * @publicApi\n */\nclass NgModelGroup extends AbstractFormGroupDirective {\n    constructor(parent, validators, asyncValidators) {\n        super();\n        this._parent = parent;\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n    }\n    /** @internal */\n    _checkParentType() {\n        if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            TemplateDrivenErrors.modelGroupParentException();\n        }\n    }\n}\nNgModelGroup.ɵfac = function NgModelGroup_Factory(t) { return new (t || NgModelGroup)(ɵngcc0.ɵɵdirectiveInject(ControlContainer, 5), ɵngcc0.ɵɵdirectiveInject(NG_VALIDATORS, 10), ɵngcc0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10)); };\nNgModelGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgModelGroup, selectors: [[\"\", \"ngModelGroup\", \"\"]], inputs: { name: [\"ngModelGroup\", \"name\"] }, exportAs: [\"ngModelGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([modelGroupProvider]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nNgModelGroup.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Host }, { type: SkipSelf }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] }\n];\nNgModelGroup.propDecorators = {\n    name: [{ type: Input, args: ['ngModelGroup',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgModelGroup, [{\n        type: Directive,\n        args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' }]\n    }], function () { return [{ type: ControlContainer, decorators: [{\n                type: Host\n            }, {\n                type: SkipSelf\n            }] }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_VALIDATORS]\n            }] }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_ASYNC_VALIDATORS]\n            }] }]; }, { name: [{\n            type: Input,\n            args: ['ngModelGroup']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst formControlBinding = {\n    provide: NgControl,\n    useExisting: forwardRef(() => NgModel)\n};\nconst ɵ0$1 = () => Promise.resolve(null);\n/**\n * `ngModel` forces an additional change detection run when its inputs change:\n * E.g.:\n * ```\n * <div>{{myModel.valid}}</div>\n * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n * ```\n * I.e. `ngModel` can export itself on the element and then be used in the template.\n * Normally, this would result in expressions before the `input` that use the exported directive\n * to have an old value as they have been\n * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n * detection run.\n *\n * Notes:\n * - this is just one extra run no matter how many `ngModel`s have been changed.\n * - this is a general problem when using `exportAs` for directives!\n */\nconst resolvedPromise$1 = (ɵ0$1)();\n/**\n * @description\n * Creates a `FormControl` instance from a domain model and binds it\n * to a form control element.\n *\n * The `FormControl` instance tracks the value, user interaction, and\n * validation status of the control and keeps the view synced with the model. If used\n * within a parent form, the directive also registers itself with the form as a child\n * control.\n *\n * This directive is used by itself or as part of a larger form. Use the\n * `ngModel` selector to activate it.\n *\n * It accepts a domain model as an optional `Input`. If you have a one-way binding\n * to `ngModel` with `[]` syntax, changing the domain model's value in the component\n * class sets the value in the view. If you have a two-way binding with `[()]` syntax\n * (also known as 'banana-in-a-box syntax'), the value in the UI always syncs back to\n * the domain model in your class.\n *\n * To inspect the properties of the associated `FormControl` (like the validity state),\n * export the directive into a local template variable using `ngModel` as the key (ex:\n * `#myVar=\"ngModel\"`). You can then access the control using the directive's `control` property.\n * However, the most commonly used properties (like `valid` and `dirty`) also exist on the control\n * for direct access. See a full list of properties directly available in\n * `AbstractControlDirective`.\n *\n * @see `RadioControlValueAccessor`\n * @see `SelectControlValueAccessor`\n *\n * @usageNotes\n *\n * ### Using ngModel on a standalone control\n *\n * The following examples show a simple standalone control using `ngModel`:\n *\n * {@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n *\n * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n * so that the control can be registered with the parent form under that name.\n *\n * In the context of a parent form, it's often unnecessary to include one-way or two-way binding,\n * as the parent form syncs the value for you. You access its properties by exporting it into a\n * local template variable using `ngForm` such as (`#f=\"ngForm\"`). Use the variable where\n * needed on form submission.\n *\n * If you do need to populate initial values into your form, using a one-way binding for\n * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n * than the domain model's value on submit.\n *\n * ### Using ngModel within a form\n *\n * The following example shows controls using `ngModel` within a form:\n *\n * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * ### Using a standalone ngModel within a group\n *\n * The following example shows you how to use a standalone ngModel control\n * within a form. This controls the display of the form, but doesn't contain form data.\n *\n * ```html\n * <form>\n *   <input name=\"login\" ngModel placeholder=\"Login\">\n *   <input type=\"checkbox\" ngModel [ngModelOptions]=\"{standalone: true}\"> Show more options?\n * </form>\n * <!-- form value: {login: ''} -->\n * ```\n *\n * ### Setting the ngModel `name` attribute through options\n *\n * The following example shows you an alternate way to set the name attribute. Here,\n * an attribute identified as name is used within a custom form control component. To still be able\n * to specify the NgModel's name, you must specify it using the `ngModelOptions` input instead.\n *\n * ```html\n * <form>\n *   <my-custom-form-control name=\"Nancy\" ngModel [ngModelOptions]=\"{name: 'user'}\">\n *   </my-custom-form-control>\n * </form>\n * <!-- form value: {user: ''} -->\n * ```\n *\n * @ngModule FormsModule\n * @publicApi\n */\nclass NgModel extends NgControl {\n    constructor(parent, validators, asyncValidators, valueAccessors) {\n        super();\n        this.control = new FormControl();\n        /** @internal */\n        this._registered = false;\n        /**\n         * @description\n         * Event emitter for producing the `ngModelChange` event after\n         * the view model updates.\n         */\n        this.update = new EventEmitter();\n        this._parent = parent;\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n        this.valueAccessor = selectValueAccessor(this, valueAccessors);\n    }\n    /** @nodoc */\n    ngOnChanges(changes) {\n        this._checkForErrors();\n        if (!this._registered)\n            this._setUpControl();\n        if ('isDisabled' in changes) {\n            this._updateDisabled(changes);\n        }\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            this._updateValue(this.model);\n            this.viewModel = this.model;\n        }\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        this.formDirective && this.formDirective.removeControl(this);\n    }\n    /**\n     * @description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     */\n    get path() {\n        return this._parent ? controlPath(this.name, this._parent) : [this.name];\n    }\n    /**\n     * @description\n     * The top-level directive for this control if present, otherwise null.\n     */\n    get formDirective() {\n        return this._parent ? this._parent.formDirective : null;\n    }\n    /**\n     * @description\n     * Sets the new value for the view model and emits an `ngModelChange` event.\n     *\n     * @param newValue The new value emitted by `ngModelChange`.\n     */\n    viewToModelUpdate(newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    }\n    _setUpControl() {\n        this._setUpdateStrategy();\n        this._isStandalone() ? this._setUpStandalone() : this.formDirective.addControl(this);\n        this._registered = true;\n    }\n    _setUpdateStrategy() {\n        if (this.options && this.options.updateOn != null) {\n            this.control._updateOn = this.options.updateOn;\n        }\n    }\n    _isStandalone() {\n        return !this._parent || !!(this.options && this.options.standalone);\n    }\n    _setUpStandalone() {\n        setUpControl(this.control, this);\n        this.control.updateValueAndValidity({ emitEvent: false });\n    }\n    _checkForErrors() {\n        if (!this._isStandalone()) {\n            this._checkParentType();\n        }\n        this._checkName();\n    }\n    _checkParentType() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!(this._parent instanceof NgModelGroup) &&\n                this._parent instanceof AbstractFormGroupDirective) {\n                TemplateDrivenErrors.formGroupNameException();\n            }\n            else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n                TemplateDrivenErrors.modelParentException();\n            }\n        }\n    }\n    _checkName() {\n        if (this.options && this.options.name)\n            this.name = this.options.name;\n        if (!this._isStandalone() && !this.name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            TemplateDrivenErrors.missingNameException();\n        }\n    }\n    _updateValue(value) {\n        resolvedPromise$1.then(() => {\n            this.control.setValue(value, { emitViewToModelChange: false });\n        });\n    }\n    _updateDisabled(changes) {\n        const disabledValue = changes['isDisabled'].currentValue;\n        const isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');\n        resolvedPromise$1.then(() => {\n            if (isDisabled && !this.control.disabled) {\n                this.control.disable();\n            }\n            else if (!isDisabled && this.control.disabled) {\n                this.control.enable();\n            }\n        });\n    }\n}\nNgModel.ɵfac = function NgModel_Factory(t) { return new (t || NgModel)(ɵngcc0.ɵɵdirectiveInject(ControlContainer, 9), ɵngcc0.ɵɵdirectiveInject(NG_VALIDATORS, 10), ɵngcc0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10), ɵngcc0.ɵɵdirectiveInject(NG_VALUE_ACCESSOR, 10)); };\nNgModel.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgModel, selectors: [[\"\", \"ngModel\", \"\", 3, \"formControlName\", \"\", 3, \"formControl\", \"\"]], inputs: { name: \"name\", isDisabled: [\"disabled\", \"isDisabled\"], model: [\"ngModel\", \"model\"], options: [\"ngModelOptions\", \"options\"] }, outputs: { update: \"ngModelChange\" }, exportAs: [\"ngModel\"], features: [ɵngcc0.ɵɵProvidersFeature([formControlBinding]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nNgModel.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] }] }\n];\nNgModel.propDecorators = {\n    name: [{ type: Input }],\n    isDisabled: [{ type: Input, args: ['disabled',] }],\n    model: [{ type: Input, args: ['ngModel',] }],\n    options: [{ type: Input, args: ['ngModelOptions',] }],\n    update: [{ type: Output, args: ['ngModelChange',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgModel, [{\n        type: Directive,\n        args: [{\n                selector: '[ngModel]:not([formControlName]):not([formControl])',\n                providers: [formControlBinding],\n                exportAs: 'ngModel'\n            }]\n    }], function () { return [{ type: ControlContainer, decorators: [{\n                type: Optional\n            }, {\n                type: Host\n            }] }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_VALIDATORS]\n            }] }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_ASYNC_VALIDATORS]\n            }] }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_VALUE_ACCESSOR]\n            }] }]; }, { update: [{\n            type: Output,\n            args: ['ngModelChange']\n        }], name: [{\n            type: Input\n        }], isDisabled: [{\n            type: Input,\n            args: ['disabled']\n        }], model: [{\n            type: Input,\n            args: ['ngModel']\n        }], options: [{\n            type: Input,\n            args: ['ngModelOptions']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n *\n * Adds `novalidate` attribute to all forms by default.\n *\n * `novalidate` is used to disable browser's native form validation.\n *\n * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:\n *\n * ```\n * <form ngNativeValidate></form>\n * ```\n *\n * @publicApi\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n */\nclass ɵNgNoValidate {\n}\nɵNgNoValidate.ɵfac = function ɵNgNoValidate_Factory(t) { return new (t || ɵNgNoValidate)(); };\nɵNgNoValidate.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ɵNgNoValidate, selectors: [[\"form\", 3, \"ngNoForm\", \"\", 3, \"ngNativeValidate\", \"\"]], hostAttrs: [\"novalidate\", \"\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ɵNgNoValidate, [{\n        type: Directive,\n        args: [{\n                selector: 'form:not([ngNoForm]):not([ngNativeValidate])',\n                host: { 'novalidate': '' }\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Token to provide to turn off the ngModel warning on formControl and formControlName.\n */\nconst NG_MODEL_WITH_FORM_CONTROL_WARNING = new InjectionToken('NgModelWithFormControlWarning');\nconst formControlBinding$1 = {\n    provide: NgControl,\n    useExisting: forwardRef(() => FormControlDirective)\n};\n/**\n * @description\n * Synchronizes a standalone `FormControl` instance to a form control element.\n *\n * Note that support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives was deprecated in Angular v6 and is scheduled for removal in\n * a future version of Angular.\n * For details, see [Deprecated features](guide/deprecations#ngmodel-with-reactive-forms).\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `FormControl`\n * @see `AbstractControl`\n *\n * @usageNotes\n *\n * The following example shows how to register a standalone control and set its value.\n *\n * {@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nclass FormControlDirective extends NgControl {\n    constructor(validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {\n        super();\n        this._ngModelWarningConfig = _ngModelWarningConfig;\n        /** @deprecated as of v6 */\n        this.update = new EventEmitter();\n        /**\n         * @description\n         * Instance property used to track whether an ngModel warning has been sent out for this\n         * particular `FormControlDirective` instance. Used to support warning config of \"always\".\n         *\n         * @internal\n         */\n        this._ngModelWarningSent = false;\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n        this.valueAccessor = selectValueAccessor(this, valueAccessors);\n    }\n    /**\n     * @description\n     * Triggers a warning in dev mode that this input should not be used with reactive forms.\n     */\n    set isDisabled(isDisabled) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            ReactiveErrors.disabledAttrWarning();\n        }\n    }\n    /** @nodoc */\n    ngOnChanges(changes) {\n        if (this._isControlChanged(changes)) {\n            setUpControl(this.form, this);\n            if (this.control.disabled && this.valueAccessor.setDisabledState) {\n                this.valueAccessor.setDisabledState(true);\n            }\n            this.form.updateValueAndValidity({ emitEvent: false });\n        }\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                _ngModelWarning('formControl', FormControlDirective, this, this._ngModelWarningConfig);\n            }\n            this.form.setValue(this.model);\n            this.viewModel = this.model;\n        }\n    }\n    /**\n     * @description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     */\n    get path() {\n        return [];\n    }\n    /**\n     * @description\n     * The `FormControl` bound to this directive.\n     */\n    get control() {\n        return this.form;\n    }\n    /**\n     * @description\n     * Sets the new value for the view model and emits an `ngModelChange` event.\n     *\n     * @param newValue The new value for the view model.\n     */\n    viewToModelUpdate(newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    }\n    _isControlChanged(changes) {\n        return changes.hasOwnProperty('form');\n    }\n}\nFormControlDirective.ɵfac = function FormControlDirective_Factory(t) { return new (t || FormControlDirective)(ɵngcc0.ɵɵdirectiveInject(NG_VALIDATORS, 10), ɵngcc0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10), ɵngcc0.ɵɵdirectiveInject(NG_VALUE_ACCESSOR, 10), ɵngcc0.ɵɵdirectiveInject(NG_MODEL_WITH_FORM_CONTROL_WARNING, 8)); };\nFormControlDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FormControlDirective, selectors: [[\"\", \"formControl\", \"\"]], inputs: { isDisabled: [\"disabled\", \"isDisabled\"], form: [\"formControl\", \"form\"], model: [\"ngModel\", \"model\"] }, outputs: { update: \"ngModelChange\" }, exportAs: [\"ngForm\"], features: [ɵngcc0.ɵɵProvidersFeature([formControlBinding$1]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\n/**\n * @description\n * Static property used to track whether any ngModel warnings have been sent across\n * all instances of FormControlDirective. Used to support warning config of \"once\".\n *\n * @internal\n */\nFormControlDirective._ngModelWarningSentOnce = false;\nFormControlDirective.ctorParameters = () => [\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [NG_MODEL_WITH_FORM_CONTROL_WARNING,] }] }\n];\nFormControlDirective.propDecorators = {\n    form: [{ type: Input, args: ['formControl',] }],\n    isDisabled: [{ type: Input, args: ['disabled',] }],\n    model: [{ type: Input, args: ['ngModel',] }],\n    update: [{ type: Output, args: ['ngModelChange',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormControlDirective, [{\n        type: Directive,\n        args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' }]\n    }], function () { return [{ type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_VALIDATORS]\n            }] }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_ASYNC_VALIDATORS]\n            }] }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_VALUE_ACCESSOR]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [NG_MODEL_WITH_FORM_CONTROL_WARNING]\n            }] }]; }, { update: [{\n            type: Output,\n            args: ['ngModelChange']\n        }], isDisabled: [{\n            type: Input,\n            args: ['disabled']\n        }], form: [{\n            type: Input,\n            args: ['formControl']\n        }], model: [{\n            type: Input,\n            args: ['ngModel']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst formDirectiveProvider$1 = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => FormGroupDirective)\n};\n/**\n * @description\n *\n * Binds an existing `FormGroup` to a DOM element.\n *\n * This directive accepts an existing `FormGroup` instance. It will then use this\n * `FormGroup` instance to match any child `FormControl`, `FormGroup`,\n * and `FormArray` instances to child `FormControlName`, `FormGroupName`,\n * and `FormArrayName` directives.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `AbstractControl`\n *\n * ### Register Form Group\n *\n * The following example registers a `FormGroup` with first name and last name controls,\n * and listens for the *ngSubmit* event when the button is clicked.\n *\n * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nclass FormGroupDirective extends ControlContainer {\n    constructor(validators, asyncValidators) {\n        super();\n        this.validators = validators;\n        this.asyncValidators = asyncValidators;\n        /**\n         * @description\n         * Reports whether the form submission has been triggered.\n         */\n        this.submitted = false;\n        /**\n         * @description\n         * Tracks the list of added `FormControlName` instances\n         */\n        this.directives = [];\n        /**\n         * @description\n         * Tracks the `FormGroup` bound to this directive.\n         */\n        this.form = null;\n        /**\n         * @description\n         * Emits an event when the form submission has been triggered.\n         */\n        this.ngSubmit = new EventEmitter();\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n    }\n    /** @nodoc */\n    ngOnChanges(changes) {\n        this._checkFormPresent();\n        if (changes.hasOwnProperty('form')) {\n            this._updateValidators();\n            this._updateDomValue();\n            this._updateRegistrations();\n            this._oldForm = this.form;\n        }\n    }\n    /**\n     * @description\n     * Returns this directive's instance.\n     */\n    get formDirective() {\n        return this;\n    }\n    /**\n     * @description\n     * Returns the `FormGroup` bound to this directive.\n     */\n    get control() {\n        return this.form;\n    }\n    /**\n     * @description\n     * Returns an array representing the path to this group. Because this directive\n     * always lives at the top level of a form, it always an empty array.\n     */\n    get path() {\n        return [];\n    }\n    /**\n     * @description\n     * Method that sets up the control directive in this group, re-calculates its value\n     * and validity, and adds the instance to the internal list of directives.\n     *\n     * @param dir The `FormControlName` directive instance.\n     */\n    addControl(dir) {\n        const ctrl = this.form.get(dir.path);\n        setUpControl(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n        this.directives.push(dir);\n        return ctrl;\n    }\n    /**\n     * @description\n     * Retrieves the `FormControl` instance from the provided `FormControlName` directive\n     *\n     * @param dir The `FormControlName` directive instance.\n     */\n    getControl(dir) {\n        return this.form.get(dir.path);\n    }\n    /**\n     * @description\n     * Removes the `FormControlName` instance from the internal list of directives\n     *\n     * @param dir The `FormControlName` directive instance.\n     */\n    removeControl(dir) {\n        removeListItem(this.directives, dir);\n    }\n    /**\n     * Adds a new `FormGroupName` directive instance to the form.\n     *\n     * @param dir The `FormGroupName` directive instance.\n     */\n    addFormGroup(dir) {\n        const ctrl = this.form.get(dir.path);\n        setUpFormContainer(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n    }\n    /**\n     * No-op method to remove the form group.\n     *\n     * @param dir The `FormGroupName` directive instance.\n     */\n    removeFormGroup(dir) { }\n    /**\n     * @description\n     * Retrieves the `FormGroup` for a provided `FormGroupName` directive instance\n     *\n     * @param dir The `FormGroupName` directive instance.\n     */\n    getFormGroup(dir) {\n        return this.form.get(dir.path);\n    }\n    /**\n     * Adds a new `FormArrayName` directive instance to the form.\n     *\n     * @param dir The `FormArrayName` directive instance.\n     */\n    addFormArray(dir) {\n        const ctrl = this.form.get(dir.path);\n        setUpFormContainer(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n    }\n    /**\n     * No-op method to remove the form array.\n     *\n     * @param dir The `FormArrayName` directive instance.\n     */\n    removeFormArray(dir) { }\n    /**\n     * @description\n     * Retrieves the `FormArray` for a provided `FormArrayName` directive instance.\n     *\n     * @param dir The `FormArrayName` directive instance.\n     */\n    getFormArray(dir) {\n        return this.form.get(dir.path);\n    }\n    /**\n     * Sets the new value for the provided `FormControlName` directive.\n     *\n     * @param dir The `FormControlName` directive instance.\n     * @param value The new value for the directive's control.\n     */\n    updateModel(dir, value) {\n        const ctrl = this.form.get(dir.path);\n        ctrl.setValue(value);\n    }\n    /**\n     * @description\n     * Method called with the \"submit\" event is triggered on the form.\n     * Triggers the `ngSubmit` emitter to emit the \"submit\" event as its payload.\n     *\n     * @param $event The \"submit\" event object\n     */\n    onSubmit($event) {\n        this.submitted = true;\n        syncPendingControls(this.form, this.directives);\n        this.ngSubmit.emit($event);\n        return false;\n    }\n    /**\n     * @description\n     * Method called when the \"reset\" event is triggered on the form.\n     */\n    onReset() {\n        this.resetForm();\n    }\n    /**\n     * @description\n     * Resets the form to an initial value and resets its submitted status.\n     *\n     * @param value The new value for the form.\n     */\n    resetForm(value = undefined) {\n        this.form.reset(value);\n        this.submitted = false;\n    }\n    /** @internal */\n    _updateDomValue() {\n        this.directives.forEach(dir => {\n            const newCtrl = this.form.get(dir.path);\n            if (dir.control !== newCtrl) {\n                // Note: the value of the `dir.control` may not be defined, for example when it's a first\n                // `FormControl` that is added to a `FormGroup` instance (via `addControl` call).\n                cleanUpControl(dir.control || null, dir);\n                if (newCtrl)\n                    setUpControl(newCtrl, dir);\n                dir.control = newCtrl;\n            }\n        });\n        this.form._updateTreeValidity({ emitEvent: false });\n    }\n    _updateRegistrations() {\n        this.form._registerOnCollectionChange(() => this._updateDomValue());\n        if (this._oldForm) {\n            this._oldForm._registerOnCollectionChange(() => { });\n        }\n    }\n    _updateValidators() {\n        setUpValidators(this.form, this, /* handleOnValidatorChange */ false);\n        if (this._oldForm) {\n            cleanUpValidators(this._oldForm, this, /* handleOnValidatorChange */ false);\n        }\n    }\n    _checkFormPresent() {\n        if (!this.form && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            ReactiveErrors.missingFormException();\n        }\n    }\n}\nFormGroupDirective.ɵfac = function FormGroupDirective_Factory(t) { return new (t || FormGroupDirective)(ɵngcc0.ɵɵdirectiveInject(NG_VALIDATORS, 10), ɵngcc0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10)); };\nFormGroupDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FormGroupDirective, selectors: [[\"\", \"formGroup\", \"\"]], hostBindings: function FormGroupDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"submit\", function FormGroupDirective_submit_HostBindingHandler($event) { return ctx.onSubmit($event); })(\"reset\", function FormGroupDirective_reset_HostBindingHandler() { return ctx.onReset(); });\n    } }, inputs: { form: [\"formGroup\", \"form\"] }, outputs: { ngSubmit: \"ngSubmit\" }, exportAs: [\"ngForm\"], features: [ɵngcc0.ɵɵProvidersFeature([formDirectiveProvider$1]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nFormGroupDirective.ctorParameters = () => [\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] }\n];\nFormGroupDirective.propDecorators = {\n    form: [{ type: Input, args: ['formGroup',] }],\n    ngSubmit: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormGroupDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[formGroup]',\n                providers: [formDirectiveProvider$1],\n                host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                exportAs: 'ngForm'\n            }]\n    }], function () { return [{ type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_VALIDATORS]\n            }] }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_ASYNC_VALIDATORS]\n            }] }]; }, { form: [{\n            type: Input,\n            args: ['formGroup']\n        }], ngSubmit: [{\n            type: Output\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst formGroupNameProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => FormGroupName)\n};\n/**\n * @description\n *\n * Syncs a nested `FormGroup` to a DOM element.\n *\n * This directive can only be used with a parent `FormGroupDirective`.\n *\n * It accepts the string name of the nested `FormGroup` to link, and\n * looks for a `FormGroup` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * Use nested form groups to validate a sub-group of a\n * form separately from the rest or to group the values of certain\n * controls into their own nested object.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n *\n * @usageNotes\n *\n * ### Access the group by name\n *\n * The following example uses the {@link AbstractControl#get get} method to access the\n * associated `FormGroup`\n *\n * ```ts\n *   this.form.get('name');\n * ```\n *\n * ### Access individual controls in the group\n *\n * The following example uses the {@link AbstractControl#get get} method to access\n * individual controls within the group using dot syntax.\n *\n * ```ts\n *   this.form.get('name.first');\n * ```\n *\n * ### Register a nested `FormGroup`.\n *\n * The following example registers a nested *name* `FormGroup` within an existing `FormGroup`,\n * and provides methods to retrieve the nested `FormGroup` and individual controls.\n *\n * {@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nclass FormGroupName extends AbstractFormGroupDirective {\n    constructor(parent, validators, asyncValidators) {\n        super();\n        this._parent = parent;\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n    }\n    /** @internal */\n    _checkParentType() {\n        if (_hasInvalidParent(this._parent) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            ReactiveErrors.groupParentException();\n        }\n    }\n}\nFormGroupName.ɵfac = function FormGroupName_Factory(t) { return new (t || FormGroupName)(ɵngcc0.ɵɵdirectiveInject(ControlContainer, 13), ɵngcc0.ɵɵdirectiveInject(NG_VALIDATORS, 10), ɵngcc0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10)); };\nFormGroupName.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FormGroupName, selectors: [[\"\", \"formGroupName\", \"\"]], inputs: { name: [\"formGroupName\", \"name\"] }, features: [ɵngcc0.ɵɵProvidersFeature([formGroupNameProvider]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nFormGroupName.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] }\n];\nFormGroupName.propDecorators = {\n    name: [{ type: Input, args: ['formGroupName',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormGroupName, [{\n        type: Directive,\n        args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] }]\n    }], function () { return [{ type: ControlContainer, decorators: [{\n                type: Optional\n            }, {\n                type: Host\n            }, {\n                type: SkipSelf\n            }] }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_VALIDATORS]\n            }] }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_ASYNC_VALIDATORS]\n            }] }]; }, { name: [{\n            type: Input,\n            args: ['formGroupName']\n        }] }); })();\nconst formArrayNameProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => FormArrayName)\n};\n/**\n * @description\n *\n * Syncs a nested `FormArray` to a DOM element.\n *\n * This directive is designed to be used with a parent `FormGroupDirective` (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested `FormArray` you want to link, and\n * will look for a `FormArray` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `AbstractControl`\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nclass FormArrayName extends ControlContainer {\n    constructor(parent, validators, asyncValidators) {\n        super();\n        this._parent = parent;\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n    }\n    /**\n     * A lifecycle method called when the directive's inputs are initialized. For internal use only.\n     * @throws If the directive does not have a valid parent.\n     * @nodoc\n     */\n    ngOnInit() {\n        this._checkParentType();\n        this.formDirective.addFormArray(this);\n    }\n    /**\n     * A lifecycle method called before the directive's instance is destroyed. For internal use only.\n     * @nodoc\n     */\n    ngOnDestroy() {\n        if (this.formDirective) {\n            this.formDirective.removeFormArray(this);\n        }\n    }\n    /**\n     * @description\n     * The `FormArray` bound to this directive.\n     */\n    get control() {\n        return this.formDirective.getFormArray(this);\n    }\n    /**\n     * @description\n     * The top-level directive for this group if present, otherwise null.\n     */\n    get formDirective() {\n        return this._parent ? this._parent.formDirective : null;\n    }\n    /**\n     * @description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     */\n    get path() {\n        return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);\n    }\n    _checkParentType() {\n        if (_hasInvalidParent(this._parent) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            ReactiveErrors.arrayParentException();\n        }\n    }\n}\nFormArrayName.ɵfac = function FormArrayName_Factory(t) { return new (t || FormArrayName)(ɵngcc0.ɵɵdirectiveInject(ControlContainer, 13), ɵngcc0.ɵɵdirectiveInject(NG_VALIDATORS, 10), ɵngcc0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10)); };\nFormArrayName.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FormArrayName, selectors: [[\"\", \"formArrayName\", \"\"]], inputs: { name: [\"formArrayName\", \"name\"] }, features: [ɵngcc0.ɵɵProvidersFeature([formArrayNameProvider]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nFormArrayName.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] }\n];\nFormArrayName.propDecorators = {\n    name: [{ type: Input, args: ['formArrayName',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormArrayName, [{\n        type: Directive,\n        args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] }]\n    }], function () { return [{ type: ControlContainer, decorators: [{\n                type: Optional\n            }, {\n                type: Host\n            }, {\n                type: SkipSelf\n            }] }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_VALIDATORS]\n            }] }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_ASYNC_VALIDATORS]\n            }] }]; }, { name: [{\n            type: Input,\n            args: ['formArrayName']\n        }] }); })();\nfunction _hasInvalidParent(parent) {\n    return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n        !(parent instanceof FormArrayName);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst controlNameBinding = {\n    provide: NgControl,\n    useExisting: forwardRef(() => FormControlName)\n};\n/**\n * @description\n * Syncs a `FormControl` in an existing `FormGroup` to a form control\n * element by name.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `FormControl`\n * @see `AbstractControl`\n *\n * @usageNotes\n *\n * ### Register `FormControl` within a group\n *\n * The following example shows how to register multiple form controls within a form group\n * and set their value.\n *\n * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * To see `formControlName` examples with different form control types, see:\n *\n * * Radio buttons: `RadioControlValueAccessor`\n * * Selects: `SelectControlValueAccessor`\n *\n * ### Use with ngModel is deprecated\n *\n * Support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives has been deprecated in Angular v6 and is scheduled for removal in\n * a future version of Angular.\n *\n * For details, see [Deprecated features](guide/deprecations#ngmodel-with-reactive-forms).\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nclass FormControlName extends NgControl {\n    constructor(parent, validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {\n        super();\n        this._ngModelWarningConfig = _ngModelWarningConfig;\n        this._added = false;\n        /** @deprecated as of v6 */\n        this.update = new EventEmitter();\n        /**\n         * @description\n         * Instance property used to track whether an ngModel warning has been sent out for this\n         * particular FormControlName instance. Used to support warning config of \"always\".\n         *\n         * @internal\n         */\n        this._ngModelWarningSent = false;\n        this._parent = parent;\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n        this.valueAccessor = selectValueAccessor(this, valueAccessors);\n    }\n    /**\n     * @description\n     * Triggers a warning in dev mode that this input should not be used with reactive forms.\n     */\n    set isDisabled(isDisabled) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            ReactiveErrors.disabledAttrWarning();\n        }\n    }\n    /** @nodoc */\n    ngOnChanges(changes) {\n        if (!this._added)\n            this._setUpControl();\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                _ngModelWarning('formControlName', FormControlName, this, this._ngModelWarningConfig);\n            }\n            this.viewModel = this.model;\n            this.formDirective.updateModel(this, this.model);\n        }\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        if (this.formDirective) {\n            this.formDirective.removeControl(this);\n        }\n    }\n    /**\n     * @description\n     * Sets the new value for the view model and emits an `ngModelChange` event.\n     *\n     * @param newValue The new value for the view model.\n     */\n    viewToModelUpdate(newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    }\n    /**\n     * @description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     */\n    get path() {\n        return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);\n    }\n    /**\n     * @description\n     * The top-level directive for this group if present, otherwise null.\n     */\n    get formDirective() {\n        return this._parent ? this._parent.formDirective : null;\n    }\n    _checkParentType() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!(this._parent instanceof FormGroupName) &&\n                this._parent instanceof AbstractFormGroupDirective) {\n                ReactiveErrors.ngModelGroupException();\n            }\n            else if (!(this._parent instanceof FormGroupName) &&\n                !(this._parent instanceof FormGroupDirective) &&\n                !(this._parent instanceof FormArrayName)) {\n                ReactiveErrors.controlParentException();\n            }\n        }\n    }\n    _setUpControl() {\n        this._checkParentType();\n        this.control = this.formDirective.addControl(this);\n        if (this.control.disabled && this.valueAccessor.setDisabledState) {\n            this.valueAccessor.setDisabledState(true);\n        }\n        this._added = true;\n    }\n}\nFormControlName.ɵfac = function FormControlName_Factory(t) { return new (t || FormControlName)(ɵngcc0.ɵɵdirectiveInject(ControlContainer, 13), ɵngcc0.ɵɵdirectiveInject(NG_VALIDATORS, 10), ɵngcc0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10), ɵngcc0.ɵɵdirectiveInject(NG_VALUE_ACCESSOR, 10), ɵngcc0.ɵɵdirectiveInject(NG_MODEL_WITH_FORM_CONTROL_WARNING, 8)); };\nFormControlName.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FormControlName, selectors: [[\"\", \"formControlName\", \"\"]], inputs: { isDisabled: [\"disabled\", \"isDisabled\"], name: [\"formControlName\", \"name\"], model: [\"ngModel\", \"model\"] }, outputs: { update: \"ngModelChange\" }, features: [ɵngcc0.ɵɵProvidersFeature([controlNameBinding]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\n/**\n * @description\n * Static property used to track whether any ngModel warnings have been sent across\n * all instances of FormControlName. Used to support warning config of \"once\".\n *\n * @internal\n */\nFormControlName._ngModelWarningSentOnce = false;\nFormControlName.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [NG_MODEL_WITH_FORM_CONTROL_WARNING,] }] }\n];\nFormControlName.propDecorators = {\n    name: [{ type: Input, args: ['formControlName',] }],\n    isDisabled: [{ type: Input, args: ['disabled',] }],\n    model: [{ type: Input, args: ['ngModel',] }],\n    update: [{ type: Output, args: ['ngModelChange',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormControlName, [{\n        type: Directive,\n        args: [{ selector: '[formControlName]', providers: [controlNameBinding] }]\n    }], function () { return [{ type: ControlContainer, decorators: [{\n                type: Optional\n            }, {\n                type: Host\n            }, {\n                type: SkipSelf\n            }] }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_VALIDATORS]\n            }] }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_ASYNC_VALIDATORS]\n            }] }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [NG_VALUE_ACCESSOR]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [NG_MODEL_WITH_FORM_CONTROL_WARNING]\n            }] }]; }, { update: [{\n            type: Output,\n            args: ['ngModelChange']\n        }], isDisabled: [{\n            type: Input,\n            args: ['disabled']\n        }], name: [{\n            type: Input,\n            args: ['formControlName']\n        }], model: [{\n            type: Input,\n            args: ['ngModel']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n * Provider which adds `RequiredValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => RequiredValidator),\n    multi: true\n};\n/**\n * @description\n * Provider which adds `CheckboxRequiredValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => CheckboxRequiredValidator),\n    multi: true\n};\n/**\n * @description\n * A directive that adds the `required` validator to any controls marked with the\n * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a required validator using template-driven forms\n *\n * ```\n * <input name=\"fullName\" ngModel required>\n * ```\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nclass RequiredValidator {\n    constructor() {\n        this._required = false;\n    }\n    /**\n     * @description\n     * Tracks changes to the required attribute bound to this directive.\n     */\n    get required() {\n        return this._required;\n    }\n    set required(value) {\n        this._required = value != null && value !== false && `${value}` !== 'false';\n        if (this._onChange)\n            this._onChange();\n    }\n    /**\n     * Method that validates whether the control is empty.\n     * Returns the validation result if enabled, otherwise null.\n     * @nodoc\n     */\n    validate(control) {\n        return this.required ? Validators.required(control) : null;\n    }\n    /**\n     * Registers a callback function to call when the validator inputs change.\n     * @nodoc\n     */\n    registerOnValidatorChange(fn) {\n        this._onChange = fn;\n    }\n}\nRequiredValidator.ɵfac = function RequiredValidator_Factory(t) { return new (t || RequiredValidator)(); };\nRequiredValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: RequiredValidator, selectors: [[\"\", \"required\", \"\", \"formControlName\", \"\", 3, \"type\", \"checkbox\"], [\"\", \"required\", \"\", \"formControl\", \"\", 3, \"type\", \"checkbox\"], [\"\", \"required\", \"\", \"ngModel\", \"\", 3, \"type\", \"checkbox\"]], hostVars: 1, hostBindings: function RequiredValidator_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"required\", ctx.required ? \"\" : null);\n    } }, inputs: { required: \"required\" }, features: [ɵngcc0.ɵɵProvidersFeature([REQUIRED_VALIDATOR])] });\nRequiredValidator.propDecorators = {\n    required: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RequiredValidator, [{\n        type: Directive,\n        args: [{\n                selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',\n                providers: [REQUIRED_VALIDATOR],\n                host: { '[attr.required]': 'required ? \"\" : null' }\n            }]\n    }], function () { return []; }, { required: [{\n            type: Input\n        }] }); })();\n/**\n * A Directive that adds the `required` validator to checkbox controls marked with the\n * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a required checkbox validator using template-driven forms\n *\n * The following example shows how to add a checkbox required validator to an input attached to an\n * ngModel binding.\n *\n * ```\n * <input type=\"checkbox\" name=\"active\" ngModel required>\n * ```\n *\n * @publicApi\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\nclass CheckboxRequiredValidator extends RequiredValidator {\n    /**\n     * Method that validates whether or not the checkbox has been checked.\n     * Returns the validation result if enabled, otherwise null.\n     * @nodoc\n     */\n    validate(control) {\n        return this.required ? Validators.requiredTrue(control) : null;\n    }\n}\nCheckboxRequiredValidator.ɵfac = function CheckboxRequiredValidator_Factory(t) { return ɵCheckboxRequiredValidator_BaseFactory(t || CheckboxRequiredValidator); };\nCheckboxRequiredValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CheckboxRequiredValidator, selectors: [[\"input\", \"type\", \"checkbox\", \"required\", \"\", \"formControlName\", \"\"], [\"input\", \"type\", \"checkbox\", \"required\", \"\", \"formControl\", \"\"], [\"input\", \"type\", \"checkbox\", \"required\", \"\", \"ngModel\", \"\"]], hostVars: 1, hostBindings: function CheckboxRequiredValidator_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"required\", ctx.required ? \"\" : null);\n    } }, features: [ɵngcc0.ɵɵProvidersFeature([CHECKBOX_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵCheckboxRequiredValidator_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(CheckboxRequiredValidator);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CheckboxRequiredValidator, [{\n        type: Directive,\n        args: [{\n                selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',\n                providers: [CHECKBOX_REQUIRED_VALIDATOR],\n                host: { '[attr.required]': 'required ? \"\" : null' }\n            }]\n    }], null, null); })();\n/**\n * @description\n * Provider which adds `EmailValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst EMAIL_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => EmailValidator),\n    multi: true\n};\n/**\n * A directive that adds the `email` validator to controls marked with the\n * `email` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * @usageNotes\n *\n * ### Adding an email validator\n *\n * The following example shows how to add an email validator to an input attached to an ngModel\n * binding.\n *\n * ```\n * <input type=\"email\" name=\"email\" ngModel email>\n * <input type=\"email\" name=\"email\" ngModel email=\"true\">\n * <input type=\"email\" name=\"email\" ngModel [email]=\"true\">\n * ```\n *\n * @publicApi\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\nclass EmailValidator {\n    constructor() {\n        this._enabled = false;\n    }\n    /**\n     * @description\n     * Tracks changes to the email attribute bound to this directive.\n     */\n    set email(value) {\n        this._enabled = value === '' || value === true || value === 'true';\n        if (this._onChange)\n            this._onChange();\n    }\n    /**\n     * Method that validates whether an email address is valid.\n     * Returns the validation result if enabled, otherwise null.\n     * @nodoc\n     */\n    validate(control) {\n        return this._enabled ? Validators.email(control) : null;\n    }\n    /**\n     * Registers a callback function to call when the validator inputs change.\n     * @nodoc\n     */\n    registerOnValidatorChange(fn) {\n        this._onChange = fn;\n    }\n}\nEmailValidator.ɵfac = function EmailValidator_Factory(t) { return new (t || EmailValidator)(); };\nEmailValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: EmailValidator, selectors: [[\"\", \"email\", \"\", \"formControlName\", \"\"], [\"\", \"email\", \"\", \"formControl\", \"\"], [\"\", \"email\", \"\", \"ngModel\", \"\"]], inputs: { email: \"email\" }, features: [ɵngcc0.ɵɵProvidersFeature([EMAIL_VALIDATOR])] });\nEmailValidator.propDecorators = {\n    email: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EmailValidator, [{\n        type: Directive,\n        args: [{\n                selector: '[email][formControlName],[email][formControl],[email][ngModel]',\n                providers: [EMAIL_VALIDATOR]\n            }]\n    }], function () { return []; }, { email: [{\n            type: Input\n        }] }); })();\n/**\n * @description\n * Provider which adds `MinLengthValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst MIN_LENGTH_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MinLengthValidator),\n    multi: true\n};\n/**\n * A directive that adds minimum length validation to controls marked with the\n * `minlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a minimum length validator\n *\n * The following example shows how to add a minimum length validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel minlength=\"4\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass MinLengthValidator {\n    constructor() {\n        this._validator = Validators.nullValidator;\n    }\n    /** @nodoc */\n    ngOnChanges(changes) {\n        if ('minlength' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    }\n    /**\n     * Method that validates whether the value meets a minimum length requirement.\n     * Returns the validation result if enabled, otherwise null.\n     * @nodoc\n     */\n    validate(control) {\n        return this.minlength == null ? null : this._validator(control);\n    }\n    /**\n     * Registers a callback function to call when the validator inputs change.\n     * @nodoc\n     */\n    registerOnValidatorChange(fn) {\n        this._onChange = fn;\n    }\n    _createValidator() {\n        this._validator = Validators.minLength(typeof this.minlength === 'number' ? this.minlength : parseInt(this.minlength, 10));\n    }\n}\nMinLengthValidator.ɵfac = function MinLengthValidator_Factory(t) { return new (t || MinLengthValidator)(); };\nMinLengthValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MinLengthValidator, selectors: [[\"\", \"minlength\", \"\", \"formControlName\", \"\"], [\"\", \"minlength\", \"\", \"formControl\", \"\"], [\"\", \"minlength\", \"\", \"ngModel\", \"\"]], hostVars: 1, hostBindings: function MinLengthValidator_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"minlength\", ctx.minlength ? ctx.minlength : null);\n    } }, inputs: { minlength: \"minlength\" }, features: [ɵngcc0.ɵɵProvidersFeature([MIN_LENGTH_VALIDATOR]), ɵngcc0.ɵɵNgOnChangesFeature] });\nMinLengthValidator.propDecorators = {\n    minlength: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MinLengthValidator, [{\n        type: Directive,\n        args: [{\n                selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n                providers: [MIN_LENGTH_VALIDATOR],\n                host: { '[attr.minlength]': 'minlength ? minlength : null' }\n            }]\n    }], function () { return []; }, { minlength: [{\n            type: Input\n        }] }); })();\n/**\n * @description\n * Provider which adds `MaxLengthValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst MAX_LENGTH_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MaxLengthValidator),\n    multi: true\n};\n/**\n * A directive that adds max length validation to controls marked with the\n * `maxlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a maximum length validator\n *\n * The following example shows how to add a maximum length validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel maxlength=\"25\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass MaxLengthValidator {\n    constructor() {\n        this._validator = Validators.nullValidator;\n    }\n    /** @nodoc */\n    ngOnChanges(changes) {\n        if ('maxlength' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    }\n    /**\n     * Method that validates whether the value exceeds the maximum length requirement.\n     * @nodoc\n     */\n    validate(control) {\n        return this.maxlength != null ? this._validator(control) : null;\n    }\n    /**\n     * Registers a callback function to call when the validator inputs change.\n     * @nodoc\n     */\n    registerOnValidatorChange(fn) {\n        this._onChange = fn;\n    }\n    _createValidator() {\n        this._validator = Validators.maxLength(typeof this.maxlength === 'number' ? this.maxlength : parseInt(this.maxlength, 10));\n    }\n}\nMaxLengthValidator.ɵfac = function MaxLengthValidator_Factory(t) { return new (t || MaxLengthValidator)(); };\nMaxLengthValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MaxLengthValidator, selectors: [[\"\", \"maxlength\", \"\", \"formControlName\", \"\"], [\"\", \"maxlength\", \"\", \"formControl\", \"\"], [\"\", \"maxlength\", \"\", \"ngModel\", \"\"]], hostVars: 1, hostBindings: function MaxLengthValidator_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"maxlength\", ctx.maxlength ? ctx.maxlength : null);\n    } }, inputs: { maxlength: \"maxlength\" }, features: [ɵngcc0.ɵɵProvidersFeature([MAX_LENGTH_VALIDATOR]), ɵngcc0.ɵɵNgOnChangesFeature] });\nMaxLengthValidator.propDecorators = {\n    maxlength: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MaxLengthValidator, [{\n        type: Directive,\n        args: [{\n                selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n                providers: [MAX_LENGTH_VALIDATOR],\n                host: { '[attr.maxlength]': 'maxlength ? maxlength : null' }\n            }]\n    }], function () { return []; }, { maxlength: [{\n            type: Input\n        }] }); })();\n/**\n * @description\n * Provider which adds `PatternValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst PATTERN_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => PatternValidator),\n    multi: true\n};\n/**\n * @description\n * A directive that adds regex pattern validation to controls marked with the\n * `pattern` attribute. The regex must match the entire control value.\n * The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a pattern validator\n *\n * The following example shows how to add a pattern validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel pattern=\"[a-zA-Z ]*\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass PatternValidator {\n    constructor() {\n        this._validator = Validators.nullValidator;\n    }\n    /** @nodoc */\n    ngOnChanges(changes) {\n        if ('pattern' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    }\n    /**\n     * Method that validates whether the value matches the the pattern requirement.\n     * @nodoc\n     */\n    validate(control) {\n        return this._validator(control);\n    }\n    /**\n     * Registers a callback function to call when the validator inputs change.\n     * @nodoc\n     */\n    registerOnValidatorChange(fn) {\n        this._onChange = fn;\n    }\n    _createValidator() {\n        this._validator = Validators.pattern(this.pattern);\n    }\n}\nPatternValidator.ɵfac = function PatternValidator_Factory(t) { return new (t || PatternValidator)(); };\nPatternValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: PatternValidator, selectors: [[\"\", \"pattern\", \"\", \"formControlName\", \"\"], [\"\", \"pattern\", \"\", \"formControl\", \"\"], [\"\", \"pattern\", \"\", \"ngModel\", \"\"]], hostVars: 1, hostBindings: function PatternValidator_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"pattern\", ctx.pattern ? ctx.pattern : null);\n    } }, inputs: { pattern: \"pattern\" }, features: [ɵngcc0.ɵɵProvidersFeature([PATTERN_VALIDATOR]), ɵngcc0.ɵɵNgOnChangesFeature] });\nPatternValidator.propDecorators = {\n    pattern: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PatternValidator, [{\n        type: Directive,\n        args: [{\n                selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n                providers: [PATTERN_VALIDATOR],\n                host: { '[attr.pattern]': 'pattern ? pattern : null' }\n            }]\n    }], function () { return []; }, { pattern: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst SHARED_FORM_DIRECTIVES = [\n    ɵNgNoValidate,\n    NgSelectOption,\n    ɵNgSelectMultipleOption,\n    DefaultValueAccessor,\n    NumberValueAccessor,\n    RangeValueAccessor,\n    CheckboxControlValueAccessor,\n    SelectControlValueAccessor,\n    SelectMultipleControlValueAccessor,\n    RadioControlValueAccessor,\n    NgControlStatus,\n    NgControlStatusGroup,\n    RequiredValidator,\n    MinLengthValidator,\n    MaxLengthValidator,\n    PatternValidator,\n    CheckboxRequiredValidator,\n    EmailValidator,\n];\nconst TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];\nconst REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n/**\n * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n */\nclass ɵInternalFormsSharedModule {\n}\nɵInternalFormsSharedModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ɵInternalFormsSharedModule });\nɵInternalFormsSharedModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ɵInternalFormsSharedModule_Factory(t) { return new (t || ɵInternalFormsSharedModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ɵInternalFormsSharedModule, { declarations: [ɵNgNoValidate, NgSelectOption, ɵNgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator], exports: [ɵNgNoValidate, NgSelectOption, ɵNgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ɵInternalFormsSharedModule, [{\n        type: NgModule,\n        args: [{\n                declarations: SHARED_FORM_DIRECTIVES,\n                exports: SHARED_FORM_DIRECTIVES\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction isAbstractControlOptions(options) {\n    return options.asyncValidators !== undefined ||\n        options.validators !== undefined ||\n        options.updateOn !== undefined;\n}\n/**\n * @description\n * Creates an `AbstractControl` from a user-specified configuration.\n *\n * The `FormBuilder` provides syntactic sugar that shortens creating instances of a `FormControl`,\n * `FormGroup`, or `FormArray`. It reduces the amount of boilerplate needed to build complex\n * forms.\n *\n * @see [Reactive Forms Guide](/guide/reactive-forms)\n *\n * @publicApi\n */\nclass FormBuilder {\n    group(controlsConfig, options = null) {\n        const controls = this._reduceControls(controlsConfig);\n        let validators = null;\n        let asyncValidators = null;\n        let updateOn = undefined;\n        if (options != null) {\n            if (isAbstractControlOptions(options)) {\n                // `options` are `AbstractControlOptions`\n                validators = options.validators != null ? options.validators : null;\n                asyncValidators = options.asyncValidators != null ? options.asyncValidators : null;\n                updateOn = options.updateOn != null ? options.updateOn : undefined;\n            }\n            else {\n                // `options` are legacy form group options\n                validators = options['validator'] != null ? options['validator'] : null;\n                asyncValidators = options['asyncValidator'] != null ? options['asyncValidator'] : null;\n            }\n        }\n        return new FormGroup(controls, { asyncValidators, updateOn, validators });\n    }\n    /**\n     * @description\n     * Construct a new `FormControl` with the given state, validators and options.\n     *\n     * @param formState Initializes the control with an initial state value, or\n     * with an object that contains both a value and a disabled status.\n     *\n     * @param validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains\n     * validation functions and a validation trigger.\n     *\n     * @param asyncValidator A single async validator or array of async validator\n     * functions.\n     *\n     * @usageNotes\n     *\n     * ### Initialize a control as disabled\n     *\n     * The following example returns a control with an initial value in a disabled state.\n     *\n     * <code-example path=\"forms/ts/formBuilder/form_builder_example.ts\" region=\"disabled-control\">\n     * </code-example>\n     */\n    control(formState, validatorOrOpts, asyncValidator) {\n        return new FormControl(formState, validatorOrOpts, asyncValidator);\n    }\n    /**\n     * Constructs a new `FormArray` from the given array of configurations,\n     * validators and options.\n     *\n     * @param controlsConfig An array of child controls or control configs. Each\n     * child control is given an index when it is registered.\n     *\n     * @param validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains\n     * validation functions and a validation trigger.\n     *\n     * @param asyncValidator A single async validator or array of async validator\n     * functions.\n     */\n    array(controlsConfig, validatorOrOpts, asyncValidator) {\n        const controls = controlsConfig.map(c => this._createControl(c));\n        return new FormArray(controls, validatorOrOpts, asyncValidator);\n    }\n    /** @internal */\n    _reduceControls(controlsConfig) {\n        const controls = {};\n        Object.keys(controlsConfig).forEach(controlName => {\n            controls[controlName] = this._createControl(controlsConfig[controlName]);\n        });\n        return controls;\n    }\n    /** @internal */\n    _createControl(controlConfig) {\n        if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n            controlConfig instanceof FormArray) {\n            return controlConfig;\n        }\n        else if (Array.isArray(controlConfig)) {\n            const value = controlConfig[0];\n            const validator = controlConfig.length > 1 ? controlConfig[1] : null;\n            const asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;\n            return this.control(value, validator, asyncValidator);\n        }\n        else {\n            return this.control(controlConfig);\n        }\n    }\n}\nFormBuilder.ɵfac = function FormBuilder_Factory(t) { return new (t || FormBuilder)(); };\nFormBuilder.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: FormBuilder, factory: FormBuilder.ɵfac });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormBuilder, [{\n        type: Injectable\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @publicApi\n */\nconst VERSION = new Version('11.0.9');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Exports the required providers and directives for template-driven forms,\n * making them available for import by NgModules that import this module.\n *\n * @see [Forms Overview](/guide/forms-overview)\n * @see [Template-driven Forms Guide](/guide/forms)\n *\n * @publicApi\n */\nclass FormsModule {\n}\nFormsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FormsModule });\nFormsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FormsModule_Factory(t) { return new (t || FormsModule)(); }, providers: [RadioControlRegistry], imports: [ɵInternalFormsSharedModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormsModule, { declarations: [NgModel, NgModelGroup, NgForm], exports: [ɵInternalFormsSharedModule, NgModel, NgModelGroup, NgForm] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormsModule, [{\n        type: NgModule,\n        args: [{\n                declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n                providers: [RadioControlRegistry],\n                exports: [ɵInternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n            }]\n    }], null, null); })();\n/**\n * Exports the required infrastructure and directives for reactive forms,\n * making them available for import by NgModules that import this module.\n *\n * @see [Forms Overview](guide/forms-overview)\n * @see [Reactive Forms Guide](guide/reactive-forms)\n *\n * @publicApi\n */\nclass ReactiveFormsModule {\n    /**\n     * @description\n     * Provides options for configuring the reactive forms module.\n     *\n     * @param opts An object of configuration options\n     * * `warnOnNgModelWithFormControl` Configures when to emit a warning when an `ngModel`\n     * binding is used with reactive form directives.\n     */\n    static withConfig(opts) {\n        return {\n            ngModule: ReactiveFormsModule,\n            providers: [\n                { provide: NG_MODEL_WITH_FORM_CONTROL_WARNING, useValue: opts.warnOnNgModelWithFormControl }\n            ]\n        };\n    }\n}\nReactiveFormsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ReactiveFormsModule });\nReactiveFormsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ReactiveFormsModule_Factory(t) { return new (t || ReactiveFormsModule)(); }, providers: [FormBuilder, RadioControlRegistry], imports: [ɵInternalFormsSharedModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ReactiveFormsModule, { declarations: [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName], exports: [ɵInternalFormsSharedModule, FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ReactiveFormsModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n                providers: [FormBuilder, RadioControlRegistry],\n                exports: [ɵInternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AbstractControl, AbstractControlDirective, AbstractFormGroupDirective, COMPOSITION_BUFFER_MODE, CheckboxControlValueAccessor, CheckboxRequiredValidator, ControlContainer, DefaultValueAccessor, EmailValidator, FormArray, FormArrayName, FormBuilder, FormControl, FormControlDirective, FormControlName, FormGroup, FormGroupDirective, FormGroupName, FormsModule, MaxLengthValidator, MinLengthValidator, NG_ASYNC_VALIDATORS, NG_VALIDATORS, NG_VALUE_ACCESSOR, NgControl, NgControlStatus, NgControlStatusGroup, NgForm, NgModel, NgModelGroup, NgSelectOption, NumberValueAccessor, PatternValidator, RadioControlValueAccessor, RangeValueAccessor, ReactiveFormsModule, RequiredValidator, SelectControlValueAccessor, SelectMultipleControlValueAccessor, VERSION, Validators, ɵInternalFormsSharedModule, ɵNgNoValidate, ɵNgSelectMultipleOption, SHARED_FORM_DIRECTIVES as ɵangular_packages_forms_forms_a, TEMPLATE_DRIVEN_DIRECTIVES as ɵangular_packages_forms_forms_b, CHECKBOX_REQUIRED_VALIDATOR as ɵangular_packages_forms_forms_ba, EMAIL_VALIDATOR as ɵangular_packages_forms_forms_bb, MIN_LENGTH_VALIDATOR as ɵangular_packages_forms_forms_bc, MAX_LENGTH_VALIDATOR as ɵangular_packages_forms_forms_bd, PATTERN_VALIDATOR as ɵangular_packages_forms_forms_be, REACTIVE_DRIVEN_DIRECTIVES as ɵangular_packages_forms_forms_c, ɵInternalFormsSharedModule as ɵangular_packages_forms_forms_d, CHECKBOX_VALUE_ACCESSOR as ɵangular_packages_forms_forms_e, DEFAULT_VALUE_ACCESSOR as ɵangular_packages_forms_forms_f, AbstractControlStatus as ɵangular_packages_forms_forms_g, ngControlStatusHost as ɵangular_packages_forms_forms_h, formDirectiveProvider as ɵangular_packages_forms_forms_i, formControlBinding as ɵangular_packages_forms_forms_j, modelGroupProvider as ɵangular_packages_forms_forms_k, NUMBER_VALUE_ACCESSOR as ɵangular_packages_forms_forms_l, RADIO_VALUE_ACCESSOR as ɵangular_packages_forms_forms_m, RadioControlRegistry as ɵangular_packages_forms_forms_n, RANGE_VALUE_ACCESSOR as ɵangular_packages_forms_forms_o, NG_MODEL_WITH_FORM_CONTROL_WARNING as ɵangular_packages_forms_forms_p, formControlBinding$1 as ɵangular_packages_forms_forms_q, controlNameBinding as ɵangular_packages_forms_forms_r, formDirectiveProvider$1 as ɵangular_packages_forms_forms_s, formGroupNameProvider as ɵangular_packages_forms_forms_t, formArrayNameProvider as ɵangular_packages_forms_forms_u, SELECT_VALUE_ACCESSOR as ɵangular_packages_forms_forms_v, SELECT_MULTIPLE_VALUE_ACCESSOR as ɵangular_packages_forms_forms_w, ɵNgSelectMultipleOption as ɵangular_packages_forms_forms_x, ɵNgNoValidate as ɵangular_packages_forms_forms_y, REQUIRED_VALIDATOR as ɵangular_packages_forms_forms_z };\n\n//# sourceMappingURL=forms.js.map","import { Component, ElementRef, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from \"@angular/core\";\nimport { Post } from \"../portfolio/project.model\";\n\n@Component({\n    selector: \"app-afterwork-item\",\n    templateUrl: \"afterwork-item.component.html\",\n    styleUrls: [\"./afterwork-item.component.scss\"],\n})\nexport class AfterWorkItemComponent implements OnInit {\n    @Input() post: Post;\n\n    constructor() {}\n    ngOnInit(): void {\n    }\n}\n","export default \"<div *ngIf=\\\"post && post.exist\\\" class=\\\"topic-container\\\">\\n    <div class=\\\"topic-image-container\\\">\\n        <div class=\\\"topic-image\\\" [ngStyle]=\\\"{ 'background-image': 'url(\\\\'' + this.post.image + '\\\\')' }\\\"></div>\\n    </div>\\n    <div class=\\\"topic\\\">\\n        <div class=\\\"tags\\\">\\n            <ng-container *ngFor=\\\"let tag of post.tags\\\">\\n                <label class=\\\"tag-item\\\"\\n                    ><a href=\\\"#\\\">#{{ tag }}</a></label\\n                >\\n            </ng-container>\\n        </div>\\n        <h3 class=\\\"title\\\">{{ post.title }}</h3>\\n        <p class=\\\"description\\\">\\n            {{ post.description }}\\n        </p>\\n        <div class=\\\"topic-footer\\\">\\n            <div class=\\\"date\\\">{{ post.date_end }}</div>\\n            <div class=\\\"topic-link\\\">\\n                <a href=\\\"{{ post.link }}\\\">Read More</a>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\";","export default \".topic-container {\\n  background-color: #daf2e5;\\n  margin-bottom: 10px;\\n  border: 1px solid #f29e03;\\n  border-radius: 10px;\\n  overflow: hidden;\\n}\\n\\n.topic-image-container {\\n  padding: 10px;\\n  background-color: rgba(255, 255, 255, 0.7);\\n}\\n\\n.topic-image-container div {\\n  border-radius: 10px;\\n}\\n\\n.topic-image {\\n  width: 100%;\\n  height: 250px;\\n  background-repeat: no-repeat;\\n  background-size: cover;\\n  background-position: center;\\n  margin-right: 10px;\\n}\\n\\n.topic {\\n  width: calc(100% - 30px);\\n  padding: 10px 15px;\\n  background-color: rgba(255, 255, 255, 0.7);\\n}\\n\\n.topic .title {\\n  font-size: 18px !important;\\n  font-weight: 500;\\n  line-height: 1.3;\\n  margin-bottom: 10px;\\n}\\n\\n.topic .tags {\\n  line-height: 1;\\n  margin-bottom: 5px;\\n}\\n\\n.topic .tags .tag-item {\\n  display: inline-block;\\n  background-color: #0f9d5830;\\n  border: 1px solid #0f9d5830;\\n  margin-right: 5px;\\n  border-radius: 5px;\\n  padding: 4px;\\n  min-width: 40px;\\n  text-align: center;\\n}\\n\\n.topic .tags a {\\n  text-decoration: none;\\n}\\n\\n.topic .tags a:hover {\\n  color: #f29e03 !important;\\n}\\n\\n.topic .description {\\n  margin-top: 5px;\\n  margin-bottom: 0px;\\n  text-align: justify;\\n}\\n\\n.topic .topic-footer {\\n  margin-top: 10px;\\n  text-align: right;\\n  display: flex;\\n}\\n\\n.topic .topic-footer .date {\\n  margin-right: auto;\\n  font-size: small;\\n  color: #00717b !important;\\n}\\n\\n.topic .topic-footer .topic-link a {\\n  color: #00717b !important;\\n  margin-right: 10px;\\n}\\n\\n.topic .topic-footer .topic-link a:hover {\\n  color: #f29e03 !important;\\n}\";","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { AfterWorkItemComponent } from \"./afterwork-item.component\";\nimport { MatTooltipModule } from \"@angular/material/tooltip\";\n\n@NgModule({\n    declarations: [AfterWorkItemComponent],\n    imports: [CommonModule, MatTooltipModule],\n    exports: [AfterWorkItemComponent],\n})\nexport class AfterWorkItemModule {}\n","import { Subscriber } from '../Subscriber';\nexport function skip(count) {\n    return (source) => source.lift(new SkipOperator(count));\n}\nclass SkipOperator {\n    constructor(total) {\n        this.total = total;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new SkipSubscriber(subscriber, this.total));\n    }\n}\nclass SkipSubscriber extends Subscriber {\n    constructor(destination, total) {\n        super(destination);\n        this.total = total;\n        this.count = 0;\n    }\n    _next(x) {\n        if (++this.count > this.total) {\n            this.destination.next(x);\n        }\n    }\n}\n//# sourceMappingURL=skip.js.map","import { NgModule, ɵɵdefineInjectable, ɵɵinject, Injectable, NgZone } from '@angular/core';\nimport { coerceArray } from '@angular/cdk/coercion';\nimport { Subject, combineLatest, concat, Observable } from 'rxjs';\nimport { take, skip, debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport { Platform } from '@angular/cdk/platform';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nclass LayoutModule {\n}\nLayoutModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: LayoutModule });\nLayoutModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function LayoutModule_Factory(t) { return new (t || LayoutModule)(); } });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LayoutModule, [{\n        type: NgModule,\n        args: [{}]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Global registry for all dynamically-created, injected media queries. */\nconst mediaQueriesForWebkitCompatibility = new Set();\n/** Style tag that holds all of the dynamically-created media queries. */\nlet mediaQueryStyleNode;\n/** A utility for calling matchMedia queries. */\nclass MediaMatcher {\n    constructor(_platform) {\n        this._platform = _platform;\n        this._matchMedia = this._platform.isBrowser && window.matchMedia ?\n            // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n            // call it from a different scope.\n            window.matchMedia.bind(window) :\n            noopMatchMedia;\n    }\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     */\n    matchMedia(query) {\n        if (this._platform.WEBKIT) {\n            createEmptyStyleRule(query);\n        }\n        return this._matchMedia(query);\n    }\n}\nMediaMatcher.ɵfac = function MediaMatcher_Factory(t) { return new (t || MediaMatcher)(ɵngcc0.ɵɵinject(ɵngcc1.Platform)); };\nMediaMatcher.ɵprov = ɵɵdefineInjectable({ factory: function MediaMatcher_Factory() { return new MediaMatcher(ɵɵinject(Platform)); }, token: MediaMatcher, providedIn: \"root\" });\nMediaMatcher.ctorParameters = () => [\n    { type: Platform }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MediaMatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }]; }, null); })();\n/**\n * For Webkit engines that only trigger the MediaQueryListListener when\n * there is at least one CSS selector for the respective media query.\n */\nfunction createEmptyStyleRule(query) {\n    if (mediaQueriesForWebkitCompatibility.has(query)) {\n        return;\n    }\n    try {\n        if (!mediaQueryStyleNode) {\n            mediaQueryStyleNode = document.createElement('style');\n            mediaQueryStyleNode.setAttribute('type', 'text/css');\n            document.head.appendChild(mediaQueryStyleNode);\n        }\n        if (mediaQueryStyleNode.sheet) {\n            mediaQueryStyleNode.sheet\n                .insertRule(`@media ${query} {.fx-query-test{ }}`, 0);\n            mediaQueriesForWebkitCompatibility.add(query);\n        }\n    }\n    catch (e) {\n        console.error(e);\n    }\n}\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query) {\n    // Use `as any` here to avoid adding additional necessary properties for\n    // the noop matcher.\n    return {\n        matches: query === 'all' || query === '',\n        media: query,\n        addListener: () => { },\n        removeListener: () => { }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Utility for checking the matching state of @media queries. */\nclass BreakpointObserver {\n    constructor(_mediaMatcher, _zone) {\n        this._mediaMatcher = _mediaMatcher;\n        this._zone = _zone;\n        /**  A map of all media queries currently being listened for. */\n        this._queries = new Map();\n        /** A subject for all other observables to takeUntil based on. */\n        this._destroySubject = new Subject();\n    }\n    /** Completes the active subject, signalling to all other observables to complete. */\n    ngOnDestroy() {\n        this._destroySubject.next();\n        this._destroySubject.complete();\n    }\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param value One or more media queries to check.\n     * @returns Whether any of the media queries match.\n     */\n    isMatched(value) {\n        const queries = splitQueries(coerceArray(value));\n        return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n    }\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param value One or more media queries to check.\n     * @returns A stream of matches for the given queries.\n     */\n    observe(value) {\n        const queries = splitQueries(coerceArray(value));\n        const observables = queries.map(query => this._registerQuery(query).observable);\n        let stateObservable = combineLatest(observables);\n        // Emit the first state immediately, and then debounce the subsequent emissions.\n        stateObservable = concat(stateObservable.pipe(take(1)), stateObservable.pipe(skip(1), debounceTime(0)));\n        return stateObservable.pipe(map(breakpointStates => {\n            const response = {\n                matches: false,\n                breakpoints: {},\n            };\n            breakpointStates.forEach(({ matches, query }) => {\n                response.matches = response.matches || matches;\n                response.breakpoints[query] = matches;\n            });\n            return response;\n        }));\n    }\n    /** Registers a specific query to be listened for. */\n    _registerQuery(query) {\n        // Only set up a new MediaQueryList if it is not already being listened for.\n        if (this._queries.has(query)) {\n            return this._queries.get(query);\n        }\n        const mql = this._mediaMatcher.matchMedia(query);\n        // Create callback for match changes and add it is as a listener.\n        const queryObservable = new Observable((observer) => {\n            // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n            // back into the zone because matchMedia is only included in Zone.js by loading the\n            // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n            // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n            // patches it.\n            const handler = (e) => this._zone.run(() => observer.next(e));\n            mql.addListener(handler);\n            return () => {\n                mql.removeListener(handler);\n            };\n        }).pipe(startWith(mql), map(({ matches }) => ({ query, matches })), takeUntil(this._destroySubject));\n        // Add the MediaQueryList to the set of queries.\n        const output = { observable: queryObservable, mql };\n        this._queries.set(query, output);\n        return output;\n    }\n}\nBreakpointObserver.ɵfac = function BreakpointObserver_Factory(t) { return new (t || BreakpointObserver)(ɵngcc0.ɵɵinject(MediaMatcher), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nBreakpointObserver.ɵprov = ɵɵdefineInjectable({ factory: function BreakpointObserver_Factory() { return new BreakpointObserver(ɵɵinject(MediaMatcher), ɵɵinject(NgZone)); }, token: BreakpointObserver, providedIn: \"root\" });\nBreakpointObserver.ctorParameters = () => [\n    { type: MediaMatcher },\n    { type: NgZone }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BreakpointObserver, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: MediaMatcher }, { type: ɵngcc0.NgZone }]; }, null); })();\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries) {\n    return queries.map(query => query.split(','))\n        .reduce((a1, a2) => a1.concat(a2))\n        .map(query => query.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nconst Breakpoints = {\n    XSmall: '(max-width: 599.98px)',\n    Small: '(min-width: 600px) and (max-width: 959.98px)',\n    Medium: '(min-width: 960px) and (max-width: 1279.98px)',\n    Large: '(min-width: 1280px) and (max-width: 1919.98px)',\n    XLarge: '(min-width: 1920px)',\n    Handset: '(max-width: 599.98px) and (orientation: portrait), ' +\n        '(max-width: 959.98px) and (orientation: landscape)',\n    Tablet: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait), ' +\n        '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n    Web: '(min-width: 840px) and (orientation: portrait), ' +\n        '(min-width: 1280px) and (orientation: landscape)',\n    HandsetPortrait: '(max-width: 599.98px) and (orientation: portrait)',\n    TabletPortrait: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait)',\n    WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n    HandsetLandscape: '(max-width: 959.98px) and (orientation: landscape)',\n    TabletLandscape: '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n    WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreakpointObserver, Breakpoints, LayoutModule, MediaMatcher };\n\n//# sourceMappingURL=layout.js.map","import { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, ElementRef, ViewContainerRef, NgZone, Inject, Optional, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\nimport { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/overlay';\nimport * as ɵngcc2 from '@angular/cdk/scrolling';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/a11y';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\nimport * as ɵngcc6 from '@angular/cdk/layout';\nimport * as ɵngcc7 from '@angular/common';\nconst matTooltipAnimations = {\n    /** Animation that transitions a tooltip in and out. */\n    tooltipState: trigger('state', [\n        state('initial, void, hidden', style({ opacity: 0, transform: 'scale(0)' })),\n        state('visible', style({ transform: 'scale(1)' })),\n        transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n            style({ opacity: 0, transform: 'scale(0)', offset: 0 }),\n            style({ opacity: 0.5, transform: 'scale(0.99)', offset: 0.5 }),\n            style({ opacity: 1, transform: 'scale(1)', offset: 1 })\n        ]))),\n        transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({ opacity: 0 }))),\n    ])\n};\n\n/** Time in ms to throttle repositioning after scroll events. */\nconst SCROLL_THROTTLE_MS = 20;\n/** CSS class that will be attached to the overlay panel. */\nconst TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n/** Options used to bind passive event listeners. */\nconst passiveListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\nconst LONGPRESS_DELAY = 500;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nfunction getMatTooltipInvalidPositionError(position) {\n    return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/** @docs-private */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n/** @docs-private */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n/** Injection token to be used to override the default options for `matTooltip`. */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n    providedIn: 'root',\n    factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n    };\n}\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nclass MatTooltip {\n    constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, \n    /** @breaking-change 11.0.0 _document argument to become required. */\n    _document) {\n        this._overlay = _overlay;\n        this._elementRef = _elementRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewContainerRef = _viewContainerRef;\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._ariaDescriber = _ariaDescriber;\n        this._focusMonitor = _focusMonitor;\n        this._dir = _dir;\n        this._defaultOptions = _defaultOptions;\n        this._position = 'below';\n        this._disabled = false;\n        this._viewInitialized = false;\n        this._pointerExitEventsInitialized = false;\n        /** The default delay in ms before showing the tooltip after show is called */\n        this.showDelay = this._defaultOptions.showDelay;\n        /** The default delay in ms before hiding the tooltip after hide is called */\n        this.hideDelay = this._defaultOptions.hideDelay;\n        /**\n         * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n         * uses a long press gesture to show and hide, however it can conflict with the native browser\n         * gestures. To work around the conflict, Angular Material disables native gestures on the\n         * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n         * elements). The different values for this option configure the touch event handling as follows:\n         * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n         *   browser gestures on particular elements. In particular, it allows text selection on inputs\n         *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n         * - `on` - Enables touch gestures for all elements and disables native\n         *   browser gestures with no exceptions.\n         * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n         *   showing on touch devices.\n         */\n        this.touchGestures = 'auto';\n        this._message = '';\n        /** Manually-bound passive event listeners. */\n        this._passiveListeners = [];\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Handles the keydown events on the host element.\n         * Needs to be an arrow function so that we can use it in addEventListener.\n         */\n        this._handleKeydown = (event) => {\n            if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n                event.preventDefault();\n                event.stopPropagation();\n                this._ngZone.run(() => this.hide(0));\n            }\n        };\n        this._scrollStrategy = scrollStrategy;\n        if (_defaultOptions) {\n            if (_defaultOptions.position) {\n                this.position = _defaultOptions.position;\n            }\n            if (_defaultOptions.touchGestures) {\n                this.touchGestures = _defaultOptions.touchGestures;\n            }\n        }\n        _ngZone.runOutsideAngular(() => {\n            _elementRef.nativeElement.addEventListener('keydown', this._handleKeydown);\n        });\n    }\n    /** Allows the user to define the position of the tooltip relative to the parent element */\n    get position() { return this._position; }\n    set position(value) {\n        if (value !== this._position) {\n            this._position = value;\n            if (this._overlayRef) {\n                this._updatePosition();\n                if (this._tooltipInstance) {\n                    this._tooltipInstance.show(0);\n                }\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    /** Disables the display of the tooltip. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // If tooltip is disabled, hide immediately.\n        if (this._disabled) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n        }\n    }\n    /** The message to be displayed in the tooltip */\n    get message() { return this._message; }\n    set message(value) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message, 'tooltip');\n        // If the message is not a string (e.g. number), convert it to a string and trim it.\n        // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n        // away the string-conversion: https://github.com/angular/components/issues/20684\n        this._message = value != null ? String(value).trim() : '';\n        if (!this._message && this._isTooltipVisible()) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n            this._updateTooltipMessage();\n            this._ngZone.runOutsideAngular(() => {\n                // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n                // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n                // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n                // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n                Promise.resolve().then(() => {\n                    this._ariaDescriber.describe(this._elementRef.nativeElement, this.message, 'tooltip');\n                });\n            });\n        }\n    }\n    /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n    get tooltipClass() { return this._tooltipClass; }\n    set tooltipClass(value) {\n        this._tooltipClass = value;\n        if (this._tooltipInstance) {\n            this._setTooltipClass(this._tooltipClass);\n        }\n    }\n    ngAfterViewInit() {\n        // This needs to happen after view init so the initial values for all inputs have been set.\n        this._viewInitialized = true;\n        this._setupPointerEnterEventsIfNeeded();\n        this._focusMonitor.monitor(this._elementRef)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(origin => {\n            // Note that the focus monitor runs outside the Angular zone.\n            if (!origin) {\n                this._ngZone.run(() => this.hide(0));\n            }\n            else if (origin === 'keyboard') {\n                this._ngZone.run(() => this.show());\n            }\n        });\n    }\n    /**\n     * Dispose the tooltip when destroyed.\n     */\n    ngOnDestroy() {\n        const nativeElement = this._elementRef.nativeElement;\n        clearTimeout(this._touchstartTimeout);\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._tooltipInstance = null;\n        }\n        // Clean up the event listeners set in the constructor\n        nativeElement.removeEventListener('keydown', this._handleKeydown);\n        this._passiveListeners.forEach(([event, listener]) => {\n            nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n        });\n        this._passiveListeners.length = 0;\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n        this._focusMonitor.stopMonitoring(nativeElement);\n    }\n    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n    show(delay = this.showDelay) {\n        if (this.disabled || !this.message || (this._isTooltipVisible() &&\n            !this._tooltipInstance._showTimeoutId && !this._tooltipInstance._hideTimeoutId)) {\n            return;\n        }\n        const overlayRef = this._createOverlay();\n        this._detach();\n        this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n        this._tooltipInstance = overlayRef.attach(this._portal).instance;\n        this._tooltipInstance.afterHidden()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._setTooltipClass(this._tooltipClass);\n        this._updateTooltipMessage();\n        this._tooltipInstance.show(delay);\n    }\n    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n    hide(delay = this.hideDelay) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.hide(delay);\n        }\n    }\n    /** Shows/hides the tooltip */\n    toggle() {\n        this._isTooltipVisible() ? this.hide() : this.show();\n    }\n    /** Returns true if the tooltip is currently visible to the user */\n    _isTooltipVisible() {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    }\n    /** Create the overlay config and position strategy */\n    _createOverlay() {\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n        const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._elementRef)\n            .withTransformOriginOn('.mat-tooltip')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(8)\n            .withScrollableContainers(scrollableAncestors);\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n            if (this._tooltipInstance) {\n                if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this._ngZone.run(() => this.hide(0));\n                }\n            }\n        });\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: TOOLTIP_PANEL_CLASS,\n            scrollStrategy: this._scrollStrategy()\n        });\n        this._updatePosition();\n        this._overlayRef.detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        return this._overlayRef;\n    }\n    /** Detaches the currently-attached tooltip. */\n    _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n        this._tooltipInstance = null;\n    }\n    /** Updates the position of the current tooltip. */\n    _updatePosition() {\n        const position = this._overlayRef.getConfig().positionStrategy;\n        const origin = this._getOrigin();\n        const overlay = this._getOverlayPosition();\n        position.withPositions([\n            Object.assign(Object.assign({}, origin.main), overlay.main),\n            Object.assign(Object.assign({}, origin.fallback), overlay.fallback)\n        ]);\n    }\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    _getOrigin() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let originPosition;\n        if (position == 'above' || position == 'below') {\n            originPosition = { originX: 'center', originY: position == 'above' ? 'top' : 'bottom' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            originPosition = { originX: 'start', originY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            originPosition = { originX: 'end', originY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(originPosition.originX, originPosition.originY);\n        return {\n            main: originPosition,\n            fallback: { originX: x, originY: y }\n        };\n    }\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    _getOverlayPosition() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let overlayPosition;\n        if (position == 'above') {\n            overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n        }\n        else if (position == 'below') {\n            overlayPosition = { overlayX: 'center', overlayY: 'top' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            overlayPosition = { overlayX: 'end', overlayY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            overlayPosition = { overlayX: 'start', overlayY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n        return {\n            main: overlayPosition,\n            fallback: { overlayX: x, overlayY: y }\n        };\n    }\n    /** Updates the tooltip message and repositions the overlay according to the new message length */\n    _updateTooltipMessage() {\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        if (this._tooltipInstance) {\n            this._tooltipInstance.message = this.message;\n            this._tooltipInstance._markForCheck();\n            this._ngZone.onMicrotaskEmpty.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                if (this._tooltipInstance) {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n    }\n    /** Updates the tooltip class */\n    _setTooltipClass(tooltipClass) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.tooltipClass = tooltipClass;\n            this._tooltipInstance._markForCheck();\n        }\n    }\n    /** Inverts an overlay position. */\n    _invertPosition(x, y) {\n        if (this.position === 'above' || this.position === 'below') {\n            if (y === 'top') {\n                y = 'bottom';\n            }\n            else if (y === 'bottom') {\n                y = 'top';\n            }\n        }\n        else {\n            if (x === 'end') {\n                x = 'start';\n            }\n            else if (x === 'start') {\n                x = 'end';\n            }\n        }\n        return { x, y };\n    }\n    /** Binds the pointer events to the tooltip trigger. */\n    _setupPointerEnterEventsIfNeeded() {\n        // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n        if (this._disabled || !this.message || !this._viewInitialized ||\n            this._passiveListeners.length) {\n            return;\n        }\n        // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n        // first tap from firing its click event or can cause the tooltip to open for clicks.\n        if (this._platformSupportsMouseEvents()) {\n            this._passiveListeners\n                .push(['mouseenter', () => {\n                    this._setupPointerExitEventsIfNeeded();\n                    this.show();\n                }]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            this._passiveListeners\n                .push(['touchstart', () => {\n                    // Note that it's important that we don't `preventDefault` here,\n                    // because it can prevent click events from firing on the element.\n                    this._setupPointerExitEventsIfNeeded();\n                    clearTimeout(this._touchstartTimeout);\n                    this._touchstartTimeout = setTimeout(() => this.show(), LONGPRESS_DELAY);\n                }]);\n        }\n        this._addListeners(this._passiveListeners);\n    }\n    _setupPointerExitEventsIfNeeded() {\n        if (this._pointerExitEventsInitialized) {\n            return;\n        }\n        this._pointerExitEventsInitialized = true;\n        const exitListeners = [];\n        if (this._platformSupportsMouseEvents()) {\n            exitListeners.push(['mouseleave', () => this.hide()], ['wheel', event => this._wheelListener(event)]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            const touchendListener = () => {\n                clearTimeout(this._touchstartTimeout);\n                this.hide(this._defaultOptions.touchendHideDelay);\n            };\n            exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n        }\n        this._addListeners(exitListeners);\n        this._passiveListeners.push(...exitListeners);\n    }\n    _addListeners(listeners) {\n        listeners.forEach(([event, listener]) => {\n            this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n        });\n    }\n    _platformSupportsMouseEvents() {\n        return !this._platform.IOS && !this._platform.ANDROID;\n    }\n    /** Listener for the `wheel` event on the element. */\n    _wheelListener(event) {\n        if (this._isTooltipVisible()) {\n            // @breaking-change 11.0.0 Remove `|| document` once the document is a required param.\n            const doc = this._document || document;\n            const elementUnderPointer = doc.elementFromPoint(event.clientX, event.clientY);\n            const element = this._elementRef.nativeElement;\n            // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n            // won't fire if the user scrolls away using the wheel without moving their cursor. We\n            // work around it by finding the element under the user's cursor and closing the tooltip\n            // if it's not the trigger.\n            if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n                this.hide();\n            }\n        }\n    }\n    /** Disables the native browser gestures, based on how the tooltip has been configured. */\n    _disableNativeGesturesIfNecessary() {\n        const gestures = this.touchGestures;\n        if (gestures !== 'off') {\n            const element = this._elementRef.nativeElement;\n            const style = element.style;\n            // If gestures are set to `auto`, we don't disable text selection on inputs and\n            // textareas, because it prevents the user from typing into them on iOS Safari.\n            if (gestures === 'on' || (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {\n                style.userSelect = style.msUserSelect = style.webkitUserSelect =\n                    style.MozUserSelect = 'none';\n            }\n            // If we have `auto` gestures and the element uses native HTML dragging,\n            // we don't set `-webkit-user-drag` because it prevents the native behavior.\n            if (gestures === 'on' || !element.draggable) {\n                style.webkitUserDrag = 'none';\n            }\n            style.touchAction = 'none';\n            style.webkitTapHighlightColor = 'transparent';\n        }\n    }\n}\nMatTooltip.ɵfac = function MatTooltip_Factory(t) { return new (t || MatTooltip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nMatTooltip.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTooltip, selectors: [[\"\", \"matTooltip\", \"\"]], hostAttrs: [1, \"mat-tooltip-trigger\"], inputs: { showDelay: [\"matTooltipShowDelay\", \"showDelay\"], hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"], touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"], position: [\"matTooltipPosition\", \"position\"], disabled: [\"matTooltipDisabled\", \"disabled\"], message: [\"matTooltip\", \"message\"], tooltipClass: [\"matTooltipClass\", \"tooltipClass\"] }, exportAs: [\"matTooltip\"] });\nMatTooltip.ctorParameters = () => [\n    { type: Overlay },\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: AriaDescriber },\n    { type: FocusMonitor },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_TOOLTIP_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_TOOLTIP_DEFAULT_OPTIONS,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nMatTooltip.propDecorators = {\n    position: [{ type: Input, args: ['matTooltipPosition',] }],\n    disabled: [{ type: Input, args: ['matTooltipDisabled',] }],\n    showDelay: [{ type: Input, args: ['matTooltipShowDelay',] }],\n    hideDelay: [{ type: Input, args: ['matTooltipHideDelay',] }],\n    touchGestures: [{ type: Input, args: ['matTooltipTouchGestures',] }],\n    message: [{ type: Input, args: ['matTooltip',] }],\n    tooltipClass: [{ type: Input, args: ['matTooltipClass',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTooltip, [{\n        type: Directive,\n        args: [{\n                selector: '[matTooltip]',\n                exportAs: 'matTooltip',\n                host: {\n                    'class': 'mat-tooltip-trigger'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc1.Overlay }, { type: ɵngcc0.ElementRef }, { type: ɵngcc2.ScrollDispatcher }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc3.Platform }, { type: ɵngcc4.AriaDescriber }, { type: ɵngcc4.FocusMonitor }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc5.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { showDelay: [{\n            type: Input,\n            args: ['matTooltipShowDelay']\n        }], hideDelay: [{\n            type: Input,\n            args: ['matTooltipHideDelay']\n        }], touchGestures: [{\n            type: Input,\n            args: ['matTooltipTouchGestures']\n        }], position: [{\n            type: Input,\n            args: ['matTooltipPosition']\n        }], disabled: [{\n            type: Input,\n            args: ['matTooltipDisabled']\n        }], message: [{\n            type: Input,\n            args: ['matTooltip']\n        }], tooltipClass: [{\n            type: Input,\n            args: ['matTooltipClass']\n        }] }); })();\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\nclass TooltipComponent {\n    constructor(_changeDetectorRef, _breakpointObserver) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._breakpointObserver = _breakpointObserver;\n        /** Property watched by the animation framework to show or hide the tooltip */\n        this._visibility = 'initial';\n        /** Whether interactions on the page should close the tooltip */\n        this._closeOnInteraction = false;\n        /** Subject for notifying that the tooltip has been hidden from the view */\n        this._onHide = new Subject();\n        /** Stream that emits whether the user has a handset-sized display.  */\n        this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param delay Amount of milliseconds to the delay showing the tooltip.\n     */\n    show(delay) {\n        // Cancel the delayed hide if it is scheduled\n        if (this._hideTimeoutId) {\n            clearTimeout(this._hideTimeoutId);\n            this._hideTimeoutId = null;\n        }\n        // Body interactions should cancel the tooltip if there is a delay in showing.\n        this._closeOnInteraction = true;\n        this._showTimeoutId = setTimeout(() => {\n            this._visibility = 'visible';\n            this._showTimeoutId = null;\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }, delay);\n    }\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param delay Amount of milliseconds to delay showing the tooltip.\n     */\n    hide(delay) {\n        // Cancel the delayed show if it is scheduled\n        if (this._showTimeoutId) {\n            clearTimeout(this._showTimeoutId);\n            this._showTimeoutId = null;\n        }\n        this._hideTimeoutId = setTimeout(() => {\n            this._visibility = 'hidden';\n            this._hideTimeoutId = null;\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }, delay);\n    }\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden() {\n        return this._onHide;\n    }\n    /** Whether the tooltip is being displayed. */\n    isVisible() {\n        return this._visibility === 'visible';\n    }\n    ngOnDestroy() {\n        this._onHide.complete();\n    }\n    _animationStart() {\n        this._closeOnInteraction = false;\n    }\n    _animationDone(event) {\n        const toState = event.toState;\n        if (toState === 'hidden' && !this.isVisible()) {\n            this._onHide.next();\n        }\n        if (toState === 'visible' || toState === 'hidden') {\n            this._closeOnInteraction = true;\n        }\n    }\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     */\n    _handleBodyInteraction() {\n        if (this._closeOnInteraction) {\n            this.hide(0);\n        }\n    }\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     */\n    _markForCheck() {\n        this._changeDetectorRef.markForCheck();\n    }\n}\nTooltipComponent.ɵfac = function TooltipComponent_Factory(t) { return new (t || TooltipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.BreakpointObserver)); };\nTooltipComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TooltipComponent, selectors: [[\"mat-tooltip-component\"]], hostAttrs: [\"aria-hidden\", \"true\"], hostVars: 2, hostBindings: function TooltipComponent_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function TooltipComponent_click_HostBindingHandler() { return ctx._handleBodyInteraction(); }, false, ɵngcc0.ɵɵresolveBody)(\"auxclick\", function TooltipComponent_auxclick_HostBindingHandler() { return ctx._handleBodyInteraction(); }, false, ɵngcc0.ɵɵresolveBody);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"zoom\", ctx._visibility === \"visible\" ? 1 : null);\n    } }, decls: 3, vars: 7, consts: [[1, \"mat-tooltip\", 3, \"ngClass\"]], template: function TooltipComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"@state.start\", function TooltipComponent_Template_div_animation_state_start_0_listener() { return ctx._animationStart(); })(\"@state.done\", function TooltipComponent_Template_div_animation_state_done_0_listener($event) { return ctx._animationDone($event); });\n        ɵngcc0.ɵɵpipe(1, \"async\");\n        ɵngcc0.ɵɵtext(2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        let tmp_0_0 = null;\n        ɵngcc0.ɵɵclassProp(\"mat-tooltip-handset\", (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(1, 5, ctx._isHandset)) == null ? null : tmp_0_0.matches);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.tooltipClass)(\"@state\", ctx._visibility);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.message);\n    } }, directives: [ɵngcc7.NgClass], pipes: [ɵngcc7.AsyncPipe], styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"], encapsulation: 2, data: { animation: [matTooltipAnimations.tooltipState] }, changeDetection: 0 });\nTooltipComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: BreakpointObserver }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TooltipComponent, [{\n        type: Component,\n        args: [{\n                selector: 'mat-tooltip-component',\n                template: \"<div class=\\\"mat-tooltip\\\"\\n     [ngClass]=\\\"tooltipClass\\\"\\n     [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\"\\n     [@state]=\\\"_visibility\\\"\\n     (@state.start)=\\\"_animationStart()\\\"\\n     (@state.done)=\\\"_animationDone($event)\\\">{{message}}</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                animations: [matTooltipAnimations.tooltipState],\n                host: {\n                    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n                    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n                    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n                    '(body:click)': 'this._handleBodyInteraction()',\n                    '(body:auxclick)': 'this._handleBodyInteraction()',\n                    'aria-hidden': 'true'\n                },\n                styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc6.BreakpointObserver }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatTooltipModule {\n}\nMatTooltipModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatTooltipModule });\nMatTooltipModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatTooltipModule_Factory(t) { return new (t || MatTooltipModule)(); }, providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[\n            A11yModule,\n            CommonModule,\n            OverlayModule,\n            MatCommonModule,\n        ], MatCommonModule, CdkScrollableModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTooltipModule, { declarations: function () { return [MatTooltip, TooltipComponent]; }, imports: function () { return [A11yModule,\n        CommonModule,\n        OverlayModule,\n        MatCommonModule]; }, exports: function () { return [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTooltipModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    A11yModule,\n                    CommonModule,\n                    OverlayModule,\n                    MatCommonModule,\n                ],\n                exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n                declarations: [MatTooltip, TooltipComponent],\n                entryComponents: [TooltipComponent],\n                providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, getMatTooltipInvalidPositionError, matTooltipAnimations };\n\n//# sourceMappingURL=tooltip.js.map","import { Injectable } from \"@angular/core\";\nimport { ScullyRoute, ScullyRoutesService } from \"@scullyio/ng-lib\";\nimport { Observable } from \"rxjs\";\nimport { map, share } from \"rxjs/operators\";\nimport { Post } from \"../main-screen/portfolio/project.model\";\n\n@Injectable({\n    providedIn: \"root\",\n})\nexport class PostsService {\n    links$: Observable<ScullyRoute[]> = null;\n    posts$: Observable<Post[]> = null;\n    tags$: Observable<String[]> = null;\n\n    constructor(private scullyService: ScullyRoutesService) {\n        this.links$ = this.scullyService.allRoutes$.pipe(\n            map((scullyRoutes) => scullyRoutes.filter((scullyRoute) => scullyRoute.route.startsWith(\"/blog\"))),\n            map((scullyRoutes) => scullyRoutes.sort((postA, postB) => postA.priority - postB.priority)),\n            map((scullyRoutes) =>\n                scullyRoutes.map((routes) => {\n                    // console.log(routes);\n                    routes.title = routes.title.replace(\"　\", \" \");\n                    return routes;\n                })\n            )\n        );\n        this.posts$ = this.links$.pipe(map((links) => this.scullyRoute2Project(links)));\n        this.tags$ = this.posts$.pipe(\n            map((posts) => {\n                let tags = posts.map((post) => post.tags).flat();\n                return [...new Set(tags)];\n            })\n        );\n    }\n\n    getPosts(limit: number, mode: number): Observable<Post[]> {\n        if (mode === 2)\n            return this.posts$.pipe(\n                map((posts) => {\n                    posts = posts.sort((a, b) => a.priority - b.priority);\n                    return posts.slice(0, limit);\n                })\n            );\n        if (mode === 1)\n            return this.posts$.pipe(\n                map((posts) => {\n                    posts = posts.filter((post) => post.type_index === undefined || (post.type_index !== undefined && post.type_index === mode)).sort((a, b) => a.priority - b.priority);\n                    return posts.slice(0, limit);\n                })\n            );\n        if (mode === 0)\n            return this.posts$.pipe(\n                map((posts) => {\n                    posts = posts.filter((post) => post.type_index !== undefined && post.type_index === mode).sort((a, b) => a.priority - b.priority);\n                    return posts.slice(0, limit);\n                })\n            );\n    }\n\n    getTags(limit: number): Observable<String[]> {\n        return this.tags$.pipe(map((posts) => posts.slice(0, limit)));\n    }\n\n    /**\n     * Convert Scully routes to Project\n     * @param scullyRoutes\n     * @returns\n     */\n    scullyRoute2Project(scullyRoutes: ScullyRoute[]): Post[] {\n        return scullyRoutes.map<Post>((scullyRoute) => {\n            return {\n                title: scullyRoute.title,\n                image: scullyRoute.image,\n                tags: scullyRoute.tags,\n                description: scullyRoute.description,\n                date_start: scullyRoute.date_start,\n                date_end: scullyRoute.date_end,\n                link: scullyRoute.route,\n                exist: scullyRoute.published,\n                priority: scullyRoute.priority,\n                type_index: scullyRoute.type_index\n            };\n        });\n    }\n}\n","import { COMMA, ENTER, SPACE } from \"@angular/cdk/keycodes\";\nimport { ChangeDetectionStrategy, Component, ElementRef, HostListener, Input, OnDestroy, OnInit, ViewChild } from \"@angular/core\";\nimport { FormControl } from \"@angular/forms\";\nimport { MatAutocompleteSelectedEvent } from \"@angular/material/autocomplete\";\nimport { MatChipInputEvent } from \"@angular/material/chips\";\nimport { MatTabChangeEvent, MatTabGroup } from \"@angular/material/tabs\";\nimport { ScullyRoute } from \"@scullyio/ng-lib\";\nimport { BehaviorSubject, Observable } from \"rxjs\";\nimport { map, startWith } from \"rxjs/operators\";\nimport { Post } from \"../portfolio/project.model\";\nimport { PostsService } from \"../../shared/posts.service\";\n\nexport enum Mode {\n    \"non-tech\" = 0,\n    \"tech\" = 1,\n    \"all\" = 2,\n}\n\nconst ALL_STR = \"All\";\n\n@Component({\n    selector: \"app-after-work\",\n    templateUrl: \"./after-work.component.html\",\n    styleUrls: [\"./after-work.component.scss\"],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AfterWorkComponent implements OnInit, OnDestroy {\n    @Input()\n    currentNavIndex = 0;\n\n    _posts: BehaviorSubject<Post[][]> = new BehaviorSubject<Post[][]>([]);\n    posts$: Observable<Post[][]> = this._posts.asObservable();\n    keywords$: Observable<String[]>;\n\n    allPosts: Post[] = [];\n    allCurrentModePost: Post[] = [];\n\n    remains: Post[] = [];\n    selectedKeywords: String[] = [];\n    allKeywords: String[] = [];\n    searchFormControl = new FormControl();\n    separatorKeysCodes: number[] = [ENTER, COMMA, SPACE];\n\n    subcribed = false;\n\n    @ViewChild(\"keywordInput\") keywordInput: ElementRef<HTMLInputElement>;\n    @ViewChild(\"matTabGroup\") matTabGroup: MatTabGroup;\n\n    constructor(private postsService: PostsService) {}\n\n    ngOnInit(): void {\n        this.keywords$ = this.searchFormControl.valueChanges.pipe(\n            startWith(null),\n            map((key: string | null) => (key ? this._filter(key) : this.allKeywords.slice().filter((i) => !this.selectedKeywords.includes(i))))\n        );\n\n        this.postsService.getPosts(Number.MAX_VALUE, Mode.all).subscribe((links) => {\n            this.allPosts = links;\n            this.updateMode(Mode.all);\n        });\n    }\n\n    ngOnDestroy(): void {}\n    /**\n     * Update mode - Switch tab\n     * @param mode\n     */\n    updateMode(mode: Mode) {\n        let displayPost = this.allPosts.filter((link) => {\n            if (mode == Mode.tech) return link.type_index === undefined || link.type_index === mode;\n            if (mode == Mode[\"non-tech\"]) return link.type_index !== undefined && link.type_index === mode;\n            return true;\n        });\n\n        this.allKeywords = [...new Set(displayPost.map((item) => item.tags as String[]).flat())] as String[];\n        if (this.selectedKeywords.length == 0) this.selectedKeywords.push(ALL_STR);\n\n        this.searchFormControl.setValue(null);\n\n        this.allCurrentModePost = displayPost;\n        this.updateFilter(this.selectedKeywords);\n    }\n    /**\n     * Update display when filter change\n     */\n    updateFilter(keywords?: String[]) {\n        let result = this.allCurrentModePost;\n        if (keywords && keywords.length > 0) {\n            result = this.allCurrentModePost.filter((post) =>\n                // If this post have at least 1 tag\n                post.tags.some((tag) => {\n                    // which match with the selected key words\n                    return this.selectedKeywords.some((key: string) => {\n                        if (key === ALL_STR) return tag;\n                        return tag.includes(key);\n                    });\n                })\n            );\n        }\n        let first = result.slice(0, 5);\n        this.remains = result.slice(5);\n        let arrs = [[first[0]], [first[1], first[3]], [first[2], first[4]]];\n        this._posts.next(arrs);\n    }\n    /**\n     * Scroll To\n     */\n    focusTo(focus: boolean) {\n        if (focus) this.keywordInput.nativeElement.focus();\n    }\n    @HostListener(\"window:scroll\", [\"$event\"])\n    onWindowScroll() {\n        //In chrome and some browser scroll is given to body tag\n        let pos = (document.documentElement.scrollTop || document.body.scrollTop) + document.documentElement.offsetHeight;\n        let max = document.documentElement.scrollHeight;\n        // pos/max will give you the distance between scroll bottom and and bottom of screen in percentage.\n        if (pos + 50 >= max) {\n            //Do your action here\n            this.loadMore();\n        }\n    }\n    /**\n     * On load more\n     */\n    loadMore() {\n        let takeTwoRow = this.remains.splice(0, 6);\n        let news = this._posts.getValue();\n        while (true) {\n            let takeData = takeTwoRow.splice(0, 3);\n            if (takeData.length == 0) {\n                break;\n            }\n            for (let i = 3; i > takeData.length; i--) {\n                takeData.push({ exist: false });\n            }\n            news[0].push(takeData[0]);\n            news[1].push(takeData[1]);\n            news[2].push(takeData[2]);\n        }\n        this._posts.next(news);\n    }\n\n    /**\n     * On Tab Change\n     * @param tab {tab, index}\n     */\n    tabChanged(tab: MatTabChangeEvent) {\n        this.updateMode(tab.index);\n        this.matTabGroup._elementRef.nativeElement.setAttribute(\"selected-index\", String(tab.index));\n    }\n    /**\n     * Filter keywords match\n     * @param value keyword\n     * @returns\n     */\n    private _filter(value: string): String[] {\n        const filterValue = value.toLowerCase();\n        console.log(value);\n        return this.allKeywords.filter((keyword) => !this.selectedKeywords.includes(keyword) && keyword.toLowerCase().includes(filterValue));\n    }\n    /**\n     * Add a chip\n     * @param event\n     */\n    add(event: MatChipInputEvent): void {\n        const value = (event.value || \"\").trim();\n        if (value && !this.selectedKeywords.includes(value)) {\n            if (this.selectedKeywords[0] === ALL_STR) this.selectedKeywords = [];\n            this.selectedKeywords.push(value);\n        }\n        // Clear the input value\n        this.keywordInput.nativeElement.value = \"\";\n        this.searchFormControl.setValue(null);\n        this.updateFilter(this.selectedKeywords);\n    }\n    /**\n     * Remove a chip\n     * @param keyword\n     */\n    remove(keyword: string): void {\n        const index = this.selectedKeywords.indexOf(keyword);\n        if (index >= 0) {\n            this.selectedKeywords.splice(index, 1);\n        }\n        if (this.selectedKeywords.length == 0) this.selectedKeywords.push(ALL_STR);\n        this.keywordInput.nativeElement.focus();\n        this.updateFilter(this.selectedKeywords);\n    }\n    /**\n     * Select a chip from auto input\n     * @param event\n     */\n    selected(event: MatAutocompleteSelectedEvent): void {\n        if (this.selectedKeywords[0] === ALL_STR) this.selectedKeywords = [];\n        this.selectedKeywords.push(event.option.viewValue);\n        this.keywordInput.nativeElement.value = \"\";\n        this.searchFormControl.setValue(null);\n        this.updateFilter(this.selectedKeywords);\n    }\n\n    identify(index, keyword) {\n        return keyword;\n    }\n}\n","export default \"<div class=\\\"bounds\\\" id=\\\"afterWork\\\">\\n    <div class=\\\"inner-bounds\\\">\\n        <div class=\\\"content\\\">\\n            <h1 class=\\\"header\\\">\\n                <span class=\\\"header-sub-wrapper\\\"><span>#AFTER</span><span>WORK</span></span>\\n                <mat-tab-group\\n                    #matTabGroup\\n                    *ngIf=\\\"currentNavIndex == 2\\\"\\n                    #afterwork\\n                    mat-align-tabs=\\\"end\\\"\\n                    [selectedIndex]=\\\"2\\\"\\n                    selected-index=\\\"2\\\"\\n                    class=\\\"my-tab-group\\\"\\n                    (selectedTabChange)=\\\"tabChanged($event)\\\">\\n                    <mat-tab label=\\\"Non-Tech\\\"></mat-tab>\\n                    <mat-tab label=\\\"Tech\\\"></mat-tab>\\n                    <mat-tab>\\n                        <!-- <ng-template #default>All</ng-template> -->\\n                        <ng-template mat-tab-label>\\n                            <mat-form-field class=\\\"example-chip-list\\\" appearance=\\\"fill\\\" (click)=\\\"focusTo(true)\\\">\\n                                <mat-chip-list #chipList aria-label=\\\"Keyword searching\\\" matTooltip=\\\"{{ selectedKeywords.join(' | ') }}\\\" matTooltipClass=\\\"flex-tooltip\\\" [matTooltipShowDelay]=\\\"300\\\">\\n                                    <mat-chip *ngFor=\\\"let keyword of selectedKeywords\\\" (removed)=\\\"remove(keyword)\\\" #chipItem>\\n                                        {{ keyword }}\\n                                        <button matChipRemove class=\\\"m-icon icn-cancel\\\" aria-label=\\\"clearSearch\\\"></button>\\n                                    </mat-chip>\\n                                    <input\\n                                        id=\\\"keywordInput\\\"\\n                                        placeholder=\\\"Enter keyword...\\\"\\n                                        #keywordInput\\n                                        [formControl]=\\\"searchFormControl\\\"\\n                                        [matAutocomplete]=\\\"auto\\\"\\n                                        [matChipInputFor]=\\\"chipList\\\"\\n                                        [matChipInputSeparatorKeyCodes]=\\\"separatorKeysCodes\\\"\\n                                        (matChipInputTokenEnd)=\\\"add($event)\\\" />\\n                                </mat-chip-list>\\n                                <mat-autocomplete #auto=\\\"matAutocomplete\\\" (optionSelected)=\\\"selected($event)\\\">\\n                                    <mat-option *ngFor=\\\"let keyword of keywords$ | async; trackBy: identify\\\" [value]=\\\"keyword\\\">\\n                                        {{ keyword }}\\n                                    </mat-option>\\n                                </mat-autocomplete>\\n                            </mat-form-field>\\n                        </ng-template>\\n                    </mat-tab>\\n                </mat-tab-group>\\n            </h1>\\n\\n            <div class=\\\"main-content\\\" *ngIf=\\\"posts$ | async as posts\\\">\\n                <!-- First part -->\\n                <div class=\\\"contents\\\">\\n                    <div class=\\\"content-col\\\">\\n                        <div class=\\\"note-container\\\">\\n                            <div class=\\\"overlay\\\">\\n                                <div class=\\\"note-headline\\\"></div>\\n                                <div class=\\\"note-wraper\\\">\\n                                    <div class=\\\"note\\\"></div>\\n                                </div>\\n                                <div class=\\\"note-content\\\">\\n                                    <figure class=\\\"main-color\\\">\\n                                        Hi there! So glad you are here. I write these not to show my experience, knowledge, or that. This part is like a notebook, where I note all the things learned\\n                                        after a long day at work, the exciting thing I got when I did my PET project, or maybe just something I got from the internet. The non-tech tab will be a little\\n                                        silly cause I write about my life, experiences, and whatever is helpful. I hope you will see me better day by day, and I hope you enjoy them.\\n                                    </figure>\\n                                </div>\\n                            </div>\\n                        </div>\\n                        <app-afterwork-item *ngFor=\\\"let post of posts[0]\\\" [post]=\\\"post\\\"></app-afterwork-item>\\n                    </div>\\n                    <div class=\\\"content-col\\\">\\n                        <app-afterwork-item *ngFor=\\\"let post of posts[1]\\\" [post]=\\\"post\\\"></app-afterwork-item>\\n                    </div>\\n                    <div class=\\\"content-col\\\">\\n                        <app-afterwork-item *ngFor=\\\"let post of posts[2]\\\" [post]=\\\"post\\\"></app-afterwork-item>\\n                    </div>\\n                </div>\\n            </div>\\n            <app-footer></app-footer>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\\"menu-right\\\">\\n    <ng-container *ngIf=\\\"!subcribed; then subcribe; else unsubcribe\\\"> </ng-container>\\n    <ng-template #subcribe>\\n        <button aria-label=\\\"Subcribe button\\\" class=\\\"m-icon icn-subcribe shake\\\"></button>\\n    </ng-template>\\n    <ng-template #unsubcribe>\\n        <button aria-label=\\\"Unsubscribe button\\\" class=\\\"m-icon icn-unsubcribe shake\\\"></button>\\n    </ng-template>\\n</div>\\n\";","export default \".header .my-tab-group {\\n  margin-left: auto;\\n}\\n\\n#afterWork .header ::ng-deep mat-tab-group .mat-tab-labels > div:nth-child(3) {\\n  padding: 0px;\\n}\\n\\n#afterWork ::ng-deep .mat-tab-labels > div:nth-child(3).mat-tab-label-active .mat-chip-list-wrapper {\\n  border: 2px solid #f29e03;\\n}\\n\\n#afterWork ::ng-deep .mat-tab-labels > div:nth-child(3).mat-tab-label-active .mat-chip-list-wrapper input {\\n  width: 100%;\\n  margin: 4px;\\n}\\n\\n#afterWork ::ng-deep .mat-tab-labels > div:nth-child(3).mat-tab-label-active *:focus-within .mat-chip-list-wrapper mat-chip ~ input {\\n  max-width: 35%;\\n}\\n\\n#afterWork ::ng-deep .mat-tab-labels > div:nth-child(3).mat-tab-label-active *:focus-within .mat-chip-list-wrapper input {\\n  border-bottom: 1px solid lightblue;\\n  margin-bottom: 3px;\\n}\\n\\n#afterWork ::ng-deep .mat-tab-labels > div:nth-child(3).mat-tab-label-active .mat-chip-list-wrapper mat-chip ~ input {\\n  max-width: 0%;\\n}\\n\\n#afterWork ::ng-deep mat-tab-group[selected-index=\\\"2\\\"] .mat-tab-label-container .mat-ink-bar {\\n  opacity: 0;\\n  animation: normal 500;\\n}\\n\\n#afterWork ::ng-deep mat-chip-list .mat-chip-list-wrapper {\\n  display: block;\\n  border: 2px solid #00717b;\\n  border-radius: 30px;\\n  overflow: hidden;\\n  background-color: white;\\n  min-height: 40px;\\n  /* width */\\n}\\n\\n#afterWork ::ng-deep mat-chip-list .mat-chip-list-wrapper .mat-chip {\\n  color: white !important;\\n  align-items: flex-end;\\n  pointer-events: none;\\n}\\n\\n#afterWork ::ng-deep mat-chip-list .mat-chip-list-wrapper .mat-chip-remove {\\n  opacity: 1;\\n  pointer-events: visible;\\n}\\n\\n#afterWork ::ng-deep mat-chip-list .mat-chip-list-wrapper input {\\n  width: 0%;\\n  margin: 0px;\\n}\\n\\n#afterWork #keywordInput {\\n  height: 32px;\\n}\\n\\n#afterWork button.mat-chip-remove {\\n  padding: 0px;\\n}\\n\\nmat-option {\\n  background: white !important;\\n}\\n\\n.content {\\n  min-height: 100vh;\\n}\\n\\n.main-content {\\n  display: block;\\n}\\n\\n.main-content .contents {\\n  display: flex;\\n  flex: 1;\\n}\\n\\n.main-content .content-col {\\n  width: 33.33%;\\n  min-height: 600px;\\n}\\n\\n.main-content .content-col:nth-child(2) {\\n  margin: 0px 10px;\\n}\\n\\n.main-content .note-container {\\n  min-height: 190px;\\n  margin-bottom: 10px;\\n  border: 1px solid #f29e03;\\n  border-radius: 10px;\\n  overflow: hidden;\\n  display: flex;\\n  background-color: #daf2e5;\\n}\\n\\n.main-content .note-container .overlay {\\n  display: flex;\\n  align-items: center;\\n  background-color: rgba(255, 255, 255, 0.7);\\n}\\n\\n.main-content .note-container .note {\\n  width: 50px;\\n  min-width: 50px;\\n  height: 50px;\\n  min-height: 50px;\\n}\\n\\n.main-content .note-container .note-headline {\\n  height: 100%;\\n  width: 10px;\\n  background-color: #f29e03;\\n}\\n\\n.main-content .note-container .note-content {\\n  width: calc(100% - 75px);\\n  height: -webkit-fit-content;\\n  height: -moz-fit-content;\\n  height: fit-content;\\n}\\n\\n.main-content .note-container .note-content p {\\n  text-align: justify;\\n  font-style: italic;\\n  margin: 0;\\n}\\n\\n.main-content .note-container .note-content figure {\\n  margin: 14px 0px;\\n  text-align: justify;\\n}\\n\\n.main-content > app-afterwork-item {\\n  height: 100%;\\n}\\n\\n.main-content > app-afterwork-item ::ng-deep .topic-image {\\n  height: 375.52px;\\n}\\n\\n.main-content > app-afterwork-item ::ng-deep .topic-container .topic .title {\\n  max-height: calc(100% - 150px);\\n}\\n\\n.main-content > app-afterwork-item ::ng-deep .topic-container .topic .topic-footer {\\n  margin-top: 8px;\\n}\\n\\n.main-content > app-afterwork-item ::ng-deep .topic-container .topic {\\n  height: auto;\\n}\\n\\n@media screen and (max-width: 1279px) {\\n  .bounds .header {\\n    flex-direction: column;\\n    align-items: center;\\n  }\\n  .bounds .header mat-tab-group {\\n    margin-left: 0px !important;\\n  }\\n  .bounds .main-content .contents {\\n    display: inline-block;\\n    column-count: 2;\\n  }\\n  .bounds .main-content .content-col {\\n    width: 100%;\\n    min-height: 600px;\\n  }\\n  .bounds .main-content .content-col app-afterwork-item {\\n    display: inline-block;\\n  }\\n  .bounds .main-content .content-col:nth-child(2) {\\n    margin-left: 0px;\\n  }\\n}\\n\\n@media screen and (max-width: 539px) {\\n  .bounds .content .main-content .contents {\\n    column-count: 1;\\n  }\\n  .bounds .content .header .header-sub-wrapper {\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n  }\\n  .bounds .content ::ng-deep .mat-tab-label {\\n    padding: 0 16px;\\n  }\\n}\";","import { ScrollDispatcher, ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/common';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { ɵɵdefineInjectable, ɵɵinject, NgZone, Injectable, Inject, Optional, ElementRef, ApplicationRef, ComponentFactoryResolver, Injector, InjectionToken, Directive, EventEmitter, TemplateRef, ViewContainerRef, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { supportsScrollBehavior, Platform } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { take, takeUntil, takeWhile } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst scrollBehaviorSupported = supportsScrollBehavior();\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach() { }\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() {\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement;\n            const body = this._document.body;\n            const htmlStyle = html.style;\n            const bodyStyle = body.style;\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n            // because it can throw off feature detections in `supportsScrollBehavior` which\n            // checks for `'scrollBehavior' in documentElement.style`.\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            }\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            if (scrollBehaviorSupported) {\n                htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n                bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n            }\n        }\n    }\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /** Detaches the overlay ref and disables the scroll strategy. */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /** Do nothing on scroll. */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /** Block scrolling. */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = function ScrollStrategyOptions_Factory(t) { return new (t || ScrollStrategyOptions)(ɵngcc0.ɵɵinject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nScrollStrategyOptions.ɵprov = ɵɵdefineInjectable({ factory: function ScrollStrategyOptions_Factory() { return new ScrollStrategyOptions(ɵɵinject(ScrollDispatcher), ɵɵinject(ViewportRuler), ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: ScrollStrategyOptions, providedIn: \"root\" });\nScrollStrategyOptions.ctorParameters = () => [\n    { type: ScrollDispatcher },\n    { type: ViewportRuler },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScrollStrategyOptions, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n    constructor(config) {\n        /** Strategy to be used when handling scroll events while the overlay is open. */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /** Custom class to add to the overlay pane. */\n        this.panelClass = '';\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            const configKeys = Object.keys(config);\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n    constructor(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n}\n/** The change event emitted by the strategy when a fallback position is used. */\nclass ConnectedOverlayPositionChange {\n    constructor(\n    /** The position used as a result of this change. */\n    connectionPair, \n    /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\nConnectedOverlayPositionChange.ctorParameters = () => [\n    { type: ConnectionPositionPair },\n    { type: ScrollingVisibility, decorators: [{ type: Optional }] }\n];\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n    constructor(document) {\n        /** Currently attached overlays in the order they were attached. */\n        this._attachedOverlays = [];\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef) {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this.detach();\n        }\n    }\n}\nBaseOverlayDispatcher.ɵfac = function BaseOverlayDispatcher_Factory(t) { return new (t || BaseOverlayDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nBaseOverlayDispatcher.ɵprov = ɵɵdefineInjectable({ factory: function BaseOverlayDispatcher_Factory() { return new BaseOverlayDispatcher(ɵɵinject(DOCUMENT)); }, token: BaseOverlayDispatcher, providedIn: \"root\" });\nBaseOverlayDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BaseOverlayDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    constructor(document) {\n        super(document);\n        /** Keyboard event listener that will be attached to the body. */\n        this._keydownListener = (event) => {\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEvents.observers.length > 0) {\n                    overlays[i]._keydownEvents.next(event);\n                    break;\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            this._document.body.addEventListener('keydown', this._keydownListener);\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = function OverlayKeyboardDispatcher_Factory(t) { return new (t || OverlayKeyboardDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nOverlayKeyboardDispatcher.ɵprov = ɵɵdefineInjectable({ factory: function OverlayKeyboardDispatcher_Factory() { return new OverlayKeyboardDispatcher(ɵɵinject(DOCUMENT)); }, token: OverlayKeyboardDispatcher, providedIn: \"root\" });\nOverlayKeyboardDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayKeyboardDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    constructor(document, _platform) {\n        super(document);\n        this._platform = _platform;\n        this._cursorStyleIsSet = false;\n        /** Click event listener that will be attached to the body propagate phase. */\n        this._clickListener = (event) => {\n            // Get the target through the `composedPath` if possible to account for shadow DOM.\n            const target = event.composedPath ? event.composedPath()[0] : event.target;\n            // We copy the array because the original may be modified asynchronously if the\n            // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n            // the for loop.\n            const overlays = this._attachedOverlays.slice();\n            // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n            // We want to target all overlays for which the click could be considered as outside click.\n            // As soon as we reach an overlay for which the click is not outside click we break off\n            // the loop.\n            for (let i = overlays.length - 1; i > -1; i--) {\n                const overlayRef = overlays[i];\n                if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n                    continue;\n                }\n                // If it's a click inside the overlay, just break - we should do nothing\n                // If it's an outside click dispatch the mouse event, and proceed with the next overlay\n                if (overlayRef.overlayElement.contains(target)) {\n                    break;\n                }\n                overlayRef._outsidePointerEvents.next(event);\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Safari on iOS does not generate click events for non-interactive\n        // elements. However, we want to receive a click for any element outside\n        // the overlay. We can force a \"clickable\" state by setting\n        // `cursor: pointer` on the document body. See:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n        // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n        if (!this._isAttached) {\n            const body = this._document.body;\n            body.addEventListener('click', this._clickListener, true);\n            body.addEventListener('auxclick', this._clickListener, true);\n            body.addEventListener('contextmenu', this._clickListener, true);\n            // click event is not fired on iOS. To make element \"clickable\" we are\n            // setting the cursor to pointer\n            if (this._platform.IOS && !this._cursorStyleIsSet) {\n                this._cursorOriginalValue = body.style.cursor;\n                body.style.cursor = 'pointer';\n                this._cursorStyleIsSet = true;\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            const body = this._document.body;\n            body.removeEventListener('click', this._clickListener, true);\n            body.removeEventListener('auxclick', this._clickListener, true);\n            body.removeEventListener('contextmenu', this._clickListener, true);\n            if (this._platform.IOS && this._cursorStyleIsSet) {\n                body.style.cursor = this._cursorOriginalValue;\n                this._cursorStyleIsSet = false;\n            }\n            this._isAttached = false;\n        }\n    }\n}\nOverlayOutsideClickDispatcher.ɵfac = function OverlayOutsideClickDispatcher_Factory(t) { return new (t || OverlayOutsideClickDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\nOverlayOutsideClickDispatcher.ɵprov = ɵɵdefineInjectable({ factory: function OverlayOutsideClickDispatcher_Factory() { return new OverlayOutsideClickDispatcher(ɵɵinject(DOCUMENT), ɵɵinject(Platform)); }, token: OverlayOutsideClickDispatcher, providedIn: \"root\" });\nOverlayOutsideClickDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayOutsideClickDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Whether we're in a testing environment.\n * TODO(crisbeto): remove this once we have an overlay testing module.\n */\nconst isTestEnvironment = typeof window !== 'undefined' && !!window &&\n    !!(window.__karma__ || window.jasmine);\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n    constructor(document, _platform) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    ngOnDestroy() {\n        const container = this._containerElement;\n        if (container && container.parentNode) {\n            container.parentNode.removeChild(container);\n        }\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        const containerClass = 'cdk-overlay-container';\n        if (this._platform.isBrowser || isTestEnvironment) {\n            const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` +\n                `.${containerClass}[platform=\"test\"]`);\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                oppositePlatformContainers[i].parentNode.removeChild(oppositePlatformContainers[i]);\n            }\n        }\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (isTestEnvironment) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!this._platform.isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = function OverlayContainer_Factory(t) { return new (t || OverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\nOverlayContainer.ɵprov = ɵɵdefineInjectable({ factory: function OverlayContainer_Factory() { return new OverlayContainer(ɵɵinject(DOCUMENT), ɵɵinject(Platform)); }, token: OverlayContainer, providedIn: \"root\" });\nOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (event) => this._backdropClick.next(event);\n        /** Stream of keydown events dispatched to this overlay. */\n        this._keydownEvents = new Subject();\n        /** Stream of mouse outside events dispatched to this overlay. */\n        this._outsidePointerEvents = new Subject();\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /** The overlay's HTML element */\n    get overlayElement() {\n        return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal) {\n        let attachResult = this._portalOutlet.attach(portal);\n        // Update the pane element with the given configuration.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable\n            .pipe(take(1))\n            .subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        if (this._config.disposeOnNavigation) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        this._outsideClickDispatcher.add(this);\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        this._locationChanges.unsubscribe();\n        this._outsideClickDispatcher.remove(this);\n        return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n    dispose() {\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this.detachBackdrop();\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        this._outsidePointerEvents.complete();\n        this._outsideClickDispatcher.remove(this);\n        if (this._host && this._host.parentNode) {\n            this._host.parentNode.removeChild(this._host);\n            this._host = null;\n        }\n        this._previousHostParent = this._pane = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick() {\n        return this._backdropClick;\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments() {\n        return this._attachments;\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments() {\n        return this._detachments;\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents() {\n        return this._keydownEvents;\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n    outsidePointerEvents() {\n        return this._outsidePointerEvents;\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n    getConfig() {\n        return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig) {\n        this._config = Object.assign(Object.assign({}, this._config), sizeConfig);\n        this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir) {\n        this._config = Object.assign(Object.assign({}, this._config), { direction: dir });\n        this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection() {\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /** Updates the text direction of the overlay panel. */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n    _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop() {\n        let backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        let timeoutId;\n        let finishDetach = () => {\n            // It may not be attached to anything in certain cases (e.g. unit tests).\n            if (backdropToDetach) {\n                backdropToDetach.removeEventListener('click', this._backdropClickHandler);\n                backdropToDetach.removeEventListener('transitionend', finishDetach);\n                if (backdropToDetach.parentNode) {\n                    backdropToDetach.parentNode.removeChild(backdropToDetach);\n                }\n            }\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement == backdropToDetach) {\n                this._backdropElement = null;\n            }\n            if (this._config.backdropClass) {\n                this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n            }\n            clearTimeout(timeoutId);\n        };\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            backdropToDetach.addEventListener('transitionend', finishDetach);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const classList = element.classList;\n        coerceArray(cssClasses).forEach(cssClass => {\n            // We can't do a spread here, because IE doesn't support setting multiple classes.\n            // Also trying to add an empty string to a DOMTokenList will throw.\n            if (cssClass) {\n                isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n            }\n        });\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            const subscription = this._ngZone.onStable\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._previousHostParent.removeChild(this._host);\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n    /** Disposes of a scroll strategy. */\n    _disposeScrollStrategy() {\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /** Whether the overlay was pushed in a previous positioning. */\n        this._isPushed = false;\n        /** Whether the overlay can be pushed on-screen on the initial open. */\n        this._canPush = true;\n        /** Whether the overlay can grow via flexible width/height after the initial open. */\n        this._growAfterOpen = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this._hasFlexibleDimensions = true;\n        /** Whether the overlay position is locked. */\n        this._positionLocked = false;\n        /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n        this._viewportMargin = 0;\n        /** The Scrollable containers used to check scrollable view properties on position change. */\n        this._scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        /** Subject that emits whenever the position changes. */\n        this._positionChanges = new Subject();\n        /** Subscription to viewport size changes. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Default offset for the overlay along the x axis. */\n        this._offsetX = 0;\n        /** Default offset for the overlay along the y axis. */\n        this._offsetY = 0;\n        /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n        this._appliedPanelClasses = [];\n        /** Observable sequence of position changes. */\n        this.positionChanges = this._positionChanges;\n        this.setOrigin(connectedTo);\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && overlayRef !== this._overlayRef &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    }\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition() {\n        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            const lastPosition = this._lastPosition || this._preferredPositions[0];\n            const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    setOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    _getOriginPoint(originRect, pos) {\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + (originRect.width / 2);\n        }\n        else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + (originRect.height / 2);\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    _getOverlayFit(point, rawOverlayRect, viewport, position) {\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x;\n        let rightOverflow = (x + overlay.width) - viewport.width;\n        let topOverflow = 0 - y;\n        let bottomOverflow = (y + overlay.height) - viewport.height;\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlat at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            const verticalFit = fit.fitsInViewportVertically ||\n                (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally ||\n                (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param overlay Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y\n            };\n        }\n        // Round the overlay rect when comparing against the\n        // viewport, because the viewport is always rounded.\n        const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        let pushX = 0;\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        let xOrigin;\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - (previousHeight / 2);\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) ||\n            (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) ||\n            (position.overlayX === 'start' && isRtl);\n        let width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - (previousWidth / 2);\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    }\n    /** Sets positioning styles to the overlay element. */\n    _setOverlayElementStyles(originPoint, position) {\n        const styles = {};\n        const hasExactPosition = this._hasExactPosition();\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: '', bottom: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        let virtualKeyboardOffset = this._overlayContainer.getContainerElement().getBoundingClientRect().top;\n        // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n        // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        overlayPoint.y -= virtualKeyboardOffset;\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: '', right: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._getOriginRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this._scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - (2 * this._viewportMargin),\n            height: height - (2 * this._viewportMargin),\n        };\n    }\n    /** Whether the we're dealing with an RTL context */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n    _validatePositions() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(pair => {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        }\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => {\n                this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    }\n    /** Returns the ClientRect of the current origin. */\n    _getOriginRect() {\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        const width = origin.width || 0;\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width\n        };\n    }\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return (!units || units === 'px') ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect) {\n    return {\n        top: Math.floor(clientRect.top),\n        right: Math.floor(clientRect.right),\n        bottom: Math.floor(clientRect.bottom),\n        left: Math.floor(clientRect.left),\n        width: Math.floor(clientRect.width),\n        height: Math.floor(clientRect.height)\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * @breaking-change 8.0.0\n */\nclass ConnectedPositionStrategy {\n    constructor(originPos, overlayPos, connectedTo, viewportRuler, document, platform, overlayContainer) {\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n        // the extra logic, we create an instance of the positioning strategy that has some\n        // defaults that make it behave as the old position strategy and to which we'll\n        // proxy all of the API calls.\n        this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform, overlayContainer)\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withViewportMargin(0);\n        this.withFallbackPosition(originPos, overlayPos);\n        this.onPositionChange = this._positionStrategy.positionChanges;\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attach this position strategy to an overlay. */\n    attach(overlayRef) {\n        this._overlayRef = overlayRef;\n        this._positionStrategy.attach(overlayRef);\n        if (this._direction) {\n            overlayRef.setDirection(this._direction);\n            this._direction = null;\n        }\n    }\n    /** Disposes all resources used by the position strategy. */\n    dispose() {\n        this._positionStrategy.dispose();\n    }\n    /** @docs-private */\n    detach() {\n        this._positionStrategy.detach();\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * @docs-private\n     */\n    apply() {\n        this._positionStrategy.apply();\n    }\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    recalculateLastPosition() {\n        this._positionStrategy.reapplyLastPosition();\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._positionStrategy.withScrollableContainers(scrollables);\n    }\n    /**\n     * Adds a new preferred fallback position.\n     * @param originPos\n     * @param overlayPos\n     */\n    withFallbackPosition(originPos, overlayPos, offsetX, offsetY) {\n        const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n        this._preferredPositions.push(position);\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    }\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param dir New layout direction.\n     */\n    withDirection(dir) {\n        // Since the direction might be declared before the strategy is attached,\n        // we save the value in a temporary property and we'll transfer it to the\n        // overlay ref on attachment.\n        if (this._overlayRef) {\n            this._overlayRef.setDirection(dir);\n        }\n        else {\n            this._direction = dir;\n        }\n        return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param offset New offset in the X axis.\n     */\n    withOffsetX(offset) {\n        this._positionStrategy.withDefaultOffsetX(offset);\n        return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param  offset New offset in the Y axis.\n     */\n    withOffsetY(offset) {\n        this._positionStrategy.withDefaultOffsetY(offset);\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked) {\n        this._positionStrategy.withLockedPosition(isLocked);\n        return this;\n    }\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @param positions Position pairs to be set on the strategy.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions.slice();\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    }\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param origin Reference to the new origin element.\n     */\n    setOrigin(origin) {\n        this._positionStrategy.setOrigin(origin);\n        return this;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    attach(overlayRef) {\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value = '') {\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value = '') {\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._justifyContent = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (shouldBeFlushHorizontally) {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parent = this._overlayRef.hostElement;\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n            styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a relative position strategy.\n     * @param elementRef\n     * @param originPos\n     * @param overlayPos\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * @breaking-change 8.0.0\n     */\n    connectedTo(elementRef, originPos, overlayPos) {\n        return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = function OverlayPositionBuilder_Factory(t) { return new (t || OverlayPositionBuilder)(ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform), ɵngcc0.ɵɵinject(OverlayContainer)); };\nOverlayPositionBuilder.ɵprov = ɵɵdefineInjectable({ factory: function OverlayPositionBuilder_Factory() { return new OverlayPositionBuilder(ɵɵinject(ViewportRuler), ɵɵinject(DOCUMENT), ɵɵinject(Platform), ɵɵinject(OverlayContainer)); }, token: OverlayPositionBuilder, providedIn: \"root\" });\nOverlayPositionBuilder.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform },\n    { type: OverlayContainer }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayPositionBuilder, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }, { type: OverlayContainer }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config) {\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(host) {\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    _createHostElement() {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n}\nOverlay.ɵfac = function Overlay_Factory(t) { return new (t || Overlay)(ɵngcc0.ɵɵinject(ScrollStrategyOptions), ɵngcc0.ɵɵinject(OverlayContainer), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(OverlayPositionBuilder), ɵngcc0.ɵɵinject(OverlayKeyboardDispatcher), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc3.Directionality), ɵngcc0.ɵɵinject(ɵngcc4.Location), ɵngcc0.ɵɵinject(OverlayOutsideClickDispatcher)); };\nOverlay.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Overlay, factory: Overlay.ɵfac });\nOverlay.ctorParameters = () => [\n    { type: ScrollStrategyOptions },\n    { type: OverlayContainer },\n    { type: ComponentFactoryResolver },\n    { type: OverlayPositionBuilder },\n    { type: OverlayKeyboardDispatcher },\n    { type: Injector },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Directionality },\n    { type: Location },\n    { type: OverlayOutsideClickDispatcher }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Overlay, [{\n        type: Injectable\n    }], function () { return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: ɵngcc0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: ɵngcc0.Injector }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc3.Directionality }, { type: ɵngcc4.Location }, { type: OverlayOutsideClickDispatcher }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    }\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = function CdkOverlayOrigin_Factory(t) { return new (t || CdkOverlayOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkOverlayOrigin.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkOverlayOrigin, selectors: [[\"\", \"cdk-overlay-origin\", \"\"], [\"\", \"overlay-origin\", \"\"], [\"\", \"cdkOverlayOrigin\", \"\"]], exportAs: [\"cdkOverlayOrigin\"] });\nCdkOverlayOrigin.ctorParameters = () => [\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkOverlayOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                exportAs: 'cdkOverlayOrigin'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        this._attachSubscription = Subscription.EMPTY;\n        this._detachSubscription = Subscription.EMPTY;\n        this._positionSubscription = Subscription.EMPTY;\n        /** Margin between the overlay and the viewport edges. */\n        this.viewportMargin = 0;\n        /** Whether the overlay is open. */\n        this.open = false;\n        /** Whether the overlay can be closed by user interaction. */\n        this.disableClose = false;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new EventEmitter();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new EventEmitter();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new EventEmitter();\n        /** Emits when there are keyboard events that are targeted at the overlay. */\n        this.overlayKeydown = new EventEmitter();\n        /** Emits when there are mouse outside click events that are targeted at the overlay. */\n        this.overlayOutsideClick = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    get offsetX() { return this._offsetX; }\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    get offsetY() { return this._offsetY; }\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** Whether or not the overlay should attach a backdrop. */\n    get hasBackdrop() { return this._hasBackdrop; }\n    set hasBackdrop(value) { this._hasBackdrop = coerceBooleanProperty(value); }\n    /** Whether or not the overlay should be locked when scrolling. */\n    get lockPosition() { return this._lockPosition; }\n    set lockPosition(value) { this._lockPosition = coerceBooleanProperty(value); }\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    get flexibleDimensions() { return this._flexibleDimensions; }\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    get growAfterOpen() { return this._growAfterOpen; }\n    set growAfterOpen(value) { this._growAfterOpen = coerceBooleanProperty(value); }\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    get push() { return this._push; }\n    set push(value) { this._push = coerceBooleanProperty(value); }\n    /** The associated overlay reference. */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /** The element's layout direction. */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    ngOnDestroy() {\n        this._attachSubscription.unsubscribe();\n        this._detachSubscription.unsubscribe();\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n    }\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /** Creates an overlay */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        const overlayRef = this._overlayRef = this._overlay.create(this._buildConfig());\n        this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n        this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n        overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        });\n        this._overlayRef.outsidePointerEvents().subscribe((event) => {\n            this.overlayOutsideClick.next(event);\n        });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n    _buildConfig() {\n        const positionStrategy = this._position =\n            this.positionStrategy || this._createPositionStrategy();\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    _updatePositionStrategy(positionStrategy) {\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        }));\n        return positionStrategy\n            .setOrigin(this.origin.elementRef)\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    _createPositionStrategy() {\n        const strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n        this._updatePositionStrategy(strategy);\n        return strategy;\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n        this._positionSubscription.unsubscribe();\n        // Only subscribe to `positionChanges` if requested, because putting\n        // together all the information for it can be expensive.\n        if (this.positionChange.observers.length > 0) {\n            this._positionSubscription = this._position.positionChanges\n                .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n                .subscribe(position => {\n                this.positionChange.emit(position);\n                if (this.positionChange.observers.length === 0) {\n                    this._positionSubscription.unsubscribe();\n                }\n            });\n        }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n        }\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = function CdkConnectedOverlay_Factory(t) { return new (t || CdkConnectedOverlay)(ɵngcc0.ɵɵdirectiveInject(Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8)); };\nCdkConnectedOverlay.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkConnectedOverlay, selectors: [[\"\", \"cdk-connected-overlay\", \"\"], [\"\", \"connected-overlay\", \"\"], [\"\", \"cdkConnectedOverlay\", \"\"]], inputs: { viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\", overlayOutsideClick: \"overlayOutsideClick\" }, exportAs: [\"cdkConnectedOverlay\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkConnectedOverlay.ctorParameters = () => [\n    { type: Overlay },\n    { type: TemplateRef },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nCdkConnectedOverlay.propDecorators = {\n    origin: [{ type: Input, args: ['cdkConnectedOverlayOrigin',] }],\n    positions: [{ type: Input, args: ['cdkConnectedOverlayPositions',] }],\n    positionStrategy: [{ type: Input, args: ['cdkConnectedOverlayPositionStrategy',] }],\n    offsetX: [{ type: Input, args: ['cdkConnectedOverlayOffsetX',] }],\n    offsetY: [{ type: Input, args: ['cdkConnectedOverlayOffsetY',] }],\n    width: [{ type: Input, args: ['cdkConnectedOverlayWidth',] }],\n    height: [{ type: Input, args: ['cdkConnectedOverlayHeight',] }],\n    minWidth: [{ type: Input, args: ['cdkConnectedOverlayMinWidth',] }],\n    minHeight: [{ type: Input, args: ['cdkConnectedOverlayMinHeight',] }],\n    backdropClass: [{ type: Input, args: ['cdkConnectedOverlayBackdropClass',] }],\n    panelClass: [{ type: Input, args: ['cdkConnectedOverlayPanelClass',] }],\n    viewportMargin: [{ type: Input, args: ['cdkConnectedOverlayViewportMargin',] }],\n    scrollStrategy: [{ type: Input, args: ['cdkConnectedOverlayScrollStrategy',] }],\n    open: [{ type: Input, args: ['cdkConnectedOverlayOpen',] }],\n    disableClose: [{ type: Input, args: ['cdkConnectedOverlayDisableClose',] }],\n    transformOriginSelector: [{ type: Input, args: ['cdkConnectedOverlayTransformOriginOn',] }],\n    hasBackdrop: [{ type: Input, args: ['cdkConnectedOverlayHasBackdrop',] }],\n    lockPosition: [{ type: Input, args: ['cdkConnectedOverlayLockPosition',] }],\n    flexibleDimensions: [{ type: Input, args: ['cdkConnectedOverlayFlexibleDimensions',] }],\n    growAfterOpen: [{ type: Input, args: ['cdkConnectedOverlayGrowAfterOpen',] }],\n    push: [{ type: Input, args: ['cdkConnectedOverlayPush',] }],\n    backdropClick: [{ type: Output }],\n    positionChange: [{ type: Output }],\n    attach: [{ type: Output }],\n    detach: [{ type: Output }],\n    overlayKeydown: [{ type: Output }],\n    overlayOutsideClick: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkConnectedOverlay, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                exportAs: 'cdkConnectedOverlay'\n            }]\n    }], function () { return [{ type: Overlay }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { viewportMargin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayViewportMargin']\n        }], open: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOpen']\n        }], disableClose: [{\n            type: Input,\n            args: ['cdkConnectedOverlayDisableClose']\n        }], backdropClick: [{\n            type: Output\n        }], positionChange: [{\n            type: Output\n        }], attach: [{\n            type: Output\n        }], detach: [{\n            type: Output\n        }], overlayKeydown: [{\n            type: Output\n        }], overlayOutsideClick: [{\n            type: Output\n        }], scrollStrategy: [{\n            type: Input,\n            args: ['cdkConnectedOverlayScrollStrategy']\n        }], offsetX: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetX']\n        }], offsetY: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetY']\n        }], hasBackdrop: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHasBackdrop']\n        }], lockPosition: [{\n            type: Input,\n            args: ['cdkConnectedOverlayLockPosition']\n        }], flexibleDimensions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayFlexibleDimensions']\n        }], growAfterOpen: [{\n            type: Input,\n            args: ['cdkConnectedOverlayGrowAfterOpen']\n        }], push: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPush']\n        }], positions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPositions']\n        }], origin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOrigin']\n        }], positionStrategy: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPositionStrategy']\n        }], width: [{\n            type: Input,\n            args: ['cdkConnectedOverlayWidth']\n        }], height: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHeight']\n        }], minWidth: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinWidth']\n        }], minHeight: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinHeight']\n        }], backdropClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayBackdropClass']\n        }], panelClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPanelClass']\n        }], transformOriginSelector: [{\n            type: Input,\n            args: ['cdkConnectedOverlayTransformOriginOn']\n        }] }); })();\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass OverlayModule {\n}\nOverlayModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: OverlayModule });\nOverlayModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function OverlayModule_Factory(t) { return new (t || OverlayModule)(); }, providers: [\n        Overlay,\n        CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [[BidiModule, PortalModule, ScrollingModule], ScrollingModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OverlayModule, { declarations: function () { return [CdkConnectedOverlay, CdkOverlayOrigin]; }, imports: function () { return [BidiModule, PortalModule, ScrollingModule]; }, exports: function () { return [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayModule, [{\n        type: NgModule,\n        args: [{\n                imports: [BidiModule, PortalModule, ScrollingModule],\n                exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                providers: [\n                    Overlay,\n                    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    constructor(_document, platform) {\n        super(_document, platform);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    _addFullscreenChangeListener(fn) {\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            const _document = this._document;\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement() {\n        const _document = this._document;\n        return _document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null;\n    }\n}\nFullscreenOverlayContainer.ɵfac = function FullscreenOverlayContainer_Factory(t) { return new (t || FullscreenOverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\nFullscreenOverlayContainer.ɵprov = ɵɵdefineInjectable({ factory: function FullscreenOverlayContainer_Factory() { return new FullscreenOverlayContainer(ɵɵinject(DOCUMENT), ɵɵinject(Platform)); }, token: FullscreenOverlayContainer, providedIn: \"root\" });\nFullscreenOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FullscreenOverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectedPositionStrategy, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵangular_material_src_cdk_overlay_overlay_a, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_b, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_c, BaseOverlayDispatcher as ɵangular_material_src_cdk_overlay_overlay_d };\n\n//# sourceMappingURL=overlay.js.map"],"sourceRoot":"webpack:///"}